Loading parflow-ml/latest
  Loading requirement: openmpi/gcc/4.1.0 parflow/3.9.0 gdal/3.2.1
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/setuptools/distutils_patch.py:25: UserWarning: Distutils was imported before Setuptools. This usage is discouraged and may exhibit undesirable behaviors or errors. Please use Setuptools' objects directly or at least import Setuptools first.
  warnings.warn(
/home/qh8373/SBI_TAYLOR/sbi_taylor/scripts/05_utils/sbiutils.py:110: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(y_out)
Running 5000 simulations.:   0%|          | 0/5000 [00:00<?, ?it/s]Running 5000 simulations.:   1%|          | 26/5000 [00:00<00:19, 255.65it/s]Running 5000 simulations.:   1%|          | 52/5000 [00:00<00:19, 255.91it/s]Running 5000 simulations.:   2%|▏         | 78/5000 [00:00<00:19, 255.92it/s]Running 5000 simulations.:   2%|▏         | 104/5000 [00:00<00:19, 255.15it/s]Running 5000 simulations.:   3%|▎         | 130/5000 [00:00<00:19, 254.42it/s]Running 5000 simulations.:   3%|▎         | 156/5000 [00:00<00:19, 254.14it/s]Running 5000 simulations.:   4%|▎         | 182/5000 [00:00<00:18, 254.13it/s]Running 5000 simulations.:   4%|▍         | 208/5000 [00:00<00:18, 253.64it/s]Running 5000 simulations.:   5%|▍         | 234/5000 [00:00<00:18, 253.53it/s]Running 5000 simulations.:   5%|▌         | 260/5000 [00:01<00:18, 253.93it/s]Running 5000 simulations.:   6%|▌         | 286/5000 [00:01<00:18, 253.99it/s]Running 5000 simulations.:   6%|▌         | 312/5000 [00:01<00:18, 254.14it/s]Running 5000 simulations.:   7%|▋         | 338/5000 [00:01<00:18, 254.50it/s]Running 5000 simulations.:   7%|▋         | 364/5000 [00:01<00:18, 253.89it/s]Running 5000 simulations.:   8%|▊         | 390/5000 [00:01<00:18, 253.34it/s]Running 5000 simulations.:   8%|▊         | 416/5000 [00:01<00:18, 252.27it/s]Running 5000 simulations.:   9%|▉         | 442/5000 [00:01<00:18, 247.26it/s]Running 5000 simulations.:   9%|▉         | 467/5000 [00:01<00:18, 247.57it/s]Running 5000 simulations.:  10%|▉         | 493/5000 [00:01<00:18, 248.66it/s]Running 5000 simulations.:  10%|█         | 518/5000 [00:02<00:18, 248.86it/s]Running 5000 simulations.:  11%|█         | 543/5000 [00:02<00:17, 248.76it/s]Running 5000 simulations.:  11%|█▏        | 568/5000 [00:02<00:17, 249.07it/s]Running 5000 simulations.:  12%|█▏        | 593/5000 [00:02<00:17, 248.98it/s]Running 5000 simulations.:  12%|█▏        | 618/5000 [00:02<00:17, 248.65it/s]Running 5000 simulations.:  13%|█▎        | 643/5000 [00:02<00:17, 248.47it/s]Running 5000 simulations.:  13%|█▎        | 668/5000 [00:02<00:17, 248.75it/s]Running 5000 simulations.:  14%|█▍        | 693/5000 [00:02<00:17, 248.85it/s]Running 5000 simulations.:  14%|█▍        | 718/5000 [00:02<00:17, 248.84it/s]Running 5000 simulations.:  15%|█▍        | 744/5000 [00:02<00:17, 249.46it/s]Running 5000 simulations.:  15%|█▌        | 769/5000 [00:03<00:16, 249.11it/s]Running 5000 simulations.:  16%|█▌        | 794/5000 [00:03<00:16, 248.69it/s]Running 5000 simulations.:  16%|█▋        | 819/5000 [00:03<00:17, 236.00it/s]Running 5000 simulations.:  17%|█▋        | 843/5000 [00:03<00:20, 205.82it/s]Running 5000 simulations.:  17%|█▋        | 865/5000 [00:03<00:22, 186.90it/s]Running 5000 simulations.:  18%|█▊        | 885/5000 [00:03<00:23, 176.52it/s]Running 5000 simulations.:  18%|█▊        | 904/5000 [00:03<00:24, 167.99it/s]Running 5000 simulations.:  18%|█▊        | 922/5000 [00:03<00:24, 165.22it/s]Running 5000 simulations.:  19%|█▉        | 939/5000 [00:04<00:25, 161.94it/s]Running 5000 simulations.:  19%|█▉        | 956/5000 [00:04<00:25, 158.58it/s]Running 5000 simulations.:  19%|█▉        | 973/5000 [00:04<00:25, 158.30it/s]Running 5000 simulations.:  20%|█▉        | 989/5000 [00:04<00:25, 156.94it/s]Running 5000 simulations.:  20%|██        | 1006/5000 [00:04<00:24, 159.80it/s]Running 5000 simulations.:  20%|██        | 1023/5000 [00:04<00:25, 157.95it/s]Running 5000 simulations.:  21%|██        | 1040/5000 [00:04<00:24, 159.20it/s]Running 5000 simulations.:  21%|██        | 1056/5000 [00:04<00:24, 157.93it/s]Running 5000 simulations.:  21%|██▏       | 1072/5000 [00:04<00:25, 156.67it/s]Running 5000 simulations.:  22%|██▏       | 1088/5000 [00:05<00:25, 155.52it/s]Running 5000 simulations.:  22%|██▏       | 1104/5000 [00:05<00:25, 155.27it/s]Running 5000 simulations.:  22%|██▏       | 1120/5000 [00:05<00:25, 154.15it/s]Running 5000 simulations.:  23%|██▎       | 1136/5000 [00:05<00:25, 153.56it/s]Running 5000 simulations.:  23%|██▎       | 1153/5000 [00:05<00:24, 157.22it/s]Running 5000 simulations.:  23%|██▎       | 1169/5000 [00:05<00:24, 156.82it/s]Running 5000 simulations.:  24%|██▎       | 1185/5000 [00:05<00:24, 156.29it/s]Running 5000 simulations.:  24%|██▍       | 1201/5000 [00:05<00:24, 156.32it/s]Running 5000 simulations.:  24%|██▍       | 1218/5000 [00:05<00:23, 159.00it/s]Running 5000 simulations.:  25%|██▍       | 1235/5000 [00:05<00:23, 159.15it/s]Running 5000 simulations.:  25%|██▌       | 1251/5000 [00:06<00:23, 157.61it/s]Running 5000 simulations.:  25%|██▌       | 1267/5000 [00:06<00:23, 156.50it/s]Running 5000 simulations.:  26%|██▌       | 1283/5000 [00:06<00:23, 155.56it/s]Running 5000 simulations.:  26%|██▌       | 1299/5000 [00:06<00:23, 155.80it/s]Running 5000 simulations.:  26%|██▋       | 1315/5000 [00:06<00:23, 156.71it/s]Running 5000 simulations.:  27%|██▋       | 1331/5000 [00:06<00:23, 157.01it/s]Running 5000 simulations.:  27%|██▋       | 1347/5000 [00:06<00:23, 156.96it/s]Running 5000 simulations.:  27%|██▋       | 1364/5000 [00:06<00:22, 160.06it/s]Running 5000 simulations.:  28%|██▊       | 1381/5000 [00:06<00:22, 157.86it/s]Running 5000 simulations.:  28%|██▊       | 1397/5000 [00:06<00:22, 157.18it/s]Running 5000 simulations.:  28%|██▊       | 1413/5000 [00:07<00:23, 155.77it/s]Running 5000 simulations.:  29%|██▊       | 1429/5000 [00:07<00:23, 155.01it/s]Running 5000 simulations.:  29%|██▉       | 1445/5000 [00:07<00:23, 154.40it/s]Running 5000 simulations.:  29%|██▉       | 1461/5000 [00:07<00:23, 153.53it/s]Running 5000 simulations.:  30%|██▉       | 1477/5000 [00:07<00:22, 153.41it/s]Running 5000 simulations.:  30%|██▉       | 1493/5000 [00:07<00:22, 153.51it/s]Running 5000 simulations.:  30%|███       | 1509/5000 [00:07<00:22, 153.49it/s]Running 5000 simulations.:  30%|███       | 1525/5000 [00:07<00:22, 153.15it/s]Running 5000 simulations.:  31%|███       | 1541/5000 [00:07<00:22, 151.16it/s]Running 5000 simulations.:  31%|███       | 1557/5000 [00:08<00:22, 151.47it/s]Running 5000 simulations.:  31%|███▏      | 1573/5000 [00:08<00:22, 151.55it/s]Running 5000 simulations.:  32%|███▏      | 1589/5000 [00:08<00:22, 152.25it/s]Running 5000 simulations.:  32%|███▏      | 1605/5000 [00:08<00:22, 152.49it/s]Running 5000 simulations.:  32%|███▏      | 1621/5000 [00:08<00:22, 152.64it/s]Running 5000 simulations.:  33%|███▎      | 1637/5000 [00:08<00:22, 152.22it/s]Running 5000 simulations.:  33%|███▎      | 1653/5000 [00:08<00:21, 152.86it/s]Running 5000 simulations.:  33%|███▎      | 1669/5000 [00:08<00:21, 152.78it/s]Running 5000 simulations.:  34%|███▎      | 1685/5000 [00:08<00:21, 153.21it/s]Running 5000 simulations.:  34%|███▍      | 1701/5000 [00:08<00:21, 153.39it/s]Running 5000 simulations.:  34%|███▍      | 1717/5000 [00:09<00:21, 153.07it/s]Running 5000 simulations.:  35%|███▍      | 1733/5000 [00:09<00:21, 153.16it/s]Running 5000 simulations.:  35%|███▍      | 1749/5000 [00:09<00:21, 153.05it/s]Running 5000 simulations.:  35%|███▌      | 1765/5000 [00:09<00:21, 152.14it/s]Running 5000 simulations.:  36%|███▌      | 1781/5000 [00:09<00:21, 152.17it/s]Running 5000 simulations.:  36%|███▌      | 1797/5000 [00:09<00:21, 152.33it/s]Running 5000 simulations.:  36%|███▋      | 1813/5000 [00:09<00:20, 152.12it/s]Running 5000 simulations.:  37%|███▋      | 1829/5000 [00:09<00:20, 152.53it/s]Running 5000 simulations.:  37%|███▋      | 1845/5000 [00:09<00:20, 152.70it/s]Running 5000 simulations.:  37%|███▋      | 1861/5000 [00:10<00:20, 152.58it/s]Running 5000 simulations.:  38%|███▊      | 1877/5000 [00:10<00:20, 152.06it/s]Running 5000 simulations.:  38%|███▊      | 1893/5000 [00:10<00:20, 151.65it/s]Running 5000 simulations.:  38%|███▊      | 1909/5000 [00:10<00:20, 151.80it/s]Running 5000 simulations.:  38%|███▊      | 1925/5000 [00:10<00:20, 151.57it/s]Running 5000 simulations.:  39%|███▉      | 1941/5000 [00:10<00:20, 151.02it/s]Running 5000 simulations.:  39%|███▉      | 1957/5000 [00:10<00:20, 151.17it/s]Running 5000 simulations.:  39%|███▉      | 1973/5000 [00:10<00:20, 151.02it/s]Running 5000 simulations.:  40%|███▉      | 1989/5000 [00:10<00:19, 150.69it/s]Running 5000 simulations.:  40%|████      | 2005/5000 [00:10<00:19, 150.66it/s]Running 5000 simulations.:  40%|████      | 2021/5000 [00:11<00:19, 150.78it/s]Running 5000 simulations.:  41%|████      | 2037/5000 [00:11<00:19, 151.05it/s]Running 5000 simulations.:  41%|████      | 2053/5000 [00:11<00:19, 151.29it/s]Running 5000 simulations.:  41%|████▏     | 2069/5000 [00:11<00:19, 152.10it/s]Running 5000 simulations.:  42%|████▏     | 2085/5000 [00:11<00:19, 151.70it/s]Running 5000 simulations.:  42%|████▏     | 2101/5000 [00:11<00:19, 149.98it/s]Running 5000 simulations.:  42%|████▏     | 2117/5000 [00:11<00:19, 149.86it/s]Running 5000 simulations.:  43%|████▎     | 2133/5000 [00:11<00:19, 150.09it/s]Running 5000 simulations.:  43%|████▎     | 2149/5000 [00:11<00:18, 150.46it/s]Running 5000 simulations.:  43%|████▎     | 2165/5000 [00:12<00:18, 150.49it/s]Running 5000 simulations.:  44%|████▎     | 2181/5000 [00:12<00:18, 150.63it/s]Running 5000 simulations.:  44%|████▍     | 2197/5000 [00:12<00:18, 149.06it/s]Running 5000 simulations.:  44%|████▍     | 2212/5000 [00:12<00:18, 148.81it/s]Running 5000 simulations.:  45%|████▍     | 2227/5000 [00:12<00:18, 149.00it/s]Running 5000 simulations.:  45%|████▍     | 2243/5000 [00:12<00:18, 149.37it/s]Running 5000 simulations.:  45%|████▌     | 2259/5000 [00:12<00:18, 150.33it/s]Running 5000 simulations.:  46%|████▌     | 2275/5000 [00:12<00:18, 151.25it/s]Running 5000 simulations.:  46%|████▌     | 2291/5000 [00:12<00:18, 149.81it/s]Running 5000 simulations.:  46%|████▌     | 2307/5000 [00:12<00:17, 150.79it/s]Running 5000 simulations.:  46%|████▋     | 2323/5000 [00:13<00:17, 151.12it/s]Running 5000 simulations.:  47%|████▋     | 2339/5000 [00:13<00:17, 151.56it/s]Running 5000 simulations.:  47%|████▋     | 2355/5000 [00:13<00:17, 152.24it/s]Running 5000 simulations.:  47%|████▋     | 2371/5000 [00:13<00:17, 152.97it/s]Running 5000 simulations.:  48%|████▊     | 2387/5000 [00:13<00:17, 152.78it/s]Running 5000 simulations.:  48%|████▊     | 2403/5000 [00:13<00:17, 152.64it/s]Running 5000 simulations.:  48%|████▊     | 2419/5000 [00:13<00:16, 151.90it/s]Running 5000 simulations.:  49%|████▊     | 2435/5000 [00:13<00:16, 152.42it/s]Running 5000 simulations.:  49%|████▉     | 2451/5000 [00:13<00:16, 152.25it/s]Running 5000 simulations.:  49%|████▉     | 2467/5000 [00:14<00:16, 152.31it/s]Running 5000 simulations.:  50%|████▉     | 2483/5000 [00:14<00:16, 152.48it/s]Running 5000 simulations.:  50%|████▉     | 2499/5000 [00:14<00:16, 152.17it/s]Running 5000 simulations.:  50%|█████     | 2515/5000 [00:14<00:16, 152.22it/s]Running 5000 simulations.:  51%|█████     | 2531/5000 [00:14<00:16, 152.15it/s]Running 5000 simulations.:  51%|█████     | 2547/5000 [00:14<00:16, 152.39it/s]Running 5000 simulations.:  51%|█████▏    | 2563/5000 [00:14<00:16, 152.11it/s]Running 5000 simulations.:  52%|█████▏    | 2579/5000 [00:14<00:15, 152.07it/s]Running 5000 simulations.:  52%|█████▏    | 2595/5000 [00:14<00:15, 152.06it/s]Running 5000 simulations.:  52%|█████▏    | 2611/5000 [00:14<00:15, 152.29it/s]Running 5000 simulations.:  53%|█████▎    | 2627/5000 [00:15<00:15, 152.19it/s]Running 5000 simulations.:  53%|█████▎    | 2643/5000 [00:15<00:15, 151.75it/s]Running 5000 simulations.:  53%|█████▎    | 2659/5000 [00:15<00:15, 151.60it/s]Running 5000 simulations.:  54%|█████▎    | 2675/5000 [00:15<00:15, 151.45it/s]Running 5000 simulations.:  54%|█████▍    | 2691/5000 [00:15<00:15, 151.94it/s]Running 5000 simulations.:  54%|█████▍    | 2707/5000 [00:15<00:15, 152.02it/s]Running 5000 simulations.:  54%|█████▍    | 2723/5000 [00:15<00:15, 151.72it/s]Running 5000 simulations.:  55%|█████▍    | 2739/5000 [00:15<00:14, 152.01it/s]Running 5000 simulations.:  55%|█████▌    | 2755/5000 [00:15<00:14, 152.28it/s]Running 5000 simulations.:  55%|█████▌    | 2771/5000 [00:16<00:14, 150.64it/s]Running 5000 simulations.:  56%|█████▌    | 2787/5000 [00:16<00:14, 150.98it/s]Running 5000 simulations.:  56%|█████▌    | 2803/5000 [00:16<00:14, 151.75it/s]Running 5000 simulations.:  56%|█████▋    | 2819/5000 [00:16<00:14, 151.98it/s]Running 5000 simulations.:  57%|█████▋    | 2835/5000 [00:16<00:14, 151.61it/s]Running 5000 simulations.:  57%|█████▋    | 2851/5000 [00:16<00:14, 151.21it/s]Running 5000 simulations.:  57%|█████▋    | 2867/5000 [00:16<00:14, 149.94it/s]Running 5000 simulations.:  58%|█████▊    | 2882/5000 [00:16<00:14, 149.68it/s]Running 5000 simulations.:  58%|█████▊    | 2898/5000 [00:16<00:13, 150.30it/s]Running 5000 simulations.:  58%|█████▊    | 2914/5000 [00:16<00:13, 150.37it/s]Running 5000 simulations.:  59%|█████▊    | 2930/5000 [00:17<00:13, 150.11it/s]Running 5000 simulations.:  59%|█████▉    | 2946/5000 [00:17<00:13, 148.87it/s]Running 5000 simulations.:  59%|█████▉    | 2961/5000 [00:17<00:13, 149.01it/s]Running 5000 simulations.:  60%|█████▉    | 2977/5000 [00:17<00:13, 149.35it/s]Running 5000 simulations.:  60%|█████▉    | 2992/5000 [00:17<00:13, 149.22it/s]Running 5000 simulations.:  60%|██████    | 3007/5000 [00:17<00:13, 149.06it/s]Running 5000 simulations.:  60%|██████    | 3023/5000 [00:17<00:13, 149.56it/s]Running 5000 simulations.:  61%|██████    | 3039/5000 [00:17<00:13, 149.79it/s]Running 5000 simulations.:  61%|██████    | 3054/5000 [00:17<00:13, 149.55it/s]Running 5000 simulations.:  61%|██████▏   | 3070/5000 [00:18<00:12, 149.74it/s]Running 5000 simulations.:  62%|██████▏   | 3086/5000 [00:18<00:12, 149.90it/s]Running 5000 simulations.:  62%|██████▏   | 3102/5000 [00:18<00:12, 150.36it/s]Running 5000 simulations.:  62%|██████▏   | 3118/5000 [00:18<00:12, 150.49it/s]Running 5000 simulations.:  63%|██████▎   | 3134/5000 [00:18<00:12, 150.54it/s]Running 5000 simulations.:  63%|██████▎   | 3150/5000 [00:18<00:12, 150.90it/s]Running 5000 simulations.:  63%|██████▎   | 3166/5000 [00:18<00:12, 151.31it/s]Running 5000 simulations.:  64%|██████▎   | 3182/5000 [00:18<00:12, 151.07it/s]Running 5000 simulations.:  64%|██████▍   | 3198/5000 [00:18<00:11, 151.19it/s]Running 5000 simulations.:  64%|██████▍   | 3214/5000 [00:18<00:11, 151.09it/s]Running 5000 simulations.:  65%|██████▍   | 3230/5000 [00:19<00:11, 147.76it/s]Running 5000 simulations.:  65%|██████▍   | 3245/5000 [00:19<00:11, 148.07it/s]Running 5000 simulations.:  65%|██████▌   | 3261/5000 [00:19<00:11, 148.72it/s]Running 5000 simulations.:  66%|██████▌   | 3277/5000 [00:19<00:11, 149.41it/s]Running 5000 simulations.:  66%|██████▌   | 3292/5000 [00:19<00:11, 149.54it/s]Running 5000 simulations.:  66%|██████▌   | 3308/5000 [00:19<00:11, 149.98it/s]Running 5000 simulations.:  66%|██████▋   | 3324/5000 [00:19<00:11, 150.52it/s]Running 5000 simulations.:  67%|██████▋   | 3340/5000 [00:19<00:11, 150.62it/s]Running 5000 simulations.:  67%|██████▋   | 3356/5000 [00:19<00:10, 150.78it/s]Running 5000 simulations.:  67%|██████▋   | 3372/5000 [00:20<00:10, 150.33it/s]Running 5000 simulations.:  68%|██████▊   | 3388/5000 [00:20<00:10, 150.17it/s]Running 5000 simulations.:  68%|██████▊   | 3404/5000 [00:20<00:10, 150.33it/s]Running 5000 simulations.:  68%|██████▊   | 3420/5000 [00:20<00:10, 150.44it/s]Running 5000 simulations.:  69%|██████▊   | 3436/5000 [00:20<00:10, 150.53it/s]Running 5000 simulations.:  69%|██████▉   | 3452/5000 [00:20<00:10, 150.91it/s]Running 5000 simulations.:  69%|██████▉   | 3468/5000 [00:20<00:10, 151.27it/s]Running 5000 simulations.:  70%|██████▉   | 3484/5000 [00:20<00:10, 151.02it/s]Running 5000 simulations.:  70%|███████   | 3500/5000 [00:20<00:09, 150.98it/s]Running 5000 simulations.:  70%|███████   | 3516/5000 [00:20<00:09, 151.65it/s]Running 5000 simulations.:  71%|███████   | 3532/5000 [00:21<00:09, 152.07it/s]Running 5000 simulations.:  71%|███████   | 3548/5000 [00:21<00:09, 151.59it/s]Running 5000 simulations.:  71%|███████▏  | 3564/5000 [00:21<00:09, 152.10it/s]Running 5000 simulations.:  72%|███████▏  | 3580/5000 [00:21<00:09, 151.62it/s]Running 5000 simulations.:  72%|███████▏  | 3596/5000 [00:21<00:09, 149.01it/s]Running 5000 simulations.:  72%|███████▏  | 3611/5000 [00:21<00:09, 149.30it/s]Running 5000 simulations.:  73%|███████▎  | 3627/5000 [00:21<00:09, 149.84it/s]Running 5000 simulations.:  73%|███████▎  | 3643/5000 [00:21<00:09, 150.34it/s]Running 5000 simulations.:  73%|███████▎  | 3659/5000 [00:21<00:08, 150.67it/s]Running 5000 simulations.:  74%|███████▎  | 3675/5000 [00:22<00:08, 150.30it/s]Running 5000 simulations.:  74%|███████▍  | 3691/5000 [00:22<00:08, 149.42it/s]Running 5000 simulations.:  74%|███████▍  | 3706/5000 [00:22<00:08, 146.24it/s]Running 5000 simulations.:  74%|███████▍  | 3721/5000 [00:22<00:08, 143.66it/s]Running 5000 simulations.:  75%|███████▍  | 3736/5000 [00:22<00:08, 141.39it/s]Running 5000 simulations.:  75%|███████▌  | 3751/5000 [00:22<00:08, 140.30it/s]Running 5000 simulations.:  75%|███████▌  | 3766/5000 [00:22<00:08, 140.04it/s]Running 5000 simulations.:  76%|███████▌  | 3781/5000 [00:22<00:08, 139.97it/s]Running 5000 simulations.:  76%|███████▌  | 3796/5000 [00:22<00:08, 139.79it/s]Running 5000 simulations.:  76%|███████▌  | 3810/5000 [00:23<00:08, 139.49it/s]Running 5000 simulations.:  76%|███████▋  | 3825/5000 [00:23<00:08, 139.74it/s]Running 5000 simulations.:  77%|███████▋  | 3839/5000 [00:23<00:08, 139.44it/s]Running 5000 simulations.:  77%|███████▋  | 3854/5000 [00:23<00:08, 139.86it/s]Running 5000 simulations.:  77%|███████▋  | 3869/5000 [00:23<00:08, 140.02it/s]Running 5000 simulations.:  78%|███████▊  | 3884/5000 [00:23<00:07, 139.65it/s]Running 5000 simulations.:  78%|███████▊  | 3898/5000 [00:23<00:07, 139.28it/s]Running 5000 simulations.:  78%|███████▊  | 3912/5000 [00:23<00:07, 139.27it/s]Running 5000 simulations.:  79%|███████▊  | 3927/5000 [00:23<00:07, 139.66it/s]Running 5000 simulations.:  79%|███████▉  | 3942/5000 [00:23<00:07, 139.94it/s]Running 5000 simulations.:  79%|███████▉  | 3956/5000 [00:24<00:07, 138.76it/s]Running 5000 simulations.:  79%|███████▉  | 3970/5000 [00:24<00:07, 138.92it/s]Running 5000 simulations.:  80%|███████▉  | 3984/5000 [00:24<00:07, 138.98it/s]Running 5000 simulations.:  80%|███████▉  | 3998/5000 [00:24<00:07, 137.07it/s]Running 5000 simulations.:  80%|████████  | 4012/5000 [00:24<00:07, 137.84it/s]Running 5000 simulations.:  81%|████████  | 4026/5000 [00:24<00:07, 138.22it/s]Running 5000 simulations.:  81%|████████  | 4041/5000 [00:24<00:06, 139.09it/s]Running 5000 simulations.:  81%|████████  | 4055/5000 [00:24<00:06, 138.82it/s]Running 5000 simulations.:  81%|████████▏ | 4069/5000 [00:24<00:06, 138.74it/s]Running 5000 simulations.:  82%|████████▏ | 4084/5000 [00:24<00:06, 139.17it/s]Running 5000 simulations.:  82%|████████▏ | 4099/5000 [00:25<00:06, 139.56it/s]Running 5000 simulations.:  82%|████████▏ | 4113/5000 [00:25<00:06, 139.40it/s]Running 5000 simulations.:  83%|████████▎ | 4127/5000 [00:25<00:06, 139.20it/s]Running 5000 simulations.:  83%|████████▎ | 4142/5000 [00:25<00:06, 141.62it/s]Running 5000 simulations.:  83%|████████▎ | 4157/5000 [00:25<00:05, 143.41it/s]Running 5000 simulations.:  83%|████████▎ | 4172/5000 [00:25<00:05, 145.10it/s]Running 5000 simulations.:  84%|████████▎ | 4187/5000 [00:25<00:05, 146.27it/s]Running 5000 simulations.:  84%|████████▍ | 4202/5000 [00:25<00:05, 147.27it/s]Running 5000 simulations.:  84%|████████▍ | 4217/5000 [00:25<00:05, 147.77it/s]Running 5000 simulations.:  85%|████████▍ | 4232/5000 [00:25<00:05, 148.23it/s]Running 5000 simulations.:  85%|████████▍ | 4247/5000 [00:26<00:05, 148.36it/s]Running 5000 simulations.:  85%|████████▌ | 4262/5000 [00:26<00:04, 148.27it/s]Running 5000 simulations.:  86%|████████▌ | 4277/5000 [00:26<00:04, 148.27it/s]Running 5000 simulations.:  86%|████████▌ | 4292/5000 [00:26<00:04, 148.31it/s]Running 5000 simulations.:  86%|████████▌ | 4307/5000 [00:26<00:04, 148.41it/s]Running 5000 simulations.:  86%|████████▋ | 4323/5000 [00:26<00:04, 148.89it/s]Running 5000 simulations.:  87%|████████▋ | 4338/5000 [00:26<00:04, 148.97it/s]Running 5000 simulations.:  87%|████████▋ | 4353/5000 [00:26<00:04, 148.28it/s]Running 5000 simulations.:  87%|████████▋ | 4368/5000 [00:26<00:04, 148.52it/s]Running 5000 simulations.:  88%|████████▊ | 4383/5000 [00:27<00:04, 148.40it/s]Running 5000 simulations.:  88%|████████▊ | 4398/5000 [00:27<00:04, 148.78it/s]Running 5000 simulations.:  88%|████████▊ | 4413/5000 [00:27<00:04, 142.43it/s]Running 5000 simulations.:  89%|████████▊ | 4428/5000 [00:27<00:04, 142.68it/s]Running 5000 simulations.:  89%|████████▉ | 4444/5000 [00:27<00:03, 144.98it/s]Running 5000 simulations.:  89%|████████▉ | 4459/5000 [00:27<00:03, 145.98it/s]Running 5000 simulations.:  89%|████████▉ | 4474/5000 [00:27<00:03, 146.67it/s]Running 5000 simulations.:  90%|████████▉ | 4489/5000 [00:27<00:03, 147.60it/s]Running 5000 simulations.:  90%|█████████ | 4504/5000 [00:27<00:03, 147.78it/s]Running 5000 simulations.:  90%|█████████ | 4520/5000 [00:27<00:03, 148.70it/s]Running 5000 simulations.:  91%|█████████ | 4535/5000 [00:28<00:03, 148.33it/s]Running 5000 simulations.:  91%|█████████ | 4550/5000 [00:28<00:03, 148.36it/s]Running 5000 simulations.:  91%|█████████▏| 4565/5000 [00:28<00:02, 147.88it/s]Running 5000 simulations.:  92%|█████████▏| 4580/5000 [00:28<00:02, 147.85it/s]Running 5000 simulations.:  92%|█████████▏| 4596/5000 [00:28<00:02, 148.75it/s]Running 5000 simulations.:  92%|█████████▏| 4611/5000 [00:28<00:02, 148.73it/s]Running 5000 simulations.:  93%|█████████▎| 4626/5000 [00:28<00:02, 148.06it/s]Running 5000 simulations.:  93%|█████████▎| 4641/5000 [00:28<00:02, 147.61it/s]Running 5000 simulations.:  93%|█████████▎| 4657/5000 [00:28<00:02, 148.58it/s]Running 5000 simulations.:  93%|█████████▎| 4672/5000 [00:28<00:02, 148.69it/s]Running 5000 simulations.:  94%|█████████▎| 4687/5000 [00:29<00:02, 148.88it/s]Running 5000 simulations.:  94%|█████████▍| 4703/5000 [00:29<00:01, 149.27it/s]Running 5000 simulations.:  94%|█████████▍| 4718/5000 [00:29<00:01, 148.60it/s]Running 5000 simulations.:  95%|█████████▍| 4733/5000 [00:29<00:01, 148.99it/s]Running 5000 simulations.:  95%|█████████▍| 4748/5000 [00:29<00:01, 149.17it/s]Running 5000 simulations.:  95%|█████████▌| 4763/5000 [00:29<00:01, 149.22it/s]Running 5000 simulations.:  96%|█████████▌| 4778/5000 [00:29<00:01, 148.67it/s]Running 5000 simulations.:  96%|█████████▌| 4793/5000 [00:29<00:01, 148.21it/s]Running 5000 simulations.:  96%|█████████▌| 4808/5000 [00:29<00:01, 148.07it/s]Running 5000 simulations.:  96%|█████████▋| 4823/5000 [00:29<00:01, 146.93it/s]Running 5000 simulations.:  97%|█████████▋| 4838/5000 [00:30<00:01, 146.59it/s]Running 5000 simulations.:  97%|█████████▋| 4853/5000 [00:30<00:00, 147.05it/s]Running 5000 simulations.:  97%|█████████▋| 4868/5000 [00:30<00:00, 147.15it/s]Running 5000 simulations.:  98%|█████████▊| 4883/5000 [00:30<00:00, 145.44it/s]Running 5000 simulations.:  98%|█████████▊| 4898/5000 [00:30<00:00, 144.31it/s]Running 5000 simulations.:  98%|█████████▊| 4913/5000 [00:30<00:00, 144.38it/s]Running 5000 simulations.:  99%|█████████▊| 4928/5000 [00:30<00:00, 144.33it/s]Running 5000 simulations.:  99%|█████████▉| 4943/5000 [00:30<00:00, 144.02it/s]Running 5000 simulations.:  99%|█████████▉| 4958/5000 [00:30<00:00, 143.48it/s]Running 5000 simulations.:  99%|█████████▉| 4973/5000 [00:31<00:00, 144.29it/s]Running 5000 simulations.: 100%|█████████▉| 4988/5000 [00:31<00:00, 144.59it/s]Running 5000 simulations.: 100%|██████████| 5000/5000 [00:31<00:00, 160.17it/s]
Running 5000 simulations.:   0%|          | 0/5000 [00:00<?, ?it/s]Running 5000 simulations.:   0%|          | 14/5000 [00:00<00:36, 137.13it/s]Running 5000 simulations.:   1%|          | 28/5000 [00:00<00:36, 137.55it/s]Running 5000 simulations.:   1%|          | 43/5000 [00:00<00:35, 138.43it/s]Running 5000 simulations.:   1%|          | 58/5000 [00:00<00:35, 139.84it/s]Running 5000 simulations.:   1%|▏         | 73/5000 [00:00<00:34, 140.80it/s]Running 5000 simulations.:   2%|▏         | 87/5000 [00:00<00:35, 140.18it/s]Running 5000 simulations.:   2%|▏         | 101/5000 [00:00<00:35, 138.89it/s]Running 5000 simulations.:   2%|▏         | 115/5000 [00:00<00:35, 138.29it/s]Running 5000 simulations.:   3%|▎         | 129/5000 [00:00<00:35, 136.76it/s]Running 5000 simulations.:   3%|▎         | 143/5000 [00:01<00:35, 135.88it/s]Running 5000 simulations.:   3%|▎         | 157/5000 [00:01<00:35, 135.22it/s]Running 5000 simulations.:   3%|▎         | 171/5000 [00:01<00:35, 134.89it/s]Running 5000 simulations.:   4%|▎         | 185/5000 [00:01<00:35, 134.66it/s]Running 5000 simulations.:   4%|▍         | 199/5000 [00:01<00:35, 134.59it/s]Running 5000 simulations.:   4%|▍         | 213/5000 [00:01<00:35, 134.39it/s]Running 5000 simulations.:   5%|▍         | 228/5000 [00:01<00:34, 137.51it/s]Running 5000 simulations.:   5%|▍         | 243/5000 [00:01<00:33, 140.48it/s]Running 5000 simulations.:   5%|▌         | 258/5000 [00:01<00:33, 142.22it/s]Running 5000 simulations.:   5%|▌         | 273/5000 [00:01<00:32, 143.49it/s]Running 5000 simulations.:   6%|▌         | 288/5000 [00:02<00:32, 143.79it/s]Running 5000 simulations.:   6%|▌         | 303/5000 [00:02<00:32, 144.10it/s]Running 5000 simulations.:   6%|▋         | 318/5000 [00:02<00:32, 144.89it/s]Running 5000 simulations.:   7%|▋         | 333/5000 [00:02<00:32, 145.28it/s]Running 5000 simulations.:   7%|▋         | 348/5000 [00:02<00:31, 145.88it/s]Running 5000 simulations.:   7%|▋         | 363/5000 [00:02<00:31, 145.97it/s]Running 5000 simulations.:   8%|▊         | 378/5000 [00:02<00:31, 145.67it/s]Running 5000 simulations.:   8%|▊         | 393/5000 [00:02<00:31, 145.31it/s]Running 5000 simulations.:   8%|▊         | 408/5000 [00:02<00:31, 145.21it/s]Running 5000 simulations.:   8%|▊         | 423/5000 [00:02<00:31, 144.89it/s]Running 5000 simulations.:   9%|▉         | 438/5000 [00:03<00:31, 144.96it/s]Running 5000 simulations.:   9%|▉         | 453/5000 [00:03<00:31, 144.58it/s]Running 5000 simulations.:   9%|▉         | 468/5000 [00:03<00:31, 144.45it/s]Running 5000 simulations.:  10%|▉         | 483/5000 [00:03<00:31, 143.89it/s]Running 5000 simulations.:  10%|▉         | 498/5000 [00:03<00:31, 143.99it/s]Running 5000 simulations.:  10%|█         | 513/5000 [00:03<00:31, 143.97it/s]Running 5000 simulations.:  11%|█         | 528/5000 [00:03<00:30, 144.41it/s]Running 5000 simulations.:  11%|█         | 543/5000 [00:03<00:30, 144.63it/s]Running 5000 simulations.:  11%|█         | 558/5000 [00:03<00:30, 145.22it/s]Running 5000 simulations.:  11%|█▏        | 573/5000 [00:04<00:30, 144.79it/s]Running 5000 simulations.:  12%|█▏        | 588/5000 [00:04<00:30, 143.27it/s]Running 5000 simulations.:  12%|█▏        | 603/5000 [00:04<00:30, 142.71it/s]Running 5000 simulations.:  12%|█▏        | 618/5000 [00:04<00:30, 143.18it/s]Running 5000 simulations.:  13%|█▎        | 633/5000 [00:04<00:30, 143.24it/s]Running 5000 simulations.:  13%|█▎        | 648/5000 [00:04<00:30, 143.23it/s]Running 5000 simulations.:  13%|█▎        | 663/5000 [00:04<00:30, 143.52it/s]Running 5000 simulations.:  14%|█▎        | 678/5000 [00:04<00:30, 143.42it/s]Running 5000 simulations.:  14%|█▍        | 693/5000 [00:04<00:30, 143.26it/s]Running 5000 simulations.:  14%|█▍        | 708/5000 [00:04<00:30, 143.03it/s]Running 5000 simulations.:  14%|█▍        | 723/5000 [00:05<00:29, 143.74it/s]Running 5000 simulations.:  15%|█▍        | 738/5000 [00:05<00:29, 144.28it/s]Running 5000 simulations.:  15%|█▌        | 753/5000 [00:05<00:29, 144.22it/s]Running 5000 simulations.:  15%|█▌        | 768/5000 [00:05<00:29, 143.49it/s]Running 5000 simulations.:  16%|█▌        | 783/5000 [00:05<00:29, 143.58it/s]Running 5000 simulations.:  16%|█▌        | 798/5000 [00:05<00:29, 143.10it/s]Running 5000 simulations.:  16%|█▋        | 813/5000 [00:05<00:29, 142.88it/s]Running 5000 simulations.:  17%|█▋        | 828/5000 [00:05<00:29, 143.12it/s]Running 5000 simulations.:  17%|█▋        | 843/5000 [00:05<00:29, 142.91it/s]Running 5000 simulations.:  17%|█▋        | 858/5000 [00:06<00:29, 142.51it/s]Running 5000 simulations.:  17%|█▋        | 873/5000 [00:06<00:28, 142.73it/s]Running 5000 simulations.:  18%|█▊        | 888/5000 [00:06<00:28, 143.10it/s]Running 5000 simulations.:  18%|█▊        | 903/5000 [00:06<00:28, 143.05it/s]Running 5000 simulations.:  18%|█▊        | 918/5000 [00:06<00:28, 143.02it/s]Running 5000 simulations.:  19%|█▊        | 933/5000 [00:06<00:28, 143.06it/s]Running 5000 simulations.:  19%|█▉        | 948/5000 [00:06<00:28, 142.68it/s]Running 5000 simulations.:  19%|█▉        | 963/5000 [00:06<00:28, 142.25it/s]Running 5000 simulations.:  20%|█▉        | 978/5000 [00:06<00:28, 142.02it/s]Running 5000 simulations.:  20%|█▉        | 993/5000 [00:06<00:28, 142.05it/s]Running 5000 simulations.:  20%|██        | 1008/5000 [00:07<00:28, 142.43it/s]Running 5000 simulations.:  20%|██        | 1023/5000 [00:07<00:27, 142.58it/s]Running 5000 simulations.:  21%|██        | 1038/5000 [00:07<00:27, 143.01it/s]Running 5000 simulations.:  21%|██        | 1053/5000 [00:07<00:27, 143.25it/s]Running 5000 simulations.:  21%|██▏       | 1068/5000 [00:07<00:27, 143.57it/s]Running 5000 simulations.:  22%|██▏       | 1083/5000 [00:07<00:27, 143.67it/s]Running 5000 simulations.:  22%|██▏       | 1098/5000 [00:07<00:27, 143.22it/s]Running 5000 simulations.:  22%|██▏       | 1113/5000 [00:07<00:27, 142.68it/s]Running 5000 simulations.:  23%|██▎       | 1128/5000 [00:07<00:27, 142.69it/s]Running 5000 simulations.:  23%|██▎       | 1143/5000 [00:08<00:26, 142.87it/s]Running 5000 simulations.:  23%|██▎       | 1158/5000 [00:08<00:26, 143.16it/s]Running 5000 simulations.:  23%|██▎       | 1173/5000 [00:08<00:26, 143.19it/s]Running 5000 simulations.:  24%|██▍       | 1188/5000 [00:08<00:26, 142.43it/s]Running 5000 simulations.:  24%|██▍       | 1203/5000 [00:08<00:26, 141.51it/s]Running 5000 simulations.:  24%|██▍       | 1218/5000 [00:08<00:26, 140.74it/s]Running 5000 simulations.:  25%|██▍       | 1233/5000 [00:08<00:26, 140.42it/s]Running 5000 simulations.:  25%|██▍       | 1248/5000 [00:08<00:26, 140.38it/s]Running 5000 simulations.:  25%|██▌       | 1263/5000 [00:08<00:26, 140.43it/s]Running 5000 simulations.:  26%|██▌       | 1278/5000 [00:08<00:26, 140.29it/s]Running 5000 simulations.:  26%|██▌       | 1293/5000 [00:09<00:26, 139.44it/s]Running 5000 simulations.:  26%|██▌       | 1307/5000 [00:09<00:26, 139.10it/s]Running 5000 simulations.:  26%|██▋       | 1321/5000 [00:09<00:26, 139.01it/s]Running 5000 simulations.:  27%|██▋       | 1335/5000 [00:09<00:26, 138.90it/s]Running 5000 simulations.:  27%|██▋       | 1349/5000 [00:09<00:26, 139.00it/s]Running 5000 simulations.:  27%|██▋       | 1363/5000 [00:09<00:26, 138.54it/s]Running 5000 simulations.:  28%|██▊       | 1377/5000 [00:09<00:26, 138.52it/s]Running 5000 simulations.:  28%|██▊       | 1391/5000 [00:09<00:26, 138.33it/s]Running 5000 simulations.:  28%|██▊       | 1405/5000 [00:09<00:26, 138.09it/s]Running 5000 simulations.:  28%|██▊       | 1419/5000 [00:10<00:25, 138.03it/s]Running 5000 simulations.:  29%|██▊       | 1434/5000 [00:10<00:25, 138.80it/s]Running 5000 simulations.:  29%|██▉       | 1448/5000 [00:10<00:25, 139.05it/s]Running 5000 simulations.:  29%|██▉       | 1463/5000 [00:10<00:25, 139.48it/s]Running 5000 simulations.:  30%|██▉       | 1477/5000 [00:10<00:25, 138.85it/s]Running 5000 simulations.:  30%|██▉       | 1491/5000 [00:10<00:25, 139.02it/s]Running 5000 simulations.:  30%|███       | 1506/5000 [00:10<00:25, 139.38it/s]Running 5000 simulations.:  30%|███       | 1520/5000 [00:10<00:25, 139.18it/s]Running 5000 simulations.:  31%|███       | 1534/5000 [00:10<00:24, 139.06it/s]Running 5000 simulations.:  31%|███       | 1549/5000 [00:10<00:24, 139.81it/s]Running 5000 simulations.:  31%|███▏      | 1563/5000 [00:11<00:24, 139.26it/s]Running 5000 simulations.:  32%|███▏      | 1577/5000 [00:11<00:24, 139.41it/s]Running 5000 simulations.:  32%|███▏      | 1591/5000 [00:11<00:24, 138.65it/s]Running 5000 simulations.:  32%|███▏      | 1605/5000 [00:11<00:24, 138.00it/s]Running 5000 simulations.:  32%|███▏      | 1619/5000 [00:11<00:24, 137.98it/s]Running 5000 simulations.:  33%|███▎      | 1633/5000 [00:11<00:24, 137.84it/s]Running 5000 simulations.:  33%|███▎      | 1647/5000 [00:11<00:24, 137.96it/s]Running 5000 simulations.:  33%|███▎      | 1663/5000 [00:11<00:23, 142.41it/s]Running 5000 simulations.:  34%|███▎      | 1679/5000 [00:11<00:22, 146.58it/s]Running 5000 simulations.:  34%|███▍      | 1695/5000 [00:11<00:22, 147.48it/s]Running 5000 simulations.:  34%|███▍      | 1710/5000 [00:12<00:22, 144.23it/s]Running 5000 simulations.:  34%|███▍      | 1725/5000 [00:12<00:22, 142.53it/s]Running 5000 simulations.:  35%|███▍      | 1740/5000 [00:12<00:23, 141.52it/s]Running 5000 simulations.:  35%|███▌      | 1755/5000 [00:12<00:23, 140.26it/s]Running 5000 simulations.:  35%|███▌      | 1770/5000 [00:12<00:23, 139.88it/s]Running 5000 simulations.:  36%|███▌      | 1785/5000 [00:12<00:23, 139.30it/s]Running 5000 simulations.:  36%|███▌      | 1799/5000 [00:12<00:22, 139.19it/s]Running 5000 simulations.:  36%|███▋      | 1813/5000 [00:12<00:22, 139.32it/s]Running 5000 simulations.:  37%|███▋      | 1827/5000 [00:12<00:22, 138.91it/s]Running 5000 simulations.:  37%|███▋      | 1841/5000 [00:13<00:22, 138.50it/s]Running 5000 simulations.:  37%|███▋      | 1855/5000 [00:13<00:22, 138.07it/s]Running 5000 simulations.:  37%|███▋      | 1870/5000 [00:13<00:22, 139.03it/s]Running 5000 simulations.:  38%|███▊      | 1884/5000 [00:13<00:22, 139.14it/s]Running 5000 simulations.:  38%|███▊      | 1898/5000 [00:13<00:22, 138.69it/s]Running 5000 simulations.:  38%|███▊      | 1912/5000 [00:13<00:22, 138.49it/s]Running 5000 simulations.:  39%|███▊      | 1926/5000 [00:13<00:22, 138.46it/s]Running 5000 simulations.:  39%|███▉      | 1940/5000 [00:13<00:22, 138.22it/s]Running 5000 simulations.:  39%|███▉      | 1954/5000 [00:13<00:22, 138.29it/s]Running 5000 simulations.:  39%|███▉      | 1968/5000 [00:13<00:21, 138.37it/s]Running 5000 simulations.:  40%|███▉      | 1982/5000 [00:14<00:21, 138.34it/s]Running 5000 simulations.:  40%|███▉      | 1996/5000 [00:14<00:21, 138.39it/s]Running 5000 simulations.:  40%|████      | 2010/5000 [00:14<00:21, 138.62it/s]Running 5000 simulations.:  40%|████      | 2024/5000 [00:14<00:21, 137.45it/s]Running 5000 simulations.:  41%|████      | 2038/5000 [00:14<00:21, 136.98it/s]Running 5000 simulations.:  41%|████      | 2052/5000 [00:14<00:21, 136.95it/s]Running 5000 simulations.:  41%|████▏     | 2066/5000 [00:14<00:21, 137.54it/s]Running 5000 simulations.:  42%|████▏     | 2081/5000 [00:14<00:21, 138.29it/s]Running 5000 simulations.:  42%|████▏     | 2095/5000 [00:14<00:21, 137.77it/s]Running 5000 simulations.:  42%|████▏     | 2109/5000 [00:14<00:21, 137.45it/s]Running 5000 simulations.:  42%|████▏     | 2123/5000 [00:15<00:20, 137.81it/s]Running 5000 simulations.:  43%|████▎     | 2137/5000 [00:15<00:20, 137.80it/s]Running 5000 simulations.:  43%|████▎     | 2151/5000 [00:15<00:20, 137.85it/s]Running 5000 simulations.:  43%|████▎     | 2165/5000 [00:15<00:20, 137.39it/s]Running 5000 simulations.:  44%|████▎     | 2179/5000 [00:15<00:20, 137.15it/s]Running 5000 simulations.:  44%|████▍     | 2193/5000 [00:15<00:20, 137.21it/s]Running 5000 simulations.:  44%|████▍     | 2207/5000 [00:15<00:20, 135.86it/s]Running 5000 simulations.:  44%|████▍     | 2221/5000 [00:15<00:20, 134.40it/s]Running 5000 simulations.:  45%|████▍     | 2235/5000 [00:15<00:20, 134.17it/s]Running 5000 simulations.:  45%|████▌     | 2250/5000 [00:15<00:20, 136.26it/s]Running 5000 simulations.:  45%|████▌     | 2265/5000 [00:16<00:19, 137.97it/s]Running 5000 simulations.:  46%|████▌     | 2280/5000 [00:16<00:19, 139.32it/s]Running 5000 simulations.:  46%|████▌     | 2295/5000 [00:16<00:19, 140.23it/s]Running 5000 simulations.:  46%|████▌     | 2310/5000 [00:16<00:19, 140.99it/s]Running 5000 simulations.:  46%|████▋     | 2325/5000 [00:16<00:18, 141.68it/s]Running 5000 simulations.:  47%|████▋     | 2340/5000 [00:16<00:18, 142.21it/s]Running 5000 simulations.:  47%|████▋     | 2355/5000 [00:16<00:18, 142.46it/s]Running 5000 simulations.:  47%|████▋     | 2370/5000 [00:16<00:18, 142.59it/s]Running 5000 simulations.:  48%|████▊     | 2385/5000 [00:16<00:18, 142.82it/s]Running 5000 simulations.:  48%|████▊     | 2400/5000 [00:17<00:18, 143.08it/s]Running 5000 simulations.:  48%|████▊     | 2415/5000 [00:17<00:18, 143.23it/s]Running 5000 simulations.:  49%|████▊     | 2430/5000 [00:17<00:17, 143.49it/s]Running 5000 simulations.:  49%|████▉     | 2445/5000 [00:17<00:17, 143.47it/s]Running 5000 simulations.:  49%|████▉     | 2460/5000 [00:17<00:17, 143.27it/s]Running 5000 simulations.:  50%|████▉     | 2475/5000 [00:17<00:17, 143.45it/s]Running 5000 simulations.:  50%|████▉     | 2490/5000 [00:17<00:17, 143.24it/s]Running 5000 simulations.:  50%|█████     | 2505/5000 [00:17<00:17, 143.15it/s]Running 5000 simulations.:  50%|█████     | 2520/5000 [00:17<00:17, 143.49it/s]Running 5000 simulations.:  51%|█████     | 2535/5000 [00:17<00:17, 143.56it/s]Running 5000 simulations.:  51%|█████     | 2550/5000 [00:18<00:17, 142.98it/s]Running 5000 simulations.:  51%|█████▏    | 2565/5000 [00:18<00:16, 143.29it/s]Running 5000 simulations.:  52%|█████▏    | 2580/5000 [00:18<00:16, 143.28it/s]Running 5000 simulations.:  52%|█████▏    | 2595/5000 [00:18<00:16, 143.37it/s]Running 5000 simulations.:  52%|█████▏    | 2610/5000 [00:18<00:16, 143.43it/s]Running 5000 simulations.:  52%|█████▎    | 2625/5000 [00:18<00:16, 143.52it/s]Running 5000 simulations.:  53%|█████▎    | 2640/5000 [00:18<00:16, 143.96it/s]Running 5000 simulations.:  53%|█████▎    | 2655/5000 [00:18<00:16, 143.28it/s]Running 5000 simulations.:  53%|█████▎    | 2670/5000 [00:18<00:16, 143.14it/s]Running 5000 simulations.:  54%|█████▎    | 2685/5000 [00:19<00:16, 143.22it/s]Running 5000 simulations.:  54%|█████▍    | 2700/5000 [00:19<00:16, 143.04it/s]Running 5000 simulations.:  54%|█████▍    | 2715/5000 [00:19<00:15, 142.85it/s]Running 5000 simulations.:  55%|█████▍    | 2730/5000 [00:19<00:15, 142.74it/s]Running 5000 simulations.:  55%|█████▍    | 2745/5000 [00:19<00:15, 141.87it/s]Running 5000 simulations.:  55%|█████▌    | 2760/5000 [00:19<00:15, 142.67it/s]Running 5000 simulations.:  56%|█████▌    | 2775/5000 [00:19<00:15, 142.52it/s]Running 5000 simulations.:  56%|█████▌    | 2790/5000 [00:19<00:15, 142.33it/s]Running 5000 simulations.:  56%|█████▌    | 2805/5000 [00:19<00:15, 142.11it/s]Running 5000 simulations.:  56%|█████▋    | 2820/5000 [00:19<00:15, 142.00it/s]Running 5000 simulations.:  57%|█████▋    | 2835/5000 [00:20<00:15, 141.80it/s]Running 5000 simulations.:  57%|█████▋    | 2850/5000 [00:20<00:15, 141.99it/s]Running 5000 simulations.:  57%|█████▋    | 2865/5000 [00:20<00:15, 142.32it/s]Running 5000 simulations.:  58%|█████▊    | 2880/5000 [00:20<00:15, 140.89it/s]Running 5000 simulations.:  58%|█████▊    | 2895/5000 [00:20<00:14, 141.19it/s]Running 5000 simulations.:  58%|█████▊    | 2910/5000 [00:20<00:14, 141.37it/s]Running 5000 simulations.:  58%|█████▊    | 2925/5000 [00:20<00:14, 141.07it/s]Running 5000 simulations.:  59%|█████▉    | 2940/5000 [00:20<00:14, 141.24it/s]Running 5000 simulations.:  59%|█████▉    | 2955/5000 [00:20<00:14, 141.86it/s]Running 5000 simulations.:  59%|█████▉    | 2970/5000 [00:21<00:14, 142.02it/s]Running 5000 simulations.:  60%|█████▉    | 2985/5000 [00:21<00:14, 142.17it/s]Running 5000 simulations.:  60%|██████    | 3000/5000 [00:21<00:14, 142.28it/s]Running 5000 simulations.:  60%|██████    | 3015/5000 [00:21<00:13, 141.95it/s]Running 5000 simulations.:  61%|██████    | 3030/5000 [00:21<00:13, 141.89it/s]Running 5000 simulations.:  61%|██████    | 3045/5000 [00:21<00:13, 141.31it/s]Running 5000 simulations.:  61%|██████    | 3060/5000 [00:21<00:13, 140.12it/s]Running 5000 simulations.:  62%|██████▏   | 3075/5000 [00:21<00:14, 136.43it/s]Running 5000 simulations.:  62%|██████▏   | 3089/5000 [00:21<00:14, 134.09it/s]Running 5000 simulations.:  62%|██████▏   | 3103/5000 [00:22<00:14, 131.86it/s]Running 5000 simulations.:  62%|██████▏   | 3117/5000 [00:22<00:14, 131.28it/s]Running 5000 simulations.:  63%|██████▎   | 3131/5000 [00:22<00:14, 132.01it/s]Running 5000 simulations.:  63%|██████▎   | 3145/5000 [00:22<00:14, 132.37it/s]Running 5000 simulations.:  63%|██████▎   | 3159/5000 [00:22<00:13, 132.14it/s]Running 5000 simulations.:  63%|██████▎   | 3173/5000 [00:22<00:13, 132.49it/s]Running 5000 simulations.:  64%|██████▎   | 3187/5000 [00:22<00:13, 133.37it/s]Running 5000 simulations.:  64%|██████▍   | 3201/5000 [00:22<00:13, 134.03it/s]Running 5000 simulations.:  64%|██████▍   | 3215/5000 [00:22<00:13, 133.95it/s]Running 5000 simulations.:  65%|██████▍   | 3229/5000 [00:22<00:13, 133.95it/s]Running 5000 simulations.:  65%|██████▍   | 3243/5000 [00:23<00:13, 133.95it/s]Running 5000 simulations.:  65%|██████▌   | 3257/5000 [00:23<00:13, 133.69it/s]Running 5000 simulations.:  65%|██████▌   | 3271/5000 [00:23<00:12, 133.19it/s]Running 5000 simulations.:  66%|██████▌   | 3285/5000 [00:23<00:12, 132.37it/s]Running 5000 simulations.:  66%|██████▌   | 3299/5000 [00:23<00:13, 125.18it/s]Running 5000 simulations.:  66%|██████▌   | 3312/5000 [00:23<00:13, 126.13it/s]Running 5000 simulations.:  66%|██████▋   | 3325/5000 [00:23<00:13, 126.46it/s]Running 5000 simulations.:  67%|██████▋   | 3338/5000 [00:23<00:13, 126.49it/s]Running 5000 simulations.:  67%|██████▋   | 3351/5000 [00:23<00:13, 126.34it/s]Running 5000 simulations.:  67%|██████▋   | 3364/5000 [00:24<00:12, 126.61it/s]Running 5000 simulations.:  68%|██████▊   | 3377/5000 [00:24<00:12, 125.97it/s]Running 5000 simulations.:  68%|██████▊   | 3390/5000 [00:24<00:12, 125.71it/s]Running 5000 simulations.:  68%|██████▊   | 3403/5000 [00:24<00:12, 125.98it/s]Running 5000 simulations.:  68%|██████▊   | 3416/5000 [00:24<00:12, 126.20it/s]Running 5000 simulations.:  69%|██████▊   | 3429/5000 [00:24<00:12, 125.80it/s]Running 5000 simulations.:  69%|██████▉   | 3442/5000 [00:24<00:12, 126.00it/s]Running 5000 simulations.:  69%|██████▉   | 3455/5000 [00:24<00:12, 125.66it/s]Running 5000 simulations.:  69%|██████▉   | 3468/5000 [00:24<00:12, 125.20it/s]Running 5000 simulations.:  70%|██████▉   | 3481/5000 [00:24<00:12, 125.11it/s]Running 5000 simulations.:  70%|██████▉   | 3494/5000 [00:25<00:12, 125.16it/s]Running 5000 simulations.:  70%|███████   | 3507/5000 [00:25<00:11, 125.17it/s]Running 5000 simulations.:  70%|███████   | 3520/5000 [00:25<00:11, 125.77it/s]Running 5000 simulations.:  71%|███████   | 3533/5000 [00:25<00:11, 126.36it/s]Running 5000 simulations.:  71%|███████   | 3546/5000 [00:25<00:11, 126.55it/s]Running 5000 simulations.:  71%|███████   | 3559/5000 [00:25<00:11, 126.19it/s]Running 5000 simulations.:  71%|███████▏  | 3572/5000 [00:25<00:11, 125.94it/s]Running 5000 simulations.:  72%|███████▏  | 3585/5000 [00:25<00:11, 125.90it/s]Running 5000 simulations.:  72%|███████▏  | 3598/5000 [00:25<00:11, 125.63it/s]Running 5000 simulations.:  72%|███████▏  | 3611/5000 [00:25<00:11, 125.51it/s]Running 5000 simulations.:  72%|███████▏  | 3624/5000 [00:26<00:11, 124.98it/s]Running 5000 simulations.:  73%|███████▎  | 3637/5000 [00:26<00:10, 125.36it/s]Running 5000 simulations.:  73%|███████▎  | 3650/5000 [00:26<00:10, 125.79it/s]Running 5000 simulations.:  73%|███████▎  | 3663/5000 [00:26<00:10, 126.12it/s]Running 5000 simulations.:  74%|███████▎  | 3676/5000 [00:26<00:10, 126.48it/s]Running 5000 simulations.:  74%|███████▍  | 3689/5000 [00:26<00:10, 126.53it/s]Running 5000 simulations.:  74%|███████▍  | 3702/5000 [00:26<00:10, 126.51it/s]Running 5000 simulations.:  74%|███████▍  | 3715/5000 [00:26<00:10, 126.39it/s]Running 5000 simulations.:  75%|███████▍  | 3728/5000 [00:26<00:10, 126.30it/s]Running 5000 simulations.:  75%|███████▍  | 3741/5000 [00:27<00:09, 126.42it/s]Running 5000 simulations.:  75%|███████▌  | 3754/5000 [00:27<00:09, 126.45it/s]Running 5000 simulations.:  75%|███████▌  | 3768/5000 [00:27<00:09, 130.05it/s]Running 5000 simulations.:  76%|███████▌  | 3783/5000 [00:27<00:09, 133.57it/s]Running 5000 simulations.:  76%|███████▌  | 3798/5000 [00:27<00:08, 135.99it/s]Running 5000 simulations.:  76%|███████▋  | 3813/5000 [00:27<00:08, 137.96it/s]Running 5000 simulations.:  77%|███████▋  | 3827/5000 [00:27<00:08, 138.41it/s]Running 5000 simulations.:  77%|███████▋  | 3842/5000 [00:27<00:08, 138.99it/s]Running 5000 simulations.:  77%|███████▋  | 3856/5000 [00:27<00:08, 139.17it/s]Running 5000 simulations.:  77%|███████▋  | 3870/5000 [00:27<00:08, 139.01it/s]Running 5000 simulations.:  78%|███████▊  | 3885/5000 [00:28<00:07, 139.44it/s]Running 5000 simulations.:  78%|███████▊  | 3900/5000 [00:28<00:07, 140.14it/s]Running 5000 simulations.:  78%|███████▊  | 3915/5000 [00:28<00:07, 139.93it/s]Running 5000 simulations.:  79%|███████▊  | 3929/5000 [00:28<00:07, 139.40it/s]Running 5000 simulations.:  79%|███████▉  | 3944/5000 [00:28<00:07, 139.79it/s]Running 5000 simulations.:  79%|███████▉  | 3959/5000 [00:28<00:07, 140.46it/s]Running 5000 simulations.:  79%|███████▉  | 3974/5000 [00:28<00:07, 141.20it/s]Running 5000 simulations.:  80%|███████▉  | 3989/5000 [00:28<00:07, 141.87it/s]Running 5000 simulations.:  80%|████████  | 4004/5000 [00:28<00:07, 142.05it/s]Running 5000 simulations.:  80%|████████  | 4019/5000 [00:28<00:06, 142.72it/s]Running 5000 simulations.:  81%|████████  | 4034/5000 [00:29<00:06, 142.84it/s]Running 5000 simulations.:  81%|████████  | 4049/5000 [00:29<00:06, 142.74it/s]Running 5000 simulations.:  81%|████████▏ | 4064/5000 [00:29<00:06, 141.74it/s]Running 5000 simulations.:  82%|████████▏ | 4079/5000 [00:29<00:06, 142.41it/s]Running 5000 simulations.:  82%|████████▏ | 4094/5000 [00:29<00:06, 142.76it/s]Running 5000 simulations.:  82%|████████▏ | 4109/5000 [00:29<00:06, 142.45it/s]Running 5000 simulations.:  82%|████████▏ | 4124/5000 [00:29<00:06, 142.48it/s]Running 5000 simulations.:  83%|████████▎ | 4139/5000 [00:29<00:06, 142.44it/s]Running 5000 simulations.:  83%|████████▎ | 4154/5000 [00:29<00:05, 142.55it/s]Running 5000 simulations.:  83%|████████▎ | 4169/5000 [00:30<00:05, 142.29it/s]Running 5000 simulations.:  84%|████████▎ | 4184/5000 [00:30<00:05, 142.60it/s]Running 5000 simulations.:  84%|████████▍ | 4199/5000 [00:30<00:05, 143.21it/s]Running 5000 simulations.:  84%|████████▍ | 4214/5000 [00:30<00:05, 143.55it/s]Running 5000 simulations.:  85%|████████▍ | 4229/5000 [00:30<00:05, 143.78it/s]Running 5000 simulations.:  85%|████████▍ | 4244/5000 [00:30<00:05, 144.18it/s]Running 5000 simulations.:  85%|████████▌ | 4259/5000 [00:30<00:05, 143.56it/s]Running 5000 simulations.:  85%|████████▌ | 4274/5000 [00:30<00:05, 143.46it/s]Running 5000 simulations.:  86%|████████▌ | 4289/5000 [00:30<00:04, 143.01it/s]Running 5000 simulations.:  86%|████████▌ | 4304/5000 [00:30<00:04, 142.66it/s]Running 5000 simulations.:  86%|████████▋ | 4319/5000 [00:31<00:04, 142.21it/s]Running 5000 simulations.:  87%|████████▋ | 4334/5000 [00:31<00:04, 141.92it/s]Running 5000 simulations.:  87%|████████▋ | 4349/5000 [00:31<00:04, 142.00it/s]Running 5000 simulations.:  87%|████████▋ | 4364/5000 [00:31<00:04, 141.90it/s]Running 5000 simulations.:  88%|████████▊ | 4379/5000 [00:31<00:04, 141.93it/s]Running 5000 simulations.:  88%|████████▊ | 4394/5000 [00:31<00:04, 141.67it/s]Running 5000 simulations.:  88%|████████▊ | 4409/5000 [00:31<00:04, 141.05it/s]Running 5000 simulations.:  88%|████████▊ | 4424/5000 [00:31<00:04, 141.19it/s]Running 5000 simulations.:  89%|████████▉ | 4439/5000 [00:31<00:03, 141.51it/s]Running 5000 simulations.:  89%|████████▉ | 4454/5000 [00:32<00:03, 141.56it/s]Running 5000 simulations.:  89%|████████▉ | 4469/5000 [00:32<00:03, 141.76it/s]Running 5000 simulations.:  90%|████████▉ | 4484/5000 [00:32<00:03, 142.10it/s]Running 5000 simulations.:  90%|████████▉ | 4499/5000 [00:32<00:03, 142.13it/s]Running 5000 simulations.:  90%|█████████ | 4514/5000 [00:32<00:03, 142.30it/s]Running 5000 simulations.:  91%|█████████ | 4529/5000 [00:32<00:03, 143.05it/s]Running 5000 simulations.:  91%|█████████ | 4544/5000 [00:32<00:03, 142.96it/s]Running 5000 simulations.:  91%|█████████ | 4559/5000 [00:32<00:03, 143.20it/s]Running 5000 simulations.:  91%|█████████▏| 4574/5000 [00:32<00:02, 143.50it/s]Running 5000 simulations.:  92%|█████████▏| 4589/5000 [00:32<00:02, 143.98it/s]Running 5000 simulations.:  92%|█████████▏| 4604/5000 [00:33<00:02, 144.12it/s]Running 5000 simulations.:  92%|█████████▏| 4619/5000 [00:33<00:02, 143.59it/s]Running 5000 simulations.:  93%|█████████▎| 4634/5000 [00:33<00:02, 143.53it/s]Running 5000 simulations.:  93%|█████████▎| 4649/5000 [00:33<00:02, 143.73it/s]Running 5000 simulations.:  93%|█████████▎| 4664/5000 [00:33<00:02, 143.32it/s]Running 5000 simulations.:  94%|█████████▎| 4679/5000 [00:33<00:02, 143.54it/s]Running 5000 simulations.:  94%|█████████▍| 4694/5000 [00:33<00:02, 143.30it/s]Running 5000 simulations.:  94%|█████████▍| 4709/5000 [00:33<00:02, 143.27it/s]Running 5000 simulations.:  94%|█████████▍| 4724/5000 [00:33<00:01, 143.43it/s]Running 5000 simulations.:  95%|█████████▍| 4739/5000 [00:34<00:01, 143.41it/s]Running 5000 simulations.:  95%|█████████▌| 4754/5000 [00:34<00:01, 143.62it/s]Running 5000 simulations.:  95%|█████████▌| 4769/5000 [00:34<00:01, 143.87it/s]Running 5000 simulations.:  96%|█████████▌| 4784/5000 [00:34<00:01, 143.35it/s]Running 5000 simulations.:  96%|█████████▌| 4799/5000 [00:34<00:01, 143.15it/s]Running 5000 simulations.:  96%|█████████▋| 4814/5000 [00:34<00:01, 143.42it/s]Running 5000 simulations.:  97%|█████████▋| 4829/5000 [00:34<00:01, 143.71it/s]Running 5000 simulations.:  97%|█████████▋| 4844/5000 [00:34<00:01, 143.74it/s]Running 5000 simulations.:  97%|█████████▋| 4859/5000 [00:34<00:00, 143.70it/s]Running 5000 simulations.:  97%|█████████▋| 4874/5000 [00:34<00:00, 143.42it/s]Running 5000 simulations.:  98%|█████████▊| 4889/5000 [00:35<00:00, 143.18it/s]Running 5000 simulations.:  98%|█████████▊| 4904/5000 [00:35<00:00, 142.53it/s]Running 5000 simulations.:  98%|█████████▊| 4919/5000 [00:35<00:00, 142.40it/s]Running 5000 simulations.:  99%|█████████▊| 4934/5000 [00:35<00:00, 142.54it/s]Running 5000 simulations.:  99%|█████████▉| 4949/5000 [00:35<00:00, 142.63it/s]Running 5000 simulations.:  99%|█████████▉| 4964/5000 [00:35<00:00, 142.54it/s]Running 5000 simulations.: 100%|█████████▉| 4979/5000 [00:35<00:00, 142.29it/s]Running 5000 simulations.: 100%|█████████▉| 4994/5000 [00:35<00:00, 142.38it/s]Running 5000 simulations.: 100%|██████████| 5000/5000 [00:35<00:00, 139.43it/s]
Running 5000 simulations.:   0%|          | 0/5000 [00:00<?, ?it/s]Running 5000 simulations.:   0%|          | 16/5000 [00:00<00:33, 150.73it/s]Running 5000 simulations.:   1%|          | 32/5000 [00:00<00:32, 150.76it/s]Running 5000 simulations.:   1%|          | 48/5000 [00:00<00:32, 151.08it/s]Running 5000 simulations.:   1%|▏         | 64/5000 [00:00<00:32, 151.03it/s]Running 5000 simulations.:   2%|▏         | 79/5000 [00:00<00:32, 150.46it/s]Running 5000 simulations.:   2%|▏         | 94/5000 [00:00<00:32, 150.24it/s]Running 5000 simulations.:   2%|▏         | 110/5000 [00:00<00:32, 150.62it/s]Running 5000 simulations.:   3%|▎         | 126/5000 [00:00<00:32, 150.90it/s]Running 5000 simulations.:   3%|▎         | 142/5000 [00:00<00:32, 150.98it/s]Running 5000 simulations.:   3%|▎         | 157/5000 [00:01<00:32, 150.52it/s]Running 5000 simulations.:   3%|▎         | 172/5000 [00:01<00:32, 150.09it/s]Running 5000 simulations.:   4%|▎         | 187/5000 [00:01<00:32, 150.00it/s]Running 5000 simulations.:   4%|▍         | 202/5000 [00:01<00:32, 149.88it/s]Running 5000 simulations.:   4%|▍         | 218/5000 [00:01<00:31, 150.28it/s]Running 5000 simulations.:   5%|▍         | 233/5000 [00:01<00:31, 149.12it/s]Running 5000 simulations.:   5%|▍         | 248/5000 [00:01<00:32, 148.38it/s]Running 5000 simulations.:   5%|▌         | 263/5000 [00:01<00:31, 148.21it/s]Running 5000 simulations.:   6%|▌         | 278/5000 [00:01<00:31, 147.89it/s]Running 5000 simulations.:   6%|▌         | 293/5000 [00:01<00:31, 148.10it/s]Running 5000 simulations.:   6%|▌         | 308/5000 [00:02<00:31, 146.96it/s]Running 5000 simulations.:   6%|▋         | 323/5000 [00:02<00:32, 144.52it/s]Running 5000 simulations.:   7%|▋         | 339/5000 [00:02<00:31, 146.35it/s]Running 5000 simulations.:   7%|▋         | 355/5000 [00:02<00:31, 147.59it/s]Running 5000 simulations.:   7%|▋         | 370/5000 [00:02<00:31, 147.86it/s]Running 5000 simulations.:   8%|▊         | 385/5000 [00:02<00:31, 147.73it/s]Running 5000 simulations.:   8%|▊         | 400/5000 [00:02<00:31, 147.43it/s]Running 5000 simulations.:   8%|▊         | 415/5000 [00:02<00:31, 147.35it/s]Running 5000 simulations.:   9%|▊         | 430/5000 [00:02<00:30, 147.70it/s]Running 5000 simulations.:   9%|▉         | 445/5000 [00:02<00:30, 147.99it/s]Running 5000 simulations.:   9%|▉         | 460/5000 [00:03<00:30, 148.44it/s]Running 5000 simulations.:  10%|▉         | 475/5000 [00:03<00:30, 148.79it/s]Running 5000 simulations.:  10%|▉         | 490/5000 [00:03<00:30, 148.53it/s]Running 5000 simulations.:  10%|█         | 505/5000 [00:03<00:30, 146.24it/s]Running 5000 simulations.:  10%|█         | 520/5000 [00:03<00:30, 145.85it/s]Running 5000 simulations.:  11%|█         | 535/5000 [00:03<00:30, 144.72it/s]Running 5000 simulations.:  11%|█         | 550/5000 [00:03<00:30, 144.27it/s]Running 5000 simulations.:  11%|█▏        | 565/5000 [00:03<00:30, 143.78it/s]Running 5000 simulations.:  12%|█▏        | 580/5000 [00:03<00:30, 143.28it/s]Running 5000 simulations.:  12%|█▏        | 595/5000 [00:04<00:30, 144.04it/s]Running 5000 simulations.:  12%|█▏        | 610/5000 [00:04<00:30, 144.07it/s]Running 5000 simulations.:  12%|█▎        | 625/5000 [00:04<00:30, 144.20it/s]Running 5000 simulations.:  13%|█▎        | 640/5000 [00:04<00:30, 144.45it/s]Running 5000 simulations.:  13%|█▎        | 655/5000 [00:04<00:30, 144.04it/s]Running 5000 simulations.:  13%|█▎        | 670/5000 [00:04<00:30, 143.53it/s]Running 5000 simulations.:  14%|█▎        | 685/5000 [00:04<00:30, 143.42it/s]Running 5000 simulations.:  14%|█▍        | 700/5000 [00:04<00:29, 143.56it/s]Running 5000 simulations.:  14%|█▍        | 715/5000 [00:04<00:29, 143.75it/s]Running 5000 simulations.:  15%|█▍        | 730/5000 [00:04<00:29, 144.51it/s]Running 5000 simulations.:  15%|█▍        | 745/5000 [00:05<00:29, 144.45it/s]Running 5000 simulations.:  15%|█▌        | 760/5000 [00:05<00:29, 143.52it/s]Running 5000 simulations.:  16%|█▌        | 775/5000 [00:05<00:29, 143.13it/s]Running 5000 simulations.:  16%|█▌        | 790/5000 [00:05<00:29, 143.47it/s]Running 5000 simulations.:  16%|█▌        | 805/5000 [00:05<00:29, 143.42it/s]Running 5000 simulations.:  16%|█▋        | 820/5000 [00:05<00:29, 142.83it/s]Running 5000 simulations.:  17%|█▋        | 835/5000 [00:05<00:29, 142.84it/s]Running 5000 simulations.:  17%|█▋        | 850/5000 [00:05<00:29, 143.10it/s]Running 5000 simulations.:  17%|█▋        | 865/5000 [00:05<00:28, 143.78it/s]Running 5000 simulations.:  18%|█▊        | 880/5000 [00:06<00:28, 144.03it/s]Running 5000 simulations.:  18%|█▊        | 895/5000 [00:06<00:28, 143.97it/s]Running 5000 simulations.:  18%|█▊        | 910/5000 [00:06<00:28, 144.28it/s]Running 5000 simulations.:  18%|█▊        | 925/5000 [00:06<00:28, 144.44it/s]Running 5000 simulations.:  19%|█▉        | 940/5000 [00:06<00:28, 143.98it/s]Running 5000 simulations.:  19%|█▉        | 955/5000 [00:06<00:28, 144.45it/s]Running 5000 simulations.:  19%|█▉        | 970/5000 [00:06<00:27, 144.35it/s]Running 5000 simulations.:  20%|█▉        | 985/5000 [00:06<00:27, 143.56it/s]Running 5000 simulations.:  20%|██        | 1000/5000 [00:06<00:27, 143.21it/s]Running 5000 simulations.:  20%|██        | 1015/5000 [00:06<00:27, 142.97it/s]Running 5000 simulations.:  21%|██        | 1030/5000 [00:07<00:27, 142.89it/s]Running 5000 simulations.:  21%|██        | 1045/5000 [00:07<00:27, 143.31it/s]Running 5000 simulations.:  21%|██        | 1060/5000 [00:07<00:27, 143.27it/s]Running 5000 simulations.:  22%|██▏       | 1075/5000 [00:07<00:27, 143.29it/s]Running 5000 simulations.:  22%|██▏       | 1090/5000 [00:07<00:27, 143.19it/s]Running 5000 simulations.:  22%|██▏       | 1105/5000 [00:07<00:27, 143.03it/s]Running 5000 simulations.:  22%|██▏       | 1120/5000 [00:07<00:27, 142.89it/s]Running 5000 simulations.:  23%|██▎       | 1135/5000 [00:07<00:27, 142.69it/s]Running 5000 simulations.:  23%|██▎       | 1150/5000 [00:07<00:27, 141.76it/s]Running 5000 simulations.:  23%|██▎       | 1165/5000 [00:08<00:27, 141.98it/s]Running 5000 simulations.:  24%|██▎       | 1180/5000 [00:08<00:26, 142.67it/s]Running 5000 simulations.:  24%|██▍       | 1195/5000 [00:08<00:26, 142.62it/s]Running 5000 simulations.:  24%|██▍       | 1210/5000 [00:08<00:26, 142.49it/s]Running 5000 simulations.:  24%|██▍       | 1225/5000 [00:08<00:26, 142.53it/s]Running 5000 simulations.:  25%|██▍       | 1240/5000 [00:08<00:26, 142.81it/s]Running 5000 simulations.:  25%|██▌       | 1255/5000 [00:08<00:26, 142.81it/s]Running 5000 simulations.:  25%|██▌       | 1270/5000 [00:08<00:26, 142.89it/s]Running 5000 simulations.:  26%|██▌       | 1285/5000 [00:08<00:26, 142.84it/s]Running 5000 simulations.:  26%|██▌       | 1300/5000 [00:08<00:25, 143.08it/s]Running 5000 simulations.:  26%|██▋       | 1315/5000 [00:09<00:25, 143.72it/s]Running 5000 simulations.:  27%|██▋       | 1330/5000 [00:09<00:25, 143.99it/s]Running 5000 simulations.:  27%|██▋       | 1345/5000 [00:09<00:25, 144.27it/s]Running 5000 simulations.:  27%|██▋       | 1360/5000 [00:09<00:25, 144.44it/s]Running 5000 simulations.:  28%|██▊       | 1375/5000 [00:09<00:25, 143.89it/s]Running 5000 simulations.:  28%|██▊       | 1390/5000 [00:09<00:25, 143.79it/s]Running 5000 simulations.:  28%|██▊       | 1405/5000 [00:09<00:25, 142.92it/s]Running 5000 simulations.:  28%|██▊       | 1420/5000 [00:09<00:25, 142.75it/s]Running 5000 simulations.:  29%|██▊       | 1435/5000 [00:09<00:24, 143.14it/s]Running 5000 simulations.:  29%|██▉       | 1450/5000 [00:09<00:24, 143.52it/s]Running 5000 simulations.:  29%|██▉       | 1465/5000 [00:10<00:24, 143.39it/s]Running 5000 simulations.:  30%|██▉       | 1480/5000 [00:10<00:24, 143.24it/s]Running 5000 simulations.:  30%|██▉       | 1495/5000 [00:10<00:24, 142.83it/s]Running 5000 simulations.:  30%|███       | 1510/5000 [00:10<00:24, 141.35it/s]Running 5000 simulations.:  30%|███       | 1525/5000 [00:10<00:25, 138.25it/s]Running 5000 simulations.:  31%|███       | 1539/5000 [00:10<00:25, 136.38it/s]Running 5000 simulations.:  31%|███       | 1553/5000 [00:10<00:25, 136.44it/s]Running 5000 simulations.:  31%|███▏      | 1567/5000 [00:10<00:24, 137.40it/s]Running 5000 simulations.:  32%|███▏      | 1581/5000 [00:10<00:24, 138.06it/s]Running 5000 simulations.:  32%|███▏      | 1595/5000 [00:11<00:24, 138.07it/s]Running 5000 simulations.:  32%|███▏      | 1609/5000 [00:11<00:24, 137.06it/s]Running 5000 simulations.:  32%|███▏      | 1624/5000 [00:11<00:24, 137.94it/s]Running 5000 simulations.:  33%|███▎      | 1638/5000 [00:11<00:24, 137.51it/s]Running 5000 simulations.:  33%|███▎      | 1652/5000 [00:11<00:24, 137.09it/s]Running 5000 simulations.:  33%|███▎      | 1666/5000 [00:11<00:24, 136.97it/s]Running 5000 simulations.:  34%|███▎      | 1680/5000 [00:11<00:24, 137.46it/s]Running 5000 simulations.:  34%|███▍      | 1694/5000 [00:11<00:23, 138.07it/s]Running 5000 simulations.:  34%|███▍      | 1708/5000 [00:11<00:23, 138.11it/s]Running 5000 simulations.:  34%|███▍      | 1722/5000 [00:11<00:23, 138.41it/s]Running 5000 simulations.:  35%|███▍      | 1736/5000 [00:12<00:23, 138.07it/s]Running 5000 simulations.:  35%|███▌      | 1750/5000 [00:12<00:23, 138.50it/s]Running 5000 simulations.:  35%|███▌      | 1765/5000 [00:12<00:23, 139.23it/s]Running 5000 simulations.:  36%|███▌      | 1780/5000 [00:12<00:23, 139.70it/s]Running 5000 simulations.:  36%|███▌      | 1794/5000 [00:12<00:23, 138.76it/s]Running 5000 simulations.:  36%|███▌      | 1808/5000 [00:12<00:23, 137.89it/s]Running 5000 simulations.:  36%|███▋      | 1822/5000 [00:12<00:23, 136.54it/s]Running 5000 simulations.:  37%|███▋      | 1836/5000 [00:12<00:23, 136.55it/s]Running 5000 simulations.:  37%|███▋      | 1850/5000 [00:12<00:22, 137.50it/s]Running 5000 simulations.:  37%|███▋      | 1865/5000 [00:12<00:22, 138.45it/s]Running 5000 simulations.:  38%|███▊      | 1880/5000 [00:13<00:22, 138.98it/s]Running 5000 simulations.:  38%|███▊      | 1894/5000 [00:13<00:22, 138.68it/s]Running 5000 simulations.:  38%|███▊      | 1908/5000 [00:13<00:22, 138.40it/s]Running 5000 simulations.:  38%|███▊      | 1922/5000 [00:13<00:22, 137.30it/s]Running 5000 simulations.:  39%|███▊      | 1936/5000 [00:13<00:22, 136.55it/s]Running 5000 simulations.:  39%|███▉      | 1950/5000 [00:13<00:22, 136.93it/s]Running 5000 simulations.:  39%|███▉      | 1965/5000 [00:13<00:21, 137.97it/s]Running 5000 simulations.:  40%|███▉      | 1979/5000 [00:13<00:21, 138.36it/s]Running 5000 simulations.:  40%|███▉      | 1993/5000 [00:13<00:21, 137.82it/s]Running 5000 simulations.:  40%|████      | 2007/5000 [00:14<00:21, 137.77it/s]Running 5000 simulations.:  40%|████      | 2021/5000 [00:14<00:21, 137.13it/s]Running 5000 simulations.:  41%|████      | 2035/5000 [00:14<00:21, 137.48it/s]Running 5000 simulations.:  41%|████      | 2050/5000 [00:14<00:21, 138.29it/s]Running 5000 simulations.:  41%|████▏     | 2065/5000 [00:14<00:21, 139.10it/s]Running 5000 simulations.:  42%|████▏     | 2079/5000 [00:14<00:21, 138.84it/s]Running 5000 simulations.:  42%|████▏     | 2093/5000 [00:14<00:20, 138.51it/s]Running 5000 simulations.:  42%|████▏     | 2107/5000 [00:14<00:21, 137.58it/s]Running 5000 simulations.:  42%|████▏     | 2121/5000 [00:14<00:20, 137.96it/s]Running 5000 simulations.:  43%|████▎     | 2136/5000 [00:14<00:20, 138.87it/s]Running 5000 simulations.:  43%|████▎     | 2150/5000 [00:15<00:20, 138.96it/s]Running 5000 simulations.:  43%|████▎     | 2164/5000 [00:15<00:20, 138.56it/s]Running 5000 simulations.:  44%|████▎     | 2178/5000 [00:15<00:20, 137.94it/s]Running 5000 simulations.:  44%|████▍     | 2192/5000 [00:15<00:20, 137.44it/s]Running 5000 simulations.:  44%|████▍     | 2206/5000 [00:15<00:21, 130.75it/s]Running 5000 simulations.:  44%|████▍     | 2220/5000 [00:15<00:20, 132.74it/s]Running 5000 simulations.:  45%|████▍     | 2234/5000 [00:15<00:20, 133.63it/s]Running 5000 simulations.:  45%|████▍     | 2248/5000 [00:15<00:20, 134.07it/s]Running 5000 simulations.:  45%|████▌     | 2262/5000 [00:15<00:20, 134.18it/s]Running 5000 simulations.:  46%|████▌     | 2276/5000 [00:15<00:20, 134.70it/s]Running 5000 simulations.:  46%|████▌     | 2290/5000 [00:16<00:19, 135.82it/s]Running 5000 simulations.:  46%|████▌     | 2304/5000 [00:16<00:19, 136.14it/s]Running 5000 simulations.:  46%|████▋     | 2318/5000 [00:16<00:19, 136.17it/s]Running 5000 simulations.:  47%|████▋     | 2332/5000 [00:16<00:19, 136.51it/s]Running 5000 simulations.:  47%|████▋     | 2347/5000 [00:16<00:19, 137.89it/s]Running 5000 simulations.:  47%|████▋     | 2362/5000 [00:16<00:19, 138.68it/s]Running 5000 simulations.:  48%|████▊     | 2377/5000 [00:16<00:18, 139.30it/s]Running 5000 simulations.:  48%|████▊     | 2392/5000 [00:16<00:18, 140.39it/s]Running 5000 simulations.:  48%|████▊     | 2408/5000 [00:16<00:17, 144.00it/s]Running 5000 simulations.:  48%|████▊     | 2424/5000 [00:17<00:17, 146.71it/s]Running 5000 simulations.:  49%|████▉     | 2440/5000 [00:17<00:17, 148.03it/s]Running 5000 simulations.:  49%|████▉     | 2455/5000 [00:17<00:17, 146.20it/s]Running 5000 simulations.:  49%|████▉     | 2470/5000 [00:17<00:17, 144.27it/s]Running 5000 simulations.:  50%|████▉     | 2485/5000 [00:17<00:17, 143.56it/s]Running 5000 simulations.:  50%|█████     | 2500/5000 [00:17<00:17, 142.21it/s]Running 5000 simulations.:  50%|█████     | 2515/5000 [00:17<00:17, 140.74it/s]Running 5000 simulations.:  51%|█████     | 2530/5000 [00:17<00:17, 140.66it/s]Running 5000 simulations.:  51%|█████     | 2545/5000 [00:17<00:17, 140.60it/s]Running 5000 simulations.:  51%|█████     | 2560/5000 [00:18<00:17, 140.97it/s]Running 5000 simulations.:  52%|█████▏    | 2575/5000 [00:18<00:17, 140.23it/s]Running 5000 simulations.:  52%|█████▏    | 2590/5000 [00:18<00:17, 139.20it/s]Running 5000 simulations.:  52%|█████▏    | 2604/5000 [00:18<00:17, 138.03it/s]Running 5000 simulations.:  52%|█████▏    | 2618/5000 [00:18<00:17, 138.15it/s]Running 5000 simulations.:  53%|█████▎    | 2633/5000 [00:18<00:16, 139.25it/s]Running 5000 simulations.:  53%|█████▎    | 2648/5000 [00:18<00:16, 140.20it/s]Running 5000 simulations.:  53%|█████▎    | 2663/5000 [00:18<00:16, 140.86it/s]Running 5000 simulations.:  54%|█████▎    | 2678/5000 [00:18<00:16, 140.53it/s]Running 5000 simulations.:  54%|█████▍    | 2693/5000 [00:18<00:16, 140.26it/s]Running 5000 simulations.:  54%|█████▍    | 2708/5000 [00:19<00:16, 140.40it/s]Running 5000 simulations.:  54%|█████▍    | 2723/5000 [00:19<00:16, 140.29it/s]Running 5000 simulations.:  55%|█████▍    | 2738/5000 [00:19<00:16, 139.95it/s]Running 5000 simulations.:  55%|█████▌    | 2753/5000 [00:19<00:16, 139.99it/s]Running 5000 simulations.:  55%|█████▌    | 2767/5000 [00:19<00:16, 139.12it/s]Running 5000 simulations.:  56%|█████▌    | 2781/5000 [00:19<00:16, 138.27it/s]Running 5000 simulations.:  56%|█████▌    | 2795/5000 [00:19<00:16, 137.30it/s]Running 5000 simulations.:  56%|█████▌    | 2809/5000 [00:19<00:15, 137.55it/s]Running 5000 simulations.:  56%|█████▋    | 2823/5000 [00:19<00:15, 138.27it/s]Running 5000 simulations.:  57%|█████▋    | 2838/5000 [00:19<00:15, 139.08it/s]Running 5000 simulations.:  57%|█████▋    | 2852/5000 [00:20<00:15, 138.72it/s]Running 5000 simulations.:  57%|█████▋    | 2866/5000 [00:20<00:15, 137.65it/s]Running 5000 simulations.:  58%|█████▊    | 2880/5000 [00:20<00:15, 137.73it/s]Running 5000 simulations.:  58%|█████▊    | 2894/5000 [00:20<00:15, 137.72it/s]Running 5000 simulations.:  58%|█████▊    | 2908/5000 [00:20<00:15, 138.06it/s]Running 5000 simulations.:  58%|█████▊    | 2922/5000 [00:20<00:14, 138.55it/s]Running 5000 simulations.:  59%|█████▊    | 2936/5000 [00:20<00:14, 138.05it/s]Running 5000 simulations.:  59%|█████▉    | 2950/5000 [00:20<00:14, 137.58it/s]Running 5000 simulations.:  59%|█████▉    | 2964/5000 [00:20<00:14, 137.20it/s]Running 5000 simulations.:  60%|█████▉    | 2978/5000 [00:21<00:14, 136.88it/s]Running 5000 simulations.:  60%|█████▉    | 2992/5000 [00:21<00:14, 136.95it/s]Running 5000 simulations.:  60%|██████    | 3007/5000 [00:21<00:14, 138.20it/s]Running 5000 simulations.:  60%|██████    | 3021/5000 [00:21<00:14, 138.06it/s]Running 5000 simulations.:  61%|██████    | 3035/5000 [00:21<00:14, 137.17it/s]Running 5000 simulations.:  61%|██████    | 3049/5000 [00:21<00:14, 137.35it/s]Running 5000 simulations.:  61%|██████▏   | 3063/5000 [00:21<00:14, 136.48it/s]Running 5000 simulations.:  62%|██████▏   | 3077/5000 [00:21<00:14, 137.07it/s]Running 5000 simulations.:  62%|██████▏   | 3092/5000 [00:21<00:13, 138.26it/s]Running 5000 simulations.:  62%|██████▏   | 3107/5000 [00:21<00:13, 139.18it/s]Running 5000 simulations.:  62%|██████▏   | 3121/5000 [00:22<00:13, 139.42it/s]Running 5000 simulations.:  63%|██████▎   | 3136/5000 [00:22<00:13, 139.92it/s]Running 5000 simulations.:  63%|██████▎   | 3151/5000 [00:22<00:13, 140.33it/s]Running 5000 simulations.:  63%|██████▎   | 3166/5000 [00:22<00:13, 140.68it/s]Running 5000 simulations.:  64%|██████▎   | 3181/5000 [00:22<00:12, 140.57it/s]Running 5000 simulations.:  64%|██████▍   | 3196/5000 [00:22<00:12, 141.26it/s]Running 5000 simulations.:  64%|██████▍   | 3211/5000 [00:22<00:12, 141.53it/s]Running 5000 simulations.:  65%|██████▍   | 3226/5000 [00:22<00:12, 141.37it/s]Running 5000 simulations.:  65%|██████▍   | 3241/5000 [00:22<00:12, 140.12it/s]Running 5000 simulations.:  65%|██████▌   | 3256/5000 [00:23<00:12, 134.55it/s]Running 5000 simulations.:  65%|██████▌   | 3270/5000 [00:23<00:13, 130.54it/s]Running 5000 simulations.:  66%|██████▌   | 3284/5000 [00:23<00:13, 127.86it/s]Running 5000 simulations.:  66%|██████▌   | 3297/5000 [00:23<00:13, 127.06it/s]Running 5000 simulations.:  66%|██████▌   | 3310/5000 [00:23<00:13, 126.85it/s]Running 5000 simulations.:  66%|██████▋   | 3323/5000 [00:23<00:13, 126.55it/s]Running 5000 simulations.:  67%|██████▋   | 3336/5000 [00:23<00:13, 126.33it/s]Running 5000 simulations.:  67%|██████▋   | 3349/5000 [00:23<00:13, 126.59it/s]Running 5000 simulations.:  67%|██████▋   | 3362/5000 [00:23<00:12, 126.81it/s]Running 5000 simulations.:  68%|██████▊   | 3375/5000 [00:23<00:12, 126.66it/s]Running 5000 simulations.:  68%|██████▊   | 3388/5000 [00:24<00:12, 126.51it/s]Running 5000 simulations.:  68%|██████▊   | 3401/5000 [00:24<00:12, 126.69it/s]Running 5000 simulations.:  68%|██████▊   | 3414/5000 [00:24<00:12, 126.71it/s]Running 5000 simulations.:  69%|██████▊   | 3427/5000 [00:24<00:12, 126.58it/s]Running 5000 simulations.:  69%|██████▉   | 3440/5000 [00:24<00:12, 126.67it/s]Running 5000 simulations.:  69%|██████▉   | 3453/5000 [00:24<00:12, 127.06it/s]Running 5000 simulations.:  69%|██████▉   | 3466/5000 [00:24<00:12, 127.54it/s]Running 5000 simulations.:  70%|██████▉   | 3479/5000 [00:24<00:11, 127.26it/s]Running 5000 simulations.:  70%|██████▉   | 3492/5000 [00:24<00:11, 126.86it/s]Running 5000 simulations.:  70%|███████   | 3505/5000 [00:25<00:11, 126.61it/s]Running 5000 simulations.:  70%|███████   | 3518/5000 [00:25<00:11, 126.80it/s]Running 5000 simulations.:  71%|███████   | 3531/5000 [00:25<00:11, 126.40it/s]Running 5000 simulations.:  71%|███████   | 3544/5000 [00:25<00:11, 126.50it/s]Running 5000 simulations.:  71%|███████   | 3557/5000 [00:25<00:11, 126.75it/s]Running 5000 simulations.:  71%|███████▏  | 3570/5000 [00:25<00:11, 127.09it/s]Running 5000 simulations.:  72%|███████▏  | 3583/5000 [00:25<00:11, 126.75it/s]Running 5000 simulations.:  72%|███████▏  | 3596/5000 [00:25<00:11, 126.45it/s]Running 5000 simulations.:  72%|███████▏  | 3609/5000 [00:25<00:10, 126.50it/s]Running 5000 simulations.:  72%|███████▏  | 3622/5000 [00:25<00:10, 126.39it/s]Running 5000 simulations.:  73%|███████▎  | 3635/5000 [00:26<00:10, 126.79it/s]Running 5000 simulations.:  73%|███████▎  | 3648/5000 [00:26<00:10, 126.26it/s]Running 5000 simulations.:  73%|███████▎  | 3662/5000 [00:26<00:10, 127.80it/s]Running 5000 simulations.:  74%|███████▎  | 3676/5000 [00:26<00:10, 130.77it/s]Running 5000 simulations.:  74%|███████▍  | 3690/5000 [00:26<00:09, 132.36it/s]Running 5000 simulations.:  74%|███████▍  | 3704/5000 [00:26<00:09, 133.60it/s]Running 5000 simulations.:  74%|███████▍  | 3718/5000 [00:26<00:09, 133.65it/s]Running 5000 simulations.:  75%|███████▍  | 3732/5000 [00:26<00:09, 134.13it/s]Running 5000 simulations.:  75%|███████▍  | 3746/5000 [00:26<00:09, 134.75it/s]Running 5000 simulations.:  75%|███████▌  | 3760/5000 [00:26<00:09, 135.53it/s]Running 5000 simulations.:  75%|███████▌  | 3774/5000 [00:27<00:09, 136.01it/s]Running 5000 simulations.:  76%|███████▌  | 3788/5000 [00:27<00:08, 135.52it/s]Running 5000 simulations.:  76%|███████▌  | 3802/5000 [00:27<00:08, 135.79it/s]Running 5000 simulations.:  76%|███████▋  | 3816/5000 [00:27<00:08, 136.21it/s]Running 5000 simulations.:  77%|███████▋  | 3830/5000 [00:27<00:08, 136.11it/s]Running 5000 simulations.:  77%|███████▋  | 3844/5000 [00:27<00:08, 135.59it/s]Running 5000 simulations.:  77%|███████▋  | 3858/5000 [00:27<00:08, 136.01it/s]Running 5000 simulations.:  77%|███████▋  | 3872/5000 [00:27<00:08, 135.99it/s]Running 5000 simulations.:  78%|███████▊  | 3886/5000 [00:27<00:08, 135.91it/s]Running 5000 simulations.:  78%|███████▊  | 3900/5000 [00:27<00:08, 136.12it/s]Running 5000 simulations.:  78%|███████▊  | 3914/5000 [00:28<00:07, 136.09it/s]Running 5000 simulations.:  79%|███████▊  | 3928/5000 [00:28<00:07, 135.88it/s]Running 5000 simulations.:  79%|███████▉  | 3942/5000 [00:28<00:07, 136.15it/s]Running 5000 simulations.:  79%|███████▉  | 3956/5000 [00:28<00:07, 136.49it/s]Running 5000 simulations.:  79%|███████▉  | 3970/5000 [00:28<00:07, 136.19it/s]Running 5000 simulations.:  80%|███████▉  | 3984/5000 [00:28<00:07, 136.41it/s]Running 5000 simulations.:  80%|███████▉  | 3998/5000 [00:28<00:07, 135.54it/s]Running 5000 simulations.:  80%|████████  | 4012/5000 [00:28<00:07, 135.72it/s]Running 5000 simulations.:  81%|████████  | 4026/5000 [00:28<00:07, 136.30it/s]Running 5000 simulations.:  81%|████████  | 4040/5000 [00:29<00:07, 136.79it/s]Running 5000 simulations.:  81%|████████  | 4054/5000 [00:29<00:06, 136.85it/s]Running 5000 simulations.:  81%|████████▏ | 4068/5000 [00:29<00:06, 135.52it/s]Running 5000 simulations.:  82%|████████▏ | 4082/5000 [00:29<00:06, 135.68it/s]Running 5000 simulations.:  82%|████████▏ | 4096/5000 [00:29<00:06, 136.06it/s]Running 5000 simulations.:  82%|████████▏ | 4110/5000 [00:29<00:06, 136.27it/s]Running 5000 simulations.:  82%|████████▏ | 4124/5000 [00:29<00:06, 135.98it/s]Running 5000 simulations.:  83%|████████▎ | 4138/5000 [00:29<00:06, 136.02it/s]Running 5000 simulations.:  83%|████████▎ | 4152/5000 [00:29<00:06, 136.13it/s]Running 5000 simulations.:  83%|████████▎ | 4166/5000 [00:29<00:06, 136.16it/s]Running 5000 simulations.:  84%|████████▎ | 4180/5000 [00:30<00:06, 136.07it/s]Running 5000 simulations.:  84%|████████▍ | 4194/5000 [00:30<00:05, 135.61it/s]Running 5000 simulations.:  84%|████████▍ | 4208/5000 [00:30<00:05, 136.08it/s]Running 5000 simulations.:  84%|████████▍ | 4222/5000 [00:30<00:05, 136.29it/s]Running 5000 simulations.:  85%|████████▍ | 4236/5000 [00:30<00:05, 137.11it/s]Running 5000 simulations.:  85%|████████▌ | 4250/5000 [00:30<00:05, 136.34it/s]Running 5000 simulations.:  85%|████████▌ | 4264/5000 [00:30<00:05, 135.72it/s]Running 5000 simulations.:  86%|████████▌ | 4278/5000 [00:30<00:05, 135.92it/s]Running 5000 simulations.:  86%|████████▌ | 4292/5000 [00:30<00:05, 136.19it/s]Running 5000 simulations.:  86%|████████▌ | 4306/5000 [00:30<00:05, 136.76it/s]Running 5000 simulations.:  86%|████████▋ | 4320/5000 [00:31<00:04, 137.10it/s]Running 5000 simulations.:  87%|████████▋ | 4334/5000 [00:31<00:04, 137.11it/s]Running 5000 simulations.:  87%|████████▋ | 4348/5000 [00:31<00:04, 136.87it/s]Running 5000 simulations.:  87%|████████▋ | 4362/5000 [00:31<00:04, 136.73it/s]Running 5000 simulations.:  88%|████████▊ | 4376/5000 [00:31<00:04, 136.44it/s]Running 5000 simulations.:  88%|████████▊ | 4390/5000 [00:31<00:04, 136.67it/s]Running 5000 simulations.:  88%|████████▊ | 4404/5000 [00:31<00:04, 137.32it/s]Running 5000 simulations.:  88%|████████▊ | 4418/5000 [00:31<00:04, 137.43it/s]Running 5000 simulations.:  89%|████████▊ | 4432/5000 [00:31<00:04, 137.16it/s]Running 5000 simulations.:  89%|████████▉ | 4446/5000 [00:31<00:04, 136.26it/s]Running 5000 simulations.:  89%|████████▉ | 4460/5000 [00:32<00:03, 135.08it/s]Running 5000 simulations.:  89%|████████▉ | 4474/5000 [00:32<00:03, 134.88it/s]Running 5000 simulations.:  90%|████████▉ | 4488/5000 [00:32<00:03, 135.95it/s]Running 5000 simulations.:  90%|█████████ | 4502/5000 [00:32<00:03, 136.41it/s]Running 5000 simulations.:  90%|█████████ | 4516/5000 [00:32<00:03, 136.90it/s]Running 5000 simulations.:  91%|█████████ | 4530/5000 [00:32<00:03, 136.89it/s]Running 5000 simulations.:  91%|█████████ | 4544/5000 [00:32<00:03, 137.15it/s]Running 5000 simulations.:  91%|█████████ | 4558/5000 [00:32<00:03, 136.78it/s]Running 5000 simulations.:  91%|█████████▏| 4572/5000 [00:32<00:03, 137.47it/s]Running 5000 simulations.:  92%|█████████▏| 4586/5000 [00:33<00:03, 137.24it/s]Running 5000 simulations.:  92%|█████████▏| 4600/5000 [00:33<00:02, 136.20it/s]Running 5000 simulations.:  92%|█████████▏| 4614/5000 [00:33<00:02, 135.32it/s]Running 5000 simulations.:  93%|█████████▎| 4628/5000 [00:33<00:02, 134.96it/s]Running 5000 simulations.:  93%|█████████▎| 4642/5000 [00:33<00:02, 135.70it/s]Running 5000 simulations.:  93%|█████████▎| 4656/5000 [00:33<00:02, 136.65it/s]Running 5000 simulations.:  93%|█████████▎| 4670/5000 [00:33<00:02, 137.33it/s]Running 5000 simulations.:  94%|█████████▎| 4684/5000 [00:33<00:02, 137.24it/s]Running 5000 simulations.:  94%|█████████▍| 4698/5000 [00:33<00:02, 137.15it/s]Running 5000 simulations.:  94%|█████████▍| 4712/5000 [00:33<00:02, 137.09it/s]Running 5000 simulations.:  95%|█████████▍| 4726/5000 [00:34<00:01, 137.39it/s]Running 5000 simulations.:  95%|█████████▍| 4740/5000 [00:34<00:01, 137.85it/s]Running 5000 simulations.:  95%|█████████▌| 4754/5000 [00:34<00:01, 137.60it/s]Running 5000 simulations.:  95%|█████████▌| 4768/5000 [00:34<00:01, 138.14it/s]Running 5000 simulations.:  96%|█████████▌| 4782/5000 [00:34<00:01, 137.85it/s]Running 5000 simulations.:  96%|█████████▌| 4796/5000 [00:34<00:01, 137.08it/s]Running 5000 simulations.:  96%|█████████▌| 4810/5000 [00:34<00:01, 137.30it/s]Running 5000 simulations.:  96%|█████████▋| 4824/5000 [00:34<00:01, 137.58it/s]Running 5000 simulations.:  97%|█████████▋| 4838/5000 [00:34<00:01, 137.60it/s]Running 5000 simulations.:  97%|█████████▋| 4852/5000 [00:34<00:01, 137.61it/s]Running 5000 simulations.:  97%|█████████▋| 4866/5000 [00:35<00:00, 137.57it/s]Running 5000 simulations.:  98%|█████████▊| 4880/5000 [00:35<00:00, 137.08it/s]Running 5000 simulations.:  98%|█████████▊| 4894/5000 [00:35<00:00, 136.23it/s]Running 5000 simulations.:  98%|█████████▊| 4908/5000 [00:35<00:00, 136.45it/s]Running 5000 simulations.:  98%|█████████▊| 4922/5000 [00:35<00:00, 137.15it/s]Running 5000 simulations.:  99%|█████████▊| 4936/5000 [00:35<00:00, 137.51it/s]Running 5000 simulations.:  99%|█████████▉| 4950/5000 [00:35<00:00, 137.52it/s]Running 5000 simulations.:  99%|█████████▉| 4964/5000 [00:35<00:00, 137.83it/s]Running 5000 simulations.: 100%|█████████▉| 4978/5000 [00:35<00:00, 137.14it/s]Running 5000 simulations.: 100%|█████████▉| 4992/5000 [00:35<00:00, 136.92it/s]Running 5000 simulations.: 100%|██████████| 5000/5000 [00:36<00:00, 138.75it/s]
Running 5000 simulations.:   0%|          | 0/5000 [00:00<?, ?it/s]Running 5000 simulations.:   0%|          | 17/5000 [00:00<00:30, 162.20it/s]Running 5000 simulations.:   1%|          | 32/5000 [00:00<00:31, 157.09it/s]Running 5000 simulations.:   1%|          | 47/5000 [00:00<00:32, 152.59it/s]Running 5000 simulations.:   1%|          | 62/5000 [00:00<00:32, 149.75it/s]Running 5000 simulations.:   2%|▏         | 77/5000 [00:00<00:33, 148.61it/s]Running 5000 simulations.:   2%|▏         | 92/5000 [00:00<00:33, 147.34it/s]Running 5000 simulations.:   2%|▏         | 106/5000 [00:00<00:33, 144.85it/s]Running 5000 simulations.:   2%|▏         | 120/5000 [00:00<00:34, 142.86it/s]Running 5000 simulations.:   3%|▎         | 135/5000 [00:00<00:33, 143.29it/s]Running 5000 simulations.:   3%|▎         | 150/5000 [00:01<00:33, 143.49it/s]Running 5000 simulations.:   3%|▎         | 165/5000 [00:01<00:33, 143.52it/s]Running 5000 simulations.:   4%|▎         | 180/5000 [00:01<00:33, 144.72it/s]Running 5000 simulations.:   4%|▍         | 195/5000 [00:01<00:33, 144.59it/s]Running 5000 simulations.:   4%|▍         | 210/5000 [00:01<00:33, 143.94it/s]Running 5000 simulations.:   4%|▍         | 225/5000 [00:01<00:33, 143.35it/s]Running 5000 simulations.:   5%|▍         | 240/5000 [00:01<00:33, 142.34it/s]Running 5000 simulations.:   5%|▌         | 255/5000 [00:01<00:33, 139.91it/s]Running 5000 simulations.:   5%|▌         | 270/5000 [00:01<00:33, 140.05it/s]Running 5000 simulations.:   6%|▌         | 285/5000 [00:01<00:33, 140.80it/s]Running 5000 simulations.:   6%|▌         | 300/5000 [00:02<00:33, 140.70it/s]Running 5000 simulations.:   6%|▋         | 315/5000 [00:02<00:33, 141.10it/s]Running 5000 simulations.:   7%|▋         | 330/5000 [00:02<00:33, 141.36it/s]Running 5000 simulations.:   7%|▋         | 345/5000 [00:02<00:32, 141.96it/s]Running 5000 simulations.:   7%|▋         | 360/5000 [00:02<00:32, 142.83it/s]Running 5000 simulations.:   8%|▊         | 375/5000 [00:02<00:32, 143.46it/s]Running 5000 simulations.:   8%|▊         | 390/5000 [00:02<00:32, 143.26it/s]Running 5000 simulations.:   8%|▊         | 405/5000 [00:02<00:31, 144.32it/s]Running 5000 simulations.:   8%|▊         | 420/5000 [00:02<00:31, 144.73it/s]Running 5000 simulations.:   9%|▊         | 435/5000 [00:03<00:31, 144.88it/s]Running 5000 simulations.:   9%|▉         | 450/5000 [00:03<00:31, 144.69it/s]Running 5000 simulations.:   9%|▉         | 465/5000 [00:03<00:31, 144.38it/s]Running 5000 simulations.:  10%|▉         | 480/5000 [00:03<00:31, 144.36it/s]Running 5000 simulations.:  10%|▉         | 495/5000 [00:03<00:31, 144.22it/s]Running 5000 simulations.:  10%|█         | 510/5000 [00:03<00:31, 143.56it/s]Running 5000 simulations.:  10%|█         | 525/5000 [00:03<00:31, 142.11it/s]Running 5000 simulations.:  11%|█         | 540/5000 [00:03<00:31, 141.77it/s]Running 5000 simulations.:  11%|█         | 555/5000 [00:03<00:31, 142.17it/s]Running 5000 simulations.:  11%|█▏        | 570/5000 [00:03<00:31, 142.81it/s]Running 5000 simulations.:  12%|█▏        | 585/5000 [00:04<00:30, 144.00it/s]Running 5000 simulations.:  12%|█▏        | 600/5000 [00:04<00:30, 143.81it/s]Running 5000 simulations.:  12%|█▏        | 615/5000 [00:04<00:30, 143.95it/s]Running 5000 simulations.:  13%|█▎        | 630/5000 [00:04<00:30, 143.46it/s]Running 5000 simulations.:  13%|█▎        | 645/5000 [00:04<00:30, 142.00it/s]Running 5000 simulations.:  13%|█▎        | 660/5000 [00:04<00:31, 139.38it/s]Running 5000 simulations.:  13%|█▎        | 674/5000 [00:04<00:31, 139.28it/s]Running 5000 simulations.:  14%|█▍        | 689/5000 [00:04<00:30, 139.97it/s]Running 5000 simulations.:  14%|█▍        | 704/5000 [00:04<00:30, 140.96it/s]Running 5000 simulations.:  14%|█▍        | 719/5000 [00:05<00:30, 142.47it/s]Running 5000 simulations.:  15%|█▍        | 734/5000 [00:05<00:29, 143.62it/s]Running 5000 simulations.:  15%|█▍        | 749/5000 [00:05<00:29, 142.47it/s]Running 5000 simulations.:  15%|█▌        | 764/5000 [00:05<00:29, 142.17it/s]Running 5000 simulations.:  16%|█▌        | 779/5000 [00:05<00:29, 141.31it/s]Running 5000 simulations.:  16%|█▌        | 794/5000 [00:05<00:30, 139.93it/s]Running 5000 simulations.:  16%|█▌        | 809/5000 [00:05<00:29, 140.02it/s]Running 5000 simulations.:  16%|█▋        | 824/5000 [00:05<00:29, 140.57it/s]Running 5000 simulations.:  17%|█▋        | 839/5000 [00:05<00:29, 140.46it/s]Running 5000 simulations.:  17%|█▋        | 854/5000 [00:05<00:29, 141.56it/s]Running 5000 simulations.:  17%|█▋        | 869/5000 [00:06<00:29, 141.77it/s]Running 5000 simulations.:  18%|█▊        | 884/5000 [00:06<00:29, 141.52it/s]Running 5000 simulations.:  18%|█▊        | 899/5000 [00:06<00:28, 141.59it/s]Running 5000 simulations.:  18%|█▊        | 914/5000 [00:06<00:30, 133.89it/s]Running 5000 simulations.:  19%|█▊        | 929/5000 [00:06<00:29, 136.41it/s]Running 5000 simulations.:  19%|█▉        | 944/5000 [00:06<00:29, 137.89it/s]Running 5000 simulations.:  19%|█▉        | 959/5000 [00:06<00:29, 139.23it/s]Running 5000 simulations.:  19%|█▉        | 974/5000 [00:06<00:28, 140.23it/s]Running 5000 simulations.:  20%|█▉        | 989/5000 [00:06<00:28, 141.25it/s]Running 5000 simulations.:  20%|██        | 1004/5000 [00:07<00:28, 141.45it/s]Running 5000 simulations.:  20%|██        | 1019/5000 [00:07<00:28, 141.00it/s]Running 5000 simulations.:  21%|██        | 1034/5000 [00:07<00:27, 141.78it/s]Running 5000 simulations.:  21%|██        | 1049/5000 [00:07<00:27, 142.31it/s]Running 5000 simulations.:  21%|██▏       | 1064/5000 [00:07<00:27, 142.66it/s]Running 5000 simulations.:  22%|██▏       | 1079/5000 [00:07<00:27, 142.82it/s]Running 5000 simulations.:  22%|██▏       | 1094/5000 [00:07<00:27, 141.24it/s]Running 5000 simulations.:  22%|██▏       | 1109/5000 [00:07<00:27, 140.75it/s]Running 5000 simulations.:  22%|██▏       | 1124/5000 [00:07<00:27, 141.17it/s]Running 5000 simulations.:  23%|██▎       | 1139/5000 [00:08<00:27, 142.30it/s]Running 5000 simulations.:  23%|██▎       | 1154/5000 [00:08<00:26, 142.75it/s]Running 5000 simulations.:  23%|██▎       | 1169/5000 [00:08<00:26, 143.40it/s]Running 5000 simulations.:  24%|██▎       | 1184/5000 [00:08<00:26, 143.28it/s]Running 5000 simulations.:  24%|██▍       | 1199/5000 [00:08<00:26, 142.98it/s]Running 5000 simulations.:  24%|██▍       | 1214/5000 [00:08<00:26, 142.20it/s]Running 5000 simulations.:  25%|██▍       | 1229/5000 [00:08<00:26, 141.34it/s]Running 5000 simulations.:  25%|██▍       | 1244/5000 [00:08<00:26, 139.77it/s]Running 5000 simulations.:  25%|██▌       | 1258/5000 [00:08<00:26, 139.61it/s]Running 5000 simulations.:  25%|██▌       | 1273/5000 [00:08<00:26, 140.55it/s]Running 5000 simulations.:  26%|██▌       | 1288/5000 [00:09<00:26, 141.36it/s]Running 5000 simulations.:  26%|██▌       | 1303/5000 [00:09<00:26, 141.54it/s]Running 5000 simulations.:  26%|██▋       | 1318/5000 [00:09<00:25, 142.22it/s]Running 5000 simulations.:  27%|██▋       | 1333/5000 [00:09<00:25, 142.30it/s]Running 5000 simulations.:  27%|██▋       | 1348/5000 [00:09<00:25, 142.05it/s]Running 5000 simulations.:  27%|██▋       | 1363/5000 [00:09<00:25, 142.66it/s]Running 5000 simulations.:  28%|██▊       | 1378/5000 [00:09<00:25, 142.60it/s]Running 5000 simulations.:  28%|██▊       | 1393/5000 [00:09<00:25, 141.58it/s]Running 5000 simulations.:  28%|██▊       | 1408/5000 [00:09<00:25, 141.52it/s]Running 5000 simulations.:  28%|██▊       | 1423/5000 [00:10<00:25, 141.52it/s]Running 5000 simulations.:  29%|██▉       | 1438/5000 [00:10<00:25, 141.66it/s]Running 5000 simulations.:  29%|██▉       | 1453/5000 [00:10<00:24, 142.40it/s]Running 5000 simulations.:  29%|██▉       | 1468/5000 [00:10<00:24, 142.37it/s]Running 5000 simulations.:  30%|██▉       | 1483/5000 [00:10<00:24, 141.65it/s]Running 5000 simulations.:  30%|██▉       | 1498/5000 [00:10<00:24, 142.05it/s]Running 5000 simulations.:  30%|███       | 1513/5000 [00:10<00:24, 140.41it/s]Running 5000 simulations.:  31%|███       | 1528/5000 [00:10<00:24, 140.88it/s]Running 5000 simulations.:  31%|███       | 1543/5000 [00:10<00:24, 141.27it/s]Running 5000 simulations.:  31%|███       | 1558/5000 [00:10<00:24, 141.82it/s]Running 5000 simulations.:  31%|███▏      | 1573/5000 [00:11<00:24, 142.25it/s]Running 5000 simulations.:  32%|███▏      | 1588/5000 [00:11<00:23, 142.38it/s]Running 5000 simulations.:  32%|███▏      | 1603/5000 [00:11<00:23, 142.22it/s]Running 5000 simulations.:  32%|███▏      | 1618/5000 [00:11<00:23, 141.90it/s]Running 5000 simulations.:  33%|███▎      | 1633/5000 [00:11<00:23, 142.09it/s]Running 5000 simulations.:  33%|███▎      | 1648/5000 [00:11<00:23, 141.57it/s]Running 5000 simulations.:  33%|███▎      | 1663/5000 [00:11<00:23, 141.71it/s]Running 5000 simulations.:  34%|███▎      | 1678/5000 [00:11<00:23, 142.50it/s]Running 5000 simulations.:  34%|███▍      | 1693/5000 [00:11<00:23, 143.11it/s]Running 5000 simulations.:  34%|███▍      | 1708/5000 [00:12<00:23, 142.79it/s]Running 5000 simulations.:  34%|███▍      | 1723/5000 [00:12<00:22, 143.39it/s]Running 5000 simulations.:  35%|███▍      | 1738/5000 [00:12<00:22, 143.32it/s]Running 5000 simulations.:  35%|███▌      | 1753/5000 [00:12<00:22, 143.80it/s]Running 5000 simulations.:  35%|███▌      | 1768/5000 [00:12<00:22, 145.03it/s]Running 5000 simulations.:  36%|███▌      | 1783/5000 [00:12<00:22, 143.69it/s]Running 5000 simulations.:  36%|███▌      | 1798/5000 [00:12<00:22, 143.48it/s]Running 5000 simulations.:  36%|███▋      | 1813/5000 [00:12<00:22, 143.36it/s]Running 5000 simulations.:  37%|███▋      | 1828/5000 [00:12<00:22, 143.39it/s]Running 5000 simulations.:  37%|███▋      | 1843/5000 [00:12<00:22, 143.33it/s]Running 5000 simulations.:  37%|███▋      | 1858/5000 [00:13<00:22, 142.01it/s]Running 5000 simulations.:  37%|███▋      | 1873/5000 [00:13<00:22, 141.61it/s]Running 5000 simulations.:  38%|███▊      | 1888/5000 [00:13<00:21, 142.19it/s]Running 5000 simulations.:  38%|███▊      | 1903/5000 [00:13<00:21, 142.70it/s]Running 5000 simulations.:  38%|███▊      | 1918/5000 [00:13<00:21, 142.97it/s]Running 5000 simulations.:  39%|███▊      | 1933/5000 [00:13<00:21, 143.07it/s]Running 5000 simulations.:  39%|███▉      | 1948/5000 [00:13<00:21, 143.47it/s]Running 5000 simulations.:  39%|███▉      | 1963/5000 [00:13<00:21, 143.70it/s]Running 5000 simulations.:  40%|███▉      | 1978/5000 [00:13<00:20, 143.98it/s]Running 5000 simulations.:  40%|███▉      | 1993/5000 [00:14<00:20, 143.35it/s]Running 5000 simulations.:  40%|████      | 2008/5000 [00:14<00:20, 143.76it/s]Running 5000 simulations.:  40%|████      | 2023/5000 [00:14<00:20, 143.73it/s]Running 5000 simulations.:  41%|████      | 2038/5000 [00:14<00:20, 143.65it/s]Running 5000 simulations.:  41%|████      | 2053/5000 [00:14<00:20, 143.27it/s]Running 5000 simulations.:  41%|████▏     | 2068/5000 [00:14<00:20, 143.75it/s]Running 5000 simulations.:  42%|████▏     | 2083/5000 [00:14<00:20, 143.82it/s]Running 5000 simulations.:  42%|████▏     | 2098/5000 [00:14<00:20, 143.68it/s]Running 5000 simulations.:  42%|████▏     | 2113/5000 [00:14<00:20, 143.01it/s]Running 5000 simulations.:  43%|████▎     | 2128/5000 [00:14<00:20, 142.71it/s]Running 5000 simulations.:  43%|████▎     | 2143/5000 [00:15<00:19, 143.01it/s]Running 5000 simulations.:  43%|████▎     | 2158/5000 [00:15<00:19, 142.72it/s]Running 5000 simulations.:  43%|████▎     | 2173/5000 [00:15<00:19, 142.81it/s]Running 5000 simulations.:  44%|████▍     | 2188/5000 [00:15<00:19, 142.82it/s]Running 5000 simulations.:  44%|████▍     | 2203/5000 [00:15<00:19, 143.04it/s]Running 5000 simulations.:  44%|████▍     | 2218/5000 [00:15<00:19, 143.90it/s]Running 5000 simulations.:  45%|████▍     | 2233/5000 [00:15<00:19, 144.68it/s]Running 5000 simulations.:  45%|████▍     | 2248/5000 [00:15<00:19, 144.72it/s]Running 5000 simulations.:  45%|████▌     | 2263/5000 [00:15<00:18, 144.07it/s]Running 5000 simulations.:  46%|████▌     | 2278/5000 [00:15<00:18, 143.49it/s]Running 5000 simulations.:  46%|████▌     | 2293/5000 [00:16<00:18, 143.76it/s]Running 5000 simulations.:  46%|████▌     | 2308/5000 [00:16<00:18, 143.33it/s]Running 5000 simulations.:  46%|████▋     | 2323/5000 [00:16<00:18, 143.39it/s]Running 5000 simulations.:  47%|████▋     | 2338/5000 [00:16<00:18, 143.79it/s]Running 5000 simulations.:  47%|████▋     | 2353/5000 [00:16<00:18, 143.88it/s]Running 5000 simulations.:  47%|████▋     | 2368/5000 [00:16<00:18, 144.08it/s]Running 5000 simulations.:  48%|████▊     | 2383/5000 [00:16<00:18, 144.63it/s]Running 5000 simulations.:  48%|████▊     | 2398/5000 [00:16<00:18, 144.27it/s]Running 5000 simulations.:  48%|████▊     | 2413/5000 [00:16<00:17, 144.36it/s]Running 5000 simulations.:  49%|████▊     | 2428/5000 [00:17<00:17, 143.77it/s]Running 5000 simulations.:  49%|████▉     | 2443/5000 [00:17<00:17, 142.93it/s]Running 5000 simulations.:  49%|████▉     | 2458/5000 [00:17<00:17, 142.37it/s]Running 5000 simulations.:  49%|████▉     | 2473/5000 [00:17<00:17, 142.48it/s]Running 5000 simulations.:  50%|████▉     | 2488/5000 [00:17<00:17, 143.09it/s]Running 5000 simulations.:  50%|█████     | 2503/5000 [00:17<00:17, 143.42it/s]Running 5000 simulations.:  50%|█████     | 2518/5000 [00:17<00:17, 144.09it/s]Running 5000 simulations.:  51%|█████     | 2533/5000 [00:17<00:17, 143.63it/s]Running 5000 simulations.:  51%|█████     | 2548/5000 [00:17<00:17, 143.63it/s]Running 5000 simulations.:  51%|█████▏    | 2563/5000 [00:17<00:16, 143.55it/s]Running 5000 simulations.:  52%|█████▏    | 2578/5000 [00:18<00:16, 142.75it/s]Running 5000 simulations.:  52%|█████▏    | 2593/5000 [00:18<00:16, 142.78it/s]Running 5000 simulations.:  52%|█████▏    | 2608/5000 [00:18<00:16, 143.25it/s]Running 5000 simulations.:  52%|█████▏    | 2623/5000 [00:18<00:16, 143.45it/s]Running 5000 simulations.:  53%|█████▎    | 2638/5000 [00:18<00:16, 144.28it/s]Running 5000 simulations.:  53%|█████▎    | 2653/5000 [00:18<00:16, 144.49it/s]Running 5000 simulations.:  53%|█████▎    | 2668/5000 [00:18<00:16, 144.26it/s]Running 5000 simulations.:  54%|█████▎    | 2683/5000 [00:18<00:16, 143.53it/s]Running 5000 simulations.:  54%|█████▍    | 2698/5000 [00:18<00:16, 143.61it/s]Running 5000 simulations.:  54%|█████▍    | 2713/5000 [00:19<00:15, 142.98it/s]Running 5000 simulations.:  55%|█████▍    | 2728/5000 [00:19<00:15, 142.72it/s]Running 5000 simulations.:  55%|█████▍    | 2743/5000 [00:19<00:15, 143.34it/s]Running 5000 simulations.:  55%|█████▌    | 2758/5000 [00:19<00:15, 143.50it/s]Running 5000 simulations.:  55%|█████▌    | 2773/5000 [00:19<00:15, 144.05it/s]Running 5000 simulations.:  56%|█████▌    | 2788/5000 [00:19<00:15, 144.27it/s]Running 5000 simulations.:  56%|█████▌    | 2803/5000 [00:19<00:15, 144.65it/s]Running 5000 simulations.:  56%|█████▋    | 2818/5000 [00:19<00:15, 144.17it/s]Running 5000 simulations.:  57%|█████▋    | 2833/5000 [00:19<00:14, 144.51it/s]Running 5000 simulations.:  57%|█████▋    | 2848/5000 [00:19<00:14, 143.83it/s]Running 5000 simulations.:  57%|█████▋    | 2863/5000 [00:20<00:14, 143.16it/s]Running 5000 simulations.:  58%|█████▊    | 2878/5000 [00:20<00:14, 142.84it/s]Running 5000 simulations.:  58%|█████▊    | 2893/5000 [00:20<00:15, 140.34it/s]Running 5000 simulations.:  58%|█████▊    | 2908/5000 [00:20<00:15, 137.87it/s]Running 5000 simulations.:  58%|█████▊    | 2922/5000 [00:20<00:15, 137.96it/s]Running 5000 simulations.:  59%|█████▊    | 2936/5000 [00:20<00:15, 137.46it/s]Running 5000 simulations.:  59%|█████▉    | 2950/5000 [00:20<00:15, 135.91it/s]Running 5000 simulations.:  59%|█████▉    | 2964/5000 [00:20<00:14, 135.76it/s]Running 5000 simulations.:  60%|█████▉    | 2978/5000 [00:20<00:15, 133.84it/s]Running 5000 simulations.:  60%|█████▉    | 2992/5000 [00:21<00:15, 131.31it/s]Running 5000 simulations.:  60%|██████    | 3006/5000 [00:21<00:15, 130.92it/s]Running 5000 simulations.:  60%|██████    | 3020/5000 [00:21<00:15, 131.84it/s]Running 5000 simulations.:  61%|██████    | 3034/5000 [00:21<00:14, 132.41it/s]Running 5000 simulations.:  61%|██████    | 3048/5000 [00:21<00:14, 133.38it/s]Running 5000 simulations.:  61%|██████    | 3062/5000 [00:21<00:14, 134.17it/s]Running 5000 simulations.:  62%|██████▏   | 3076/5000 [00:21<00:14, 134.07it/s]Running 5000 simulations.:  62%|██████▏   | 3090/5000 [00:21<00:14, 133.07it/s]Running 5000 simulations.:  62%|██████▏   | 3104/5000 [00:21<00:14, 132.40it/s]Running 5000 simulations.:  62%|██████▏   | 3118/5000 [00:21<00:14, 131.09it/s]Running 5000 simulations.:  63%|██████▎   | 3132/5000 [00:22<00:14, 131.67it/s]Running 5000 simulations.:  63%|██████▎   | 3147/5000 [00:22<00:13, 135.04it/s]Running 5000 simulations.:  63%|██████▎   | 3162/5000 [00:22<00:13, 137.23it/s]Running 5000 simulations.:  64%|██████▎   | 3177/5000 [00:22<00:13, 138.57it/s]Running 5000 simulations.:  64%|██████▍   | 3192/5000 [00:22<00:12, 139.28it/s]Running 5000 simulations.:  64%|██████▍   | 3207/5000 [00:22<00:12, 139.77it/s]Running 5000 simulations.:  64%|██████▍   | 3222/5000 [00:22<00:12, 140.03it/s]Running 5000 simulations.:  65%|██████▍   | 3237/5000 [00:22<00:12, 139.93it/s]Running 5000 simulations.:  65%|██████▌   | 3252/5000 [00:22<00:12, 140.61it/s]Running 5000 simulations.:  65%|██████▌   | 3267/5000 [00:23<00:12, 141.55it/s]Running 5000 simulations.:  66%|██████▌   | 3282/5000 [00:23<00:12, 141.58it/s]Running 5000 simulations.:  66%|██████▌   | 3297/5000 [00:23<00:12, 141.61it/s]Running 5000 simulations.:  66%|██████▌   | 3312/5000 [00:23<00:11, 140.96it/s]Running 5000 simulations.:  67%|██████▋   | 3327/5000 [00:23<00:11, 141.25it/s]Running 5000 simulations.:  67%|██████▋   | 3342/5000 [00:23<00:11, 141.67it/s]Running 5000 simulations.:  67%|██████▋   | 3357/5000 [00:23<00:11, 141.67it/s]Running 5000 simulations.:  67%|██████▋   | 3372/5000 [00:23<00:11, 141.88it/s]Running 5000 simulations.:  68%|██████▊   | 3387/5000 [00:23<00:11, 142.50it/s]Running 5000 simulations.:  68%|██████▊   | 3402/5000 [00:23<00:11, 142.32it/s]Running 5000 simulations.:  68%|██████▊   | 3417/5000 [00:24<00:11, 142.84it/s]Running 5000 simulations.:  69%|██████▊   | 3432/5000 [00:24<00:11, 142.24it/s]Running 5000 simulations.:  69%|██████▉   | 3447/5000 [00:24<00:10, 142.01it/s]Running 5000 simulations.:  69%|██████▉   | 3462/5000 [00:24<00:10, 141.55it/s]Running 5000 simulations.:  70%|██████▉   | 3477/5000 [00:24<00:10, 141.86it/s]Running 5000 simulations.:  70%|██████▉   | 3492/5000 [00:24<00:10, 142.12it/s]Running 5000 simulations.:  70%|███████   | 3507/5000 [00:24<00:10, 142.59it/s]Running 5000 simulations.:  70%|███████   | 3522/5000 [00:24<00:10, 142.66it/s]Running 5000 simulations.:  71%|███████   | 3537/5000 [00:24<00:10, 142.60it/s]Running 5000 simulations.:  71%|███████   | 3552/5000 [00:25<00:10, 142.69it/s]Running 5000 simulations.:  71%|███████▏  | 3567/5000 [00:25<00:10, 141.84it/s]Running 5000 simulations.:  72%|███████▏  | 3582/5000 [00:25<00:09, 141.86it/s]Running 5000 simulations.:  72%|███████▏  | 3597/5000 [00:25<00:09, 141.64it/s]Running 5000 simulations.:  72%|███████▏  | 3612/5000 [00:25<00:09, 141.49it/s]Running 5000 simulations.:  73%|███████▎  | 3627/5000 [00:25<00:09, 141.71it/s]Running 5000 simulations.:  73%|███████▎  | 3642/5000 [00:25<00:09, 142.03it/s]Running 5000 simulations.:  73%|███████▎  | 3657/5000 [00:25<00:09, 142.46it/s]Running 5000 simulations.:  73%|███████▎  | 3672/5000 [00:25<00:09, 142.47it/s]Running 5000 simulations.:  74%|███████▎  | 3687/5000 [00:25<00:09, 141.64it/s]Running 5000 simulations.:  74%|███████▍  | 3702/5000 [00:26<00:09, 140.71it/s]Running 5000 simulations.:  74%|███████▍  | 3717/5000 [00:26<00:09, 140.73it/s]Running 5000 simulations.:  75%|███████▍  | 3732/5000 [00:26<00:08, 141.14it/s]Running 5000 simulations.:  75%|███████▍  | 3747/5000 [00:26<00:08, 141.59it/s]Running 5000 simulations.:  75%|███████▌  | 3762/5000 [00:26<00:08, 141.86it/s]Running 5000 simulations.:  76%|███████▌  | 3777/5000 [00:26<00:08, 142.23it/s]Running 5000 simulations.:  76%|███████▌  | 3792/5000 [00:26<00:08, 141.78it/s]Running 5000 simulations.:  76%|███████▌  | 3807/5000 [00:26<00:08, 141.63it/s]Running 5000 simulations.:  76%|███████▋  | 3822/5000 [00:26<00:08, 140.16it/s]Running 5000 simulations.:  77%|███████▋  | 3837/5000 [00:27<00:08, 140.87it/s]Running 5000 simulations.:  77%|███████▋  | 3852/5000 [00:27<00:08, 141.43it/s]Running 5000 simulations.:  77%|███████▋  | 3867/5000 [00:27<00:07, 141.64it/s]Running 5000 simulations.:  78%|███████▊  | 3882/5000 [00:27<00:07, 141.62it/s]Running 5000 simulations.:  78%|███████▊  | 3897/5000 [00:27<00:07, 141.83it/s]Running 5000 simulations.:  78%|███████▊  | 3912/5000 [00:27<00:07, 142.35it/s]Running 5000 simulations.:  79%|███████▊  | 3927/5000 [00:27<00:07, 142.19it/s]Running 5000 simulations.:  79%|███████▉  | 3942/5000 [00:27<00:07, 141.85it/s]Running 5000 simulations.:  79%|███████▉  | 3957/5000 [00:27<00:07, 140.78it/s]Running 5000 simulations.:  79%|███████▉  | 3972/5000 [00:28<00:07, 140.87it/s]Running 5000 simulations.:  80%|███████▉  | 3987/5000 [00:28<00:07, 141.23it/s]Running 5000 simulations.:  80%|████████  | 4002/5000 [00:28<00:07, 141.39it/s]Running 5000 simulations.:  80%|████████  | 4017/5000 [00:28<00:06, 142.03it/s]Running 5000 simulations.:  81%|████████  | 4032/5000 [00:28<00:06, 142.01it/s]Running 5000 simulations.:  81%|████████  | 4047/5000 [00:28<00:06, 141.96it/s]Running 5000 simulations.:  81%|████████  | 4062/5000 [00:28<00:06, 142.44it/s]Running 5000 simulations.:  82%|████████▏ | 4077/5000 [00:28<00:06, 141.71it/s]Running 5000 simulations.:  82%|████████▏ | 4092/5000 [00:28<00:06, 140.68it/s]Running 5000 simulations.:  82%|████████▏ | 4107/5000 [00:28<00:06, 139.74it/s]Running 5000 simulations.:  82%|████████▏ | 4121/5000 [00:29<00:06, 139.68it/s]Running 5000 simulations.:  83%|████████▎ | 4136/5000 [00:29<00:06, 139.94it/s]Running 5000 simulations.:  83%|████████▎ | 4151/5000 [00:29<00:06, 140.56it/s]Running 5000 simulations.:  83%|████████▎ | 4166/5000 [00:29<00:05, 141.00it/s]Running 5000 simulations.:  84%|████████▎ | 4181/5000 [00:29<00:05, 141.86it/s]Running 5000 simulations.:  84%|████████▍ | 4196/5000 [00:29<00:05, 142.08it/s]Running 5000 simulations.:  84%|████████▍ | 4211/5000 [00:29<00:05, 140.81it/s]Running 5000 simulations.:  85%|████████▍ | 4226/5000 [00:29<00:05, 140.78it/s]Running 5000 simulations.:  85%|████████▍ | 4241/5000 [00:29<00:05, 141.17it/s]Running 5000 simulations.:  85%|████████▌ | 4256/5000 [00:30<00:05, 141.50it/s]Running 5000 simulations.:  85%|████████▌ | 4271/5000 [00:30<00:05, 141.59it/s]Running 5000 simulations.:  86%|████████▌ | 4286/5000 [00:30<00:05, 141.08it/s]Running 5000 simulations.:  86%|████████▌ | 4301/5000 [00:30<00:04, 140.96it/s]Running 5000 simulations.:  86%|████████▋ | 4316/5000 [00:30<00:04, 141.28it/s]Running 5000 simulations.:  87%|████████▋ | 4331/5000 [00:30<00:04, 142.00it/s]Running 5000 simulations.:  87%|████████▋ | 4346/5000 [00:30<00:04, 142.18it/s]Running 5000 simulations.:  87%|████████▋ | 4361/5000 [00:30<00:04, 142.52it/s]Running 5000 simulations.:  88%|████████▊ | 4376/5000 [00:30<00:04, 142.59it/s]Running 5000 simulations.:  88%|████████▊ | 4391/5000 [00:30<00:04, 142.02it/s]Running 5000 simulations.:  88%|████████▊ | 4406/5000 [00:31<00:04, 141.80it/s]Running 5000 simulations.:  88%|████████▊ | 4421/5000 [00:31<00:04, 141.96it/s]Running 5000 simulations.:  89%|████████▊ | 4436/5000 [00:31<00:03, 142.20it/s]Running 5000 simulations.:  89%|████████▉ | 4451/5000 [00:31<00:03, 142.15it/s]Running 5000 simulations.:  89%|████████▉ | 4466/5000 [00:31<00:03, 141.76it/s]Running 5000 simulations.:  90%|████████▉ | 4481/5000 [00:31<00:03, 141.60it/s]Running 5000 simulations.:  90%|████████▉ | 4496/5000 [00:31<00:03, 141.97it/s]Running 5000 simulations.:  90%|█████████ | 4511/5000 [00:31<00:03, 139.80it/s]Running 5000 simulations.:  90%|█████████ | 4525/5000 [00:31<00:03, 137.19it/s]Running 5000 simulations.:  91%|█████████ | 4539/5000 [00:32<00:03, 134.35it/s]Running 5000 simulations.:  91%|█████████ | 4553/5000 [00:32<00:03, 134.02it/s]Running 5000 simulations.:  91%|█████████▏| 4568/5000 [00:32<00:03, 137.33it/s]Running 5000 simulations.:  92%|█████████▏| 4583/5000 [00:32<00:02, 139.66it/s]Running 5000 simulations.:  92%|█████████▏| 4598/5000 [00:32<00:02, 139.84it/s]Running 5000 simulations.:  92%|█████████▏| 4613/5000 [00:32<00:02, 136.85it/s]Running 5000 simulations.:  93%|█████████▎| 4627/5000 [00:32<00:02, 135.63it/s]Running 5000 simulations.:  93%|█████████▎| 4641/5000 [00:32<00:02, 134.44it/s]Running 5000 simulations.:  93%|█████████▎| 4655/5000 [00:32<00:02, 131.72it/s]Running 5000 simulations.:  93%|█████████▎| 4669/5000 [00:33<00:02, 130.92it/s]Running 5000 simulations.:  94%|█████████▎| 4683/5000 [00:33<00:02, 130.01it/s]Running 5000 simulations.:  94%|█████████▍| 4697/5000 [00:33<00:02, 128.89it/s]Running 5000 simulations.:  94%|█████████▍| 4710/5000 [00:33<00:02, 129.14it/s]Running 5000 simulations.:  94%|█████████▍| 4724/5000 [00:33<00:02, 129.57it/s]Running 5000 simulations.:  95%|█████████▍| 4738/5000 [00:33<00:02, 130.39it/s]Running 5000 simulations.:  95%|█████████▌| 4752/5000 [00:33<00:01, 131.11it/s]Running 5000 simulations.:  95%|█████████▌| 4766/5000 [00:33<00:01, 132.91it/s]Running 5000 simulations.:  96%|█████████▌| 4780/5000 [00:33<00:01, 131.89it/s]Running 5000 simulations.:  96%|█████████▌| 4794/5000 [00:33<00:01, 130.84it/s]Running 5000 simulations.:  96%|█████████▌| 4808/5000 [00:34<00:01, 131.07it/s]Running 5000 simulations.:  96%|█████████▋| 4822/5000 [00:34<00:01, 130.08it/s]Running 5000 simulations.:  97%|█████████▋| 4836/5000 [00:34<00:01, 128.73it/s]Running 5000 simulations.:  97%|█████████▋| 4850/5000 [00:34<00:01, 129.24it/s]Running 5000 simulations.:  97%|█████████▋| 4864/5000 [00:34<00:01, 130.21it/s]Running 5000 simulations.:  98%|█████████▊| 4878/5000 [00:34<00:00, 130.87it/s]Running 5000 simulations.:  98%|█████████▊| 4892/5000 [00:34<00:00, 131.54it/s]Running 5000 simulations.:  98%|█████████▊| 4906/5000 [00:34<00:00, 131.79it/s]Running 5000 simulations.:  98%|█████████▊| 4920/5000 [00:34<00:00, 130.57it/s]Running 5000 simulations.:  99%|█████████▊| 4934/5000 [00:35<00:00, 130.31it/s]Running 5000 simulations.:  99%|█████████▉| 4948/5000 [00:35<00:00, 129.62it/s]Running 5000 simulations.:  99%|█████████▉| 4961/5000 [00:35<00:00, 128.33it/s]Running 5000 simulations.:  99%|█████████▉| 4974/5000 [00:35<00:00, 128.38it/s]Running 5000 simulations.: 100%|█████████▉| 4988/5000 [00:35<00:00, 129.42it/s]Running 5000 simulations.: 100%|██████████| 5000/5000 [00:35<00:00, 140.66it/s]
Running 5000 simulations.:   0%|          | 0/5000 [00:00<?, ?it/s]Running 5000 simulations.:   0%|          | 15/5000 [00:00<00:33, 147.90it/s]Running 5000 simulations.:   1%|          | 30/5000 [00:00<00:33, 148.06it/s]Running 5000 simulations.:   1%|          | 45/5000 [00:00<00:33, 148.32it/s]Running 5000 simulations.:   1%|          | 60/5000 [00:00<00:33, 147.64it/s]Running 5000 simulations.:   2%|▏         | 75/5000 [00:00<00:33, 147.21it/s]Running 5000 simulations.:   2%|▏         | 90/5000 [00:00<00:33, 147.77it/s]Running 5000 simulations.:   2%|▏         | 105/5000 [00:00<00:33, 147.70it/s]Running 5000 simulations.:   2%|▏         | 120/5000 [00:00<00:32, 147.93it/s]Running 5000 simulations.:   3%|▎         | 135/5000 [00:00<00:32, 147.69it/s]Running 5000 simulations.:   3%|▎         | 150/5000 [00:01<00:32, 147.31it/s]Running 5000 simulations.:   3%|▎         | 165/5000 [00:01<00:33, 146.43it/s]Running 5000 simulations.:   4%|▎         | 180/5000 [00:01<00:32, 146.43it/s]Running 5000 simulations.:   4%|▍         | 195/5000 [00:01<00:32, 146.11it/s]Running 5000 simulations.:   4%|▍         | 210/5000 [00:01<00:32, 145.74it/s]Running 5000 simulations.:   4%|▍         | 225/5000 [00:01<00:32, 145.91it/s]Running 5000 simulations.:   5%|▍         | 240/5000 [00:01<00:32, 145.96it/s]Running 5000 simulations.:   5%|▌         | 255/5000 [00:01<00:32, 145.95it/s]Running 5000 simulations.:   5%|▌         | 270/5000 [00:01<00:32, 146.48it/s]Running 5000 simulations.:   6%|▌         | 286/5000 [00:01<00:31, 147.97it/s]Running 5000 simulations.:   6%|▌         | 301/5000 [00:02<00:32, 146.77it/s]Running 5000 simulations.:   6%|▋         | 316/5000 [00:02<00:32, 145.72it/s]Running 5000 simulations.:   7%|▋         | 331/5000 [00:02<00:32, 145.57it/s]Running 5000 simulations.:   7%|▋         | 346/5000 [00:02<00:32, 144.84it/s]Running 5000 simulations.:   7%|▋         | 361/5000 [00:02<00:32, 144.56it/s]Running 5000 simulations.:   8%|▊         | 376/5000 [00:02<00:32, 144.37it/s]Running 5000 simulations.:   8%|▊         | 391/5000 [00:02<00:31, 144.48it/s]Running 5000 simulations.:   8%|▊         | 406/5000 [00:02<00:31, 144.53it/s]Running 5000 simulations.:   8%|▊         | 421/5000 [00:02<00:31, 144.50it/s]Running 5000 simulations.:   9%|▊         | 436/5000 [00:02<00:31, 144.33it/s]Running 5000 simulations.:   9%|▉         | 451/5000 [00:03<00:31, 143.79it/s]Running 5000 simulations.:   9%|▉         | 466/5000 [00:03<00:31, 143.93it/s]Running 5000 simulations.:  10%|▉         | 481/5000 [00:03<00:31, 143.58it/s]Running 5000 simulations.:  10%|▉         | 496/5000 [00:03<00:31, 143.71it/s]Running 5000 simulations.:  10%|█         | 511/5000 [00:03<00:31, 143.76it/s]Running 5000 simulations.:  11%|█         | 526/5000 [00:03<00:31, 144.15it/s]Running 5000 simulations.:  11%|█         | 541/5000 [00:03<00:30, 144.06it/s]Running 5000 simulations.:  11%|█         | 556/5000 [00:03<00:30, 144.33it/s]Running 5000 simulations.:  11%|█▏        | 571/5000 [00:03<00:30, 143.70it/s]Running 5000 simulations.:  12%|█▏        | 586/5000 [00:04<00:30, 143.58it/s]Running 5000 simulations.:  12%|█▏        | 601/5000 [00:04<00:30, 143.12it/s]Running 5000 simulations.:  12%|█▏        | 616/5000 [00:04<00:30, 143.01it/s]Running 5000 simulations.:  13%|█▎        | 631/5000 [00:04<00:30, 143.11it/s]Running 5000 simulations.:  13%|█▎        | 646/5000 [00:04<00:30, 143.28it/s]Running 5000 simulations.:  13%|█▎        | 661/5000 [00:04<00:30, 143.17it/s]Running 5000 simulations.:  14%|█▎        | 676/5000 [00:04<00:30, 143.46it/s]Running 5000 simulations.:  14%|█▍        | 691/5000 [00:04<00:30, 143.48it/s]Running 5000 simulations.:  14%|█▍        | 706/5000 [00:04<00:29, 143.75it/s]Running 5000 simulations.:  14%|█▍        | 721/5000 [00:04<00:29, 143.04it/s]Running 5000 simulations.:  15%|█▍        | 736/5000 [00:05<00:29, 142.63it/s]Running 5000 simulations.:  15%|█▌        | 751/5000 [00:05<00:29, 142.50it/s]Running 5000 simulations.:  15%|█▌        | 766/5000 [00:05<00:29, 142.06it/s]Running 5000 simulations.:  16%|█▌        | 781/5000 [00:05<00:29, 141.53it/s]Running 5000 simulations.:  16%|█▌        | 796/5000 [00:05<00:29, 142.10it/s]Running 5000 simulations.:  16%|█▌        | 811/5000 [00:05<00:29, 142.50it/s]Running 5000 simulations.:  17%|█▋        | 826/5000 [00:05<00:29, 142.74it/s]Running 5000 simulations.:  17%|█▋        | 841/5000 [00:05<00:29, 142.75it/s]Running 5000 simulations.:  17%|█▋        | 856/5000 [00:05<00:28, 142.97it/s]Running 5000 simulations.:  17%|█▋        | 871/5000 [00:06<00:28, 142.92it/s]Running 5000 simulations.:  18%|█▊        | 886/5000 [00:06<00:28, 142.94it/s]Running 5000 simulations.:  18%|█▊        | 901/5000 [00:06<00:28, 143.45it/s]Running 5000 simulations.:  18%|█▊        | 916/5000 [00:06<00:28, 144.00it/s]Running 5000 simulations.:  19%|█▊        | 931/5000 [00:06<00:28, 144.21it/s]Running 5000 simulations.:  19%|█▉        | 946/5000 [00:06<00:28, 144.66it/s]Running 5000 simulations.:  19%|█▉        | 961/5000 [00:06<00:27, 144.76it/s]Running 5000 simulations.:  20%|█▉        | 976/5000 [00:06<00:27, 144.86it/s]Running 5000 simulations.:  20%|█▉        | 991/5000 [00:06<00:27, 145.19it/s]Running 5000 simulations.:  20%|██        | 1006/5000 [00:06<00:27, 145.80it/s]Running 5000 simulations.:  20%|██        | 1021/5000 [00:07<00:27, 146.32it/s]Running 5000 simulations.:  21%|██        | 1036/5000 [00:07<00:27, 145.96it/s]Running 5000 simulations.:  21%|██        | 1051/5000 [00:07<00:27, 145.90it/s]Running 5000 simulations.:  21%|██▏       | 1066/5000 [00:07<00:27, 145.58it/s]Running 5000 simulations.:  22%|██▏       | 1081/5000 [00:07<00:26, 145.68it/s]Running 5000 simulations.:  22%|██▏       | 1096/5000 [00:07<00:26, 145.63it/s]Running 5000 simulations.:  22%|██▏       | 1111/5000 [00:07<00:26, 145.77it/s]Running 5000 simulations.:  23%|██▎       | 1126/5000 [00:07<00:26, 145.81it/s]Running 5000 simulations.:  23%|██▎       | 1141/5000 [00:07<00:26, 145.77it/s]Running 5000 simulations.:  23%|██▎       | 1156/5000 [00:07<00:26, 145.84it/s]Running 5000 simulations.:  23%|██▎       | 1171/5000 [00:08<00:26, 144.96it/s]Running 5000 simulations.:  24%|██▎       | 1186/5000 [00:08<00:26, 145.54it/s]Running 5000 simulations.:  24%|██▍       | 1201/5000 [00:08<00:26, 145.70it/s]Running 5000 simulations.:  24%|██▍       | 1216/5000 [00:08<00:25, 145.63it/s]Running 5000 simulations.:  25%|██▍       | 1231/5000 [00:08<00:25, 145.49it/s]Running 5000 simulations.:  25%|██▍       | 1246/5000 [00:08<00:25, 145.72it/s]Running 5000 simulations.:  25%|██▌       | 1261/5000 [00:08<00:25, 145.59it/s]Running 5000 simulations.:  26%|██▌       | 1276/5000 [00:08<00:25, 145.79it/s]Running 5000 simulations.:  26%|██▌       | 1291/5000 [00:08<00:25, 145.67it/s]Running 5000 simulations.:  26%|██▌       | 1306/5000 [00:09<00:25, 145.55it/s]Running 5000 simulations.:  26%|██▋       | 1321/5000 [00:09<00:25, 145.58it/s]Running 5000 simulations.:  27%|██▋       | 1336/5000 [00:09<00:25, 145.82it/s]Running 5000 simulations.:  27%|██▋       | 1351/5000 [00:09<00:25, 145.79it/s]Running 5000 simulations.:  27%|██▋       | 1366/5000 [00:09<00:24, 145.64it/s]Running 5000 simulations.:  28%|██▊       | 1381/5000 [00:09<00:24, 146.04it/s]Running 5000 simulations.:  28%|██▊       | 1396/5000 [00:09<00:24, 146.39it/s]Running 5000 simulations.:  28%|██▊       | 1411/5000 [00:09<00:24, 146.60it/s]Running 5000 simulations.:  29%|██▊       | 1426/5000 [00:09<00:24, 146.43it/s]Running 5000 simulations.:  29%|██▉       | 1441/5000 [00:09<00:24, 146.10it/s]Running 5000 simulations.:  29%|██▉       | 1456/5000 [00:10<00:24, 145.85it/s]Running 5000 simulations.:  29%|██▉       | 1471/5000 [00:10<00:24, 145.92it/s]Running 5000 simulations.:  30%|██▉       | 1486/5000 [00:10<00:24, 145.72it/s]Running 5000 simulations.:  30%|███       | 1501/5000 [00:10<00:24, 145.43it/s]Running 5000 simulations.:  30%|███       | 1516/5000 [00:10<00:23, 145.66it/s]Running 5000 simulations.:  31%|███       | 1531/5000 [00:10<00:23, 146.26it/s]Running 5000 simulations.:  31%|███       | 1546/5000 [00:10<00:23, 146.19it/s]Running 5000 simulations.:  31%|███       | 1561/5000 [00:10<00:23, 146.06it/s]Running 5000 simulations.:  32%|███▏      | 1576/5000 [00:10<00:23, 145.92it/s]Running 5000 simulations.:  32%|███▏      | 1591/5000 [00:10<00:23, 145.79it/s]Running 5000 simulations.:  32%|███▏      | 1606/5000 [00:11<00:23, 145.60it/s]Running 5000 simulations.:  32%|███▏      | 1621/5000 [00:11<00:23, 146.00it/s]Running 5000 simulations.:  33%|███▎      | 1636/5000 [00:11<00:23, 145.53it/s]Running 5000 simulations.:  33%|███▎      | 1651/5000 [00:11<00:22, 145.75it/s]Running 5000 simulations.:  33%|███▎      | 1666/5000 [00:11<00:22, 146.26it/s]Running 5000 simulations.:  34%|███▎      | 1681/5000 [00:11<00:22, 146.60it/s]Running 5000 simulations.:  34%|███▍      | 1696/5000 [00:11<00:22, 146.58it/s]Running 5000 simulations.:  34%|███▍      | 1711/5000 [00:11<00:22, 146.13it/s]Running 5000 simulations.:  35%|███▍      | 1726/5000 [00:11<00:22, 145.73it/s]Running 5000 simulations.:  35%|███▍      | 1741/5000 [00:11<00:22, 145.37it/s]Running 5000 simulations.:  35%|███▌      | 1756/5000 [00:12<00:22, 145.26it/s]Running 5000 simulations.:  35%|███▌      | 1771/5000 [00:12<00:22, 145.19it/s]Running 5000 simulations.:  36%|███▌      | 1786/5000 [00:12<00:22, 145.56it/s]Running 5000 simulations.:  36%|███▌      | 1801/5000 [00:12<00:21, 145.84it/s]Running 5000 simulations.:  36%|███▋      | 1816/5000 [00:12<00:21, 145.42it/s]Running 5000 simulations.:  37%|███▋      | 1831/5000 [00:12<00:21, 145.09it/s]Running 5000 simulations.:  37%|███▋      | 1846/5000 [00:12<00:21, 144.93it/s]Running 5000 simulations.:  37%|███▋      | 1861/5000 [00:13<00:33, 93.96it/s] Running 5000 simulations.:  38%|███▊      | 1876/5000 [00:13<00:29, 105.15it/s]Running 5000 simulations.:  38%|███▊      | 1891/5000 [00:13<00:27, 114.55it/s]Running 5000 simulations.:  38%|███▊      | 1906/5000 [00:13<00:25, 122.28it/s]Running 5000 simulations.:  38%|███▊      | 1921/5000 [00:13<00:23, 128.44it/s]Running 5000 simulations.:  39%|███▊      | 1936/5000 [00:13<00:23, 133.04it/s]Running 5000 simulations.:  39%|███▉      | 1951/5000 [00:13<00:22, 136.78it/s]Running 5000 simulations.:  39%|███▉      | 1966/5000 [00:13<00:21, 139.55it/s]Running 5000 simulations.:  40%|███▉      | 1981/5000 [00:13<00:21, 141.21it/s]Running 5000 simulations.:  40%|███▉      | 1996/5000 [00:13<00:21, 142.49it/s]Running 5000 simulations.:  40%|████      | 2011/5000 [00:14<00:20, 143.25it/s]Running 5000 simulations.:  41%|████      | 2026/5000 [00:14<00:20, 143.67it/s]Running 5000 simulations.:  41%|████      | 2041/5000 [00:14<00:20, 144.34it/s]Running 5000 simulations.:  41%|████      | 2056/5000 [00:14<00:20, 144.94it/s]Running 5000 simulations.:  41%|████▏     | 2071/5000 [00:14<00:20, 144.88it/s]Running 5000 simulations.:  42%|████▏     | 2086/5000 [00:14<00:20, 144.90it/s]Running 5000 simulations.:  42%|████▏     | 2101/5000 [00:14<00:19, 145.19it/s]Running 5000 simulations.:  42%|████▏     | 2116/5000 [00:14<00:19, 145.28it/s]Running 5000 simulations.:  43%|████▎     | 2131/5000 [00:14<00:19, 145.39it/s]Running 5000 simulations.:  43%|████▎     | 2146/5000 [00:14<00:19, 145.26it/s]Running 5000 simulations.:  43%|████▎     | 2161/5000 [00:15<00:19, 145.28it/s]Running 5000 simulations.:  44%|████▎     | 2176/5000 [00:15<00:19, 145.21it/s]Running 5000 simulations.:  44%|████▍     | 2191/5000 [00:15<00:19, 145.24it/s]Running 5000 simulations.:  44%|████▍     | 2206/5000 [00:15<00:19, 145.23it/s]Running 5000 simulations.:  44%|████▍     | 2221/5000 [00:15<00:19, 145.36it/s]Running 5000 simulations.:  45%|████▍     | 2236/5000 [00:15<00:19, 145.08it/s]Running 5000 simulations.:  45%|████▌     | 2251/5000 [00:15<00:18, 145.32it/s]Running 5000 simulations.:  45%|████▌     | 2266/5000 [00:15<00:18, 145.84it/s]Running 5000 simulations.:  46%|████▌     | 2281/5000 [00:15<00:18, 145.75it/s]Running 5000 simulations.:  46%|████▌     | 2296/5000 [00:15<00:18, 145.75it/s]Running 5000 simulations.:  46%|████▌     | 2311/5000 [00:16<00:18, 146.25it/s]Running 5000 simulations.:  47%|████▋     | 2326/5000 [00:16<00:18, 145.95it/s]Running 5000 simulations.:  47%|████▋     | 2341/5000 [00:16<00:18, 145.70it/s]Running 5000 simulations.:  47%|████▋     | 2356/5000 [00:16<00:18, 144.92it/s]Running 5000 simulations.:  47%|████▋     | 2371/5000 [00:16<00:18, 144.13it/s]Running 5000 simulations.:  48%|████▊     | 2386/5000 [00:16<00:18, 143.49it/s]Running 5000 simulations.:  48%|████▊     | 2401/5000 [00:16<00:18, 143.49it/s]Running 5000 simulations.:  48%|████▊     | 2416/5000 [00:16<00:18, 143.26it/s]Running 5000 simulations.:  49%|████▊     | 2431/5000 [00:16<00:17, 143.37it/s]Running 5000 simulations.:  49%|████▉     | 2446/5000 [00:17<00:17, 143.32it/s]Running 5000 simulations.:  49%|████▉     | 2461/5000 [00:17<00:17, 143.01it/s]Running 5000 simulations.:  50%|████▉     | 2476/5000 [00:17<00:17, 142.62it/s]Running 5000 simulations.:  50%|████▉     | 2491/5000 [00:17<00:17, 142.74it/s]Running 5000 simulations.:  50%|█████     | 2506/5000 [00:17<00:17, 143.38it/s]Running 5000 simulations.:  50%|█████     | 2521/5000 [00:17<00:17, 143.02it/s]Running 5000 simulations.:  51%|█████     | 2536/5000 [00:17<00:17, 143.06it/s]Running 5000 simulations.:  51%|█████     | 2551/5000 [00:17<00:17, 143.40it/s]Running 5000 simulations.:  51%|█████▏    | 2566/5000 [00:17<00:16, 143.85it/s]Running 5000 simulations.:  52%|█████▏    | 2581/5000 [00:17<00:16, 144.34it/s]Running 5000 simulations.:  52%|█████▏    | 2596/5000 [00:18<00:16, 144.21it/s]Running 5000 simulations.:  52%|█████▏    | 2611/5000 [00:18<00:16, 144.24it/s]Running 5000 simulations.:  53%|█████▎    | 2626/5000 [00:18<00:16, 143.35it/s]Running 5000 simulations.:  53%|█████▎    | 2641/5000 [00:18<00:16, 142.98it/s]Running 5000 simulations.:  53%|█████▎    | 2656/5000 [00:18<00:16, 143.40it/s]Running 5000 simulations.:  53%|█████▎    | 2671/5000 [00:18<00:16, 143.69it/s]Running 5000 simulations.:  54%|█████▎    | 2686/5000 [00:18<00:16, 143.96it/s]Running 5000 simulations.:  54%|█████▍    | 2701/5000 [00:18<00:15, 143.82it/s]Running 5000 simulations.:  54%|█████▍    | 2716/5000 [00:18<00:15, 143.87it/s]Running 5000 simulations.:  55%|█████▍    | 2731/5000 [00:19<00:15, 144.33it/s]Running 5000 simulations.:  55%|█████▍    | 2746/5000 [00:19<00:15, 144.41it/s]Running 5000 simulations.:  55%|█████▌    | 2761/5000 [00:19<00:15, 144.77it/s]Running 5000 simulations.:  56%|█████▌    | 2776/5000 [00:19<00:15, 145.13it/s]Running 5000 simulations.:  56%|█████▌    | 2791/5000 [00:19<00:15, 144.66it/s]Running 5000 simulations.:  56%|█████▌    | 2806/5000 [00:19<00:15, 144.33it/s]Running 5000 simulations.:  56%|█████▋    | 2821/5000 [00:19<00:15, 144.04it/s]Running 5000 simulations.:  57%|█████▋    | 2836/5000 [00:19<00:15, 144.20it/s]Running 5000 simulations.:  57%|█████▋    | 2851/5000 [00:19<00:14, 144.25it/s]Running 5000 simulations.:  57%|█████▋    | 2866/5000 [00:19<00:14, 144.34it/s]Running 5000 simulations.:  58%|█████▊    | 2881/5000 [00:20<00:14, 144.50it/s]Running 5000 simulations.:  58%|█████▊    | 2896/5000 [00:20<00:14, 144.42it/s]Running 5000 simulations.:  58%|█████▊    | 2911/5000 [00:20<00:14, 144.58it/s]Running 5000 simulations.:  59%|█████▊    | 2926/5000 [00:20<00:14, 144.68it/s]Running 5000 simulations.:  59%|█████▉    | 2941/5000 [00:20<00:14, 143.67it/s]Running 5000 simulations.:  59%|█████▉    | 2956/5000 [00:20<00:14, 143.60it/s]Running 5000 simulations.:  59%|█████▉    | 2971/5000 [00:20<00:14, 142.19it/s]Running 5000 simulations.:  60%|█████▉    | 2986/5000 [00:20<00:14, 140.74it/s]Running 5000 simulations.:  60%|██████    | 3001/5000 [00:20<00:14, 141.88it/s]Running 5000 simulations.:  60%|██████    | 3016/5000 [00:21<00:13, 143.05it/s]Running 5000 simulations.:  61%|██████    | 3031/5000 [00:21<00:13, 143.97it/s]Running 5000 simulations.:  61%|██████    | 3046/5000 [00:21<00:13, 144.50it/s]Running 5000 simulations.:  61%|██████    | 3061/5000 [00:21<00:13, 144.66it/s]Running 5000 simulations.:  62%|██████▏   | 3076/5000 [00:21<00:13, 145.00it/s]Running 5000 simulations.:  62%|██████▏   | 3091/5000 [00:21<00:13, 145.36it/s]Running 5000 simulations.:  62%|██████▏   | 3106/5000 [00:21<00:13, 145.67it/s]Running 5000 simulations.:  62%|██████▏   | 3121/5000 [00:21<00:12, 145.55it/s]Running 5000 simulations.:  63%|██████▎   | 3136/5000 [00:21<00:12, 145.40it/s]Running 5000 simulations.:  63%|██████▎   | 3151/5000 [00:21<00:12, 145.18it/s]Running 5000 simulations.:  63%|██████▎   | 3166/5000 [00:22<00:12, 145.50it/s]Running 5000 simulations.:  64%|██████▎   | 3181/5000 [00:22<00:12, 145.21it/s]Running 5000 simulations.:  64%|██████▍   | 3196/5000 [00:22<00:12, 145.43it/s]Running 5000 simulations.:  64%|██████▍   | 3211/5000 [00:22<00:12, 145.26it/s]Running 5000 simulations.:  65%|██████▍   | 3226/5000 [00:22<00:12, 145.00it/s]Running 5000 simulations.:  65%|██████▍   | 3241/5000 [00:22<00:12, 145.18it/s]Running 5000 simulations.:  65%|██████▌   | 3256/5000 [00:22<00:12, 145.07it/s]Running 5000 simulations.:  65%|██████▌   | 3271/5000 [00:22<00:11, 144.62it/s]Running 5000 simulations.:  66%|██████▌   | 3286/5000 [00:22<00:11, 143.99it/s]Running 5000 simulations.:  66%|██████▌   | 3301/5000 [00:22<00:11, 143.76it/s]Running 5000 simulations.:  66%|██████▋   | 3316/5000 [00:23<00:11, 143.97it/s]Running 5000 simulations.:  67%|██████▋   | 3331/5000 [00:23<00:11, 144.07it/s]Running 5000 simulations.:  67%|██████▋   | 3346/5000 [00:23<00:11, 144.07it/s]Running 5000 simulations.:  67%|██████▋   | 3361/5000 [00:23<00:11, 144.18it/s]Running 5000 simulations.:  68%|██████▊   | 3376/5000 [00:23<00:11, 144.41it/s]Running 5000 simulations.:  68%|██████▊   | 3391/5000 [00:23<00:11, 144.37it/s]Running 5000 simulations.:  68%|██████▊   | 3406/5000 [00:23<00:11, 144.56it/s]Running 5000 simulations.:  68%|██████▊   | 3421/5000 [00:23<00:10, 144.85it/s]Running 5000 simulations.:  69%|██████▊   | 3436/5000 [00:23<00:10, 144.88it/s]Running 5000 simulations.:  69%|██████▉   | 3451/5000 [00:24<00:10, 144.54it/s]Running 5000 simulations.:  69%|██████▉   | 3466/5000 [00:24<00:10, 144.15it/s]Running 5000 simulations.:  70%|██████▉   | 3481/5000 [00:24<00:10, 142.93it/s]Running 5000 simulations.:  70%|██████▉   | 3496/5000 [00:24<00:10, 143.07it/s]Running 5000 simulations.:  70%|███████   | 3511/5000 [00:24<00:10, 143.97it/s]Running 5000 simulations.:  71%|███████   | 3526/5000 [00:24<00:10, 144.70it/s]Running 5000 simulations.:  71%|███████   | 3541/5000 [00:24<00:10, 145.00it/s]Running 5000 simulations.:  71%|███████   | 3556/5000 [00:24<00:09, 145.17it/s]Running 5000 simulations.:  71%|███████▏  | 3571/5000 [00:24<00:09, 145.10it/s]Running 5000 simulations.:  72%|███████▏  | 3586/5000 [00:24<00:09, 144.86it/s]Running 5000 simulations.:  72%|███████▏  | 3601/5000 [00:25<00:09, 144.43it/s]Running 5000 simulations.:  72%|███████▏  | 3616/5000 [00:25<00:09, 144.20it/s]Running 5000 simulations.:  73%|███████▎  | 3631/5000 [00:25<00:09, 144.03it/s]Running 5000 simulations.:  73%|███████▎  | 3646/5000 [00:25<00:09, 144.34it/s]Running 5000 simulations.:  73%|███████▎  | 3661/5000 [00:25<00:09, 144.93it/s]Running 5000 simulations.:  74%|███████▎  | 3676/5000 [00:25<00:09, 145.15it/s]Running 5000 simulations.:  74%|███████▍  | 3691/5000 [00:25<00:09, 145.13it/s]Running 5000 simulations.:  74%|███████▍  | 3706/5000 [00:25<00:08, 144.91it/s]Running 5000 simulations.:  74%|███████▍  | 3721/5000 [00:25<00:09, 137.02it/s]Running 5000 simulations.:  75%|███████▍  | 3736/5000 [00:26<00:09, 139.07it/s]Running 5000 simulations.:  75%|███████▌  | 3751/5000 [00:26<00:08, 140.17it/s]Running 5000 simulations.:  75%|███████▌  | 3766/5000 [00:26<00:08, 141.60it/s]Running 5000 simulations.:  76%|███████▌  | 3781/5000 [00:26<00:08, 142.70it/s]Running 5000 simulations.:  76%|███████▌  | 3796/5000 [00:26<00:08, 143.59it/s]Running 5000 simulations.:  76%|███████▌  | 3811/5000 [00:26<00:08, 143.96it/s]Running 5000 simulations.:  77%|███████▋  | 3826/5000 [00:26<00:08, 144.18it/s]Running 5000 simulations.:  77%|███████▋  | 3841/5000 [00:26<00:08, 144.50it/s]Running 5000 simulations.:  77%|███████▋  | 3856/5000 [00:26<00:07, 144.95it/s]Running 5000 simulations.:  77%|███████▋  | 3871/5000 [00:26<00:07, 145.36it/s]Running 5000 simulations.:  78%|███████▊  | 3886/5000 [00:27<00:07, 144.97it/s]Running 5000 simulations.:  78%|███████▊  | 3901/5000 [00:27<00:07, 144.59it/s]Running 5000 simulations.:  78%|███████▊  | 3916/5000 [00:27<00:07, 144.34it/s]Running 5000 simulations.:  79%|███████▊  | 3931/5000 [00:27<00:07, 144.76it/s]Running 5000 simulations.:  79%|███████▉  | 3946/5000 [00:27<00:07, 144.77it/s]Running 5000 simulations.:  79%|███████▉  | 3961/5000 [00:27<00:07, 144.91it/s]Running 5000 simulations.:  80%|███████▉  | 3976/5000 [00:27<00:07, 144.76it/s]Running 5000 simulations.:  80%|███████▉  | 3992/5000 [00:27<00:06, 148.66it/s]Running 5000 simulations.:  80%|████████  | 4009/5000 [00:27<00:06, 153.32it/s]Running 5000 simulations.:  80%|████████  | 4025/5000 [00:27<00:06, 150.82it/s]Running 5000 simulations.:  81%|████████  | 4041/5000 [00:28<00:06, 148.58it/s]Running 5000 simulations.:  81%|████████  | 4056/5000 [00:28<00:06, 147.70it/s]Running 5000 simulations.:  81%|████████▏ | 4071/5000 [00:28<00:06, 147.09it/s]Running 5000 simulations.:  82%|████████▏ | 4086/5000 [00:28<00:06, 146.37it/s]Running 5000 simulations.:  82%|████████▏ | 4101/5000 [00:28<00:06, 146.14it/s]Running 5000 simulations.:  82%|████████▏ | 4116/5000 [00:28<00:06, 146.21it/s]Running 5000 simulations.:  83%|████████▎ | 4131/5000 [00:28<00:05, 145.53it/s]Running 5000 simulations.:  83%|████████▎ | 4146/5000 [00:28<00:05, 144.22it/s]Running 5000 simulations.:  83%|████████▎ | 4161/5000 [00:28<00:05, 140.54it/s]Running 5000 simulations.:  84%|████████▎ | 4176/5000 [00:29<00:05, 138.65it/s]Running 5000 simulations.:  84%|████████▍ | 4190/5000 [00:29<00:05, 136.21it/s]Running 5000 simulations.:  84%|████████▍ | 4204/5000 [00:29<00:05, 133.69it/s]Running 5000 simulations.:  84%|████████▍ | 4218/5000 [00:29<00:05, 132.30it/s]Running 5000 simulations.:  85%|████████▍ | 4232/5000 [00:29<00:05, 133.75it/s]Running 5000 simulations.:  85%|████████▍ | 4246/5000 [00:29<00:05, 134.97it/s]Running 5000 simulations.:  85%|████████▌ | 4260/5000 [00:29<00:05, 135.77it/s]Running 5000 simulations.:  85%|████████▌ | 4274/5000 [00:29<00:05, 136.66it/s]Running 5000 simulations.:  86%|████████▌ | 4288/5000 [00:29<00:05, 136.93it/s]Running 5000 simulations.:  86%|████████▌ | 4302/5000 [00:29<00:05, 137.43it/s]Running 5000 simulations.:  86%|████████▋ | 4316/5000 [00:30<00:04, 138.01it/s]Running 5000 simulations.:  87%|████████▋ | 4330/5000 [00:30<00:04, 138.48it/s]Running 5000 simulations.:  87%|████████▋ | 4345/5000 [00:30<00:04, 139.74it/s]Running 5000 simulations.:  87%|████████▋ | 4360/5000 [00:30<00:04, 140.05it/s]Running 5000 simulations.:  88%|████████▊ | 4375/5000 [00:30<00:04, 140.48it/s]Running 5000 simulations.:  88%|████████▊ | 4390/5000 [00:30<00:04, 141.00it/s]Running 5000 simulations.:  88%|████████▊ | 4405/5000 [00:30<00:04, 141.65it/s]Running 5000 simulations.:  88%|████████▊ | 4420/5000 [00:30<00:04, 142.24it/s]Running 5000 simulations.:  89%|████████▊ | 4435/5000 [00:30<00:03, 142.96it/s]Running 5000 simulations.:  89%|████████▉ | 4450/5000 [00:31<00:03, 142.91it/s]Running 5000 simulations.:  89%|████████▉ | 4465/5000 [00:31<00:03, 143.27it/s]Running 5000 simulations.:  90%|████████▉ | 4480/5000 [00:31<00:03, 143.13it/s]Running 5000 simulations.:  90%|████████▉ | 4495/5000 [00:31<00:03, 141.52it/s]Running 5000 simulations.:  90%|█████████ | 4510/5000 [00:31<00:03, 140.38it/s]Running 5000 simulations.:  90%|█████████ | 4525/5000 [00:31<00:03, 139.72it/s]Running 5000 simulations.:  91%|█████████ | 4539/5000 [00:31<00:03, 139.17it/s]Running 5000 simulations.:  91%|█████████ | 4553/5000 [00:31<00:03, 139.29it/s]Running 5000 simulations.:  91%|█████████▏| 4567/5000 [00:31<00:03, 139.14it/s]Running 5000 simulations.:  92%|█████████▏| 4582/5000 [00:31<00:02, 139.63it/s]Running 5000 simulations.:  92%|█████████▏| 4596/5000 [00:32<00:02, 139.26it/s]Running 5000 simulations.:  92%|█████████▏| 4610/5000 [00:32<00:02, 139.07it/s]Running 5000 simulations.:  92%|█████████▏| 4624/5000 [00:32<00:02, 138.87it/s]Running 5000 simulations.:  93%|█████████▎| 4638/5000 [00:32<00:02, 138.36it/s]Running 5000 simulations.:  93%|█████████▎| 4652/5000 [00:32<00:02, 138.07it/s]Running 5000 simulations.:  93%|█████████▎| 4667/5000 [00:32<00:02, 140.00it/s]Running 5000 simulations.:  94%|█████████▎| 4682/5000 [00:32<00:02, 141.13it/s]Running 5000 simulations.:  94%|█████████▍| 4697/5000 [00:32<00:02, 142.62it/s]Running 5000 simulations.:  94%|█████████▍| 4712/5000 [00:32<00:02, 143.39it/s]Running 5000 simulations.:  95%|█████████▍| 4727/5000 [00:32<00:01, 144.31it/s]Running 5000 simulations.:  95%|█████████▍| 4742/5000 [00:33<00:01, 144.67it/s]Running 5000 simulations.:  95%|█████████▌| 4757/5000 [00:33<00:01, 144.69it/s]Running 5000 simulations.:  95%|█████████▌| 4772/5000 [00:33<00:01, 144.41it/s]Running 5000 simulations.:  96%|█████████▌| 4787/5000 [00:33<00:01, 144.79it/s]Running 5000 simulations.:  96%|█████████▌| 4802/5000 [00:33<00:01, 145.62it/s]Running 5000 simulations.:  96%|█████████▋| 4817/5000 [00:33<00:01, 145.97it/s]Running 5000 simulations.:  97%|█████████▋| 4832/5000 [00:33<00:01, 145.62it/s]Running 5000 simulations.:  97%|█████████▋| 4847/5000 [00:33<00:01, 145.78it/s]Running 5000 simulations.:  97%|█████████▋| 4862/5000 [00:33<00:00, 145.83it/s]Running 5000 simulations.:  98%|█████████▊| 4877/5000 [00:34<00:00, 145.35it/s]Running 5000 simulations.:  98%|█████████▊| 4892/5000 [00:34<00:00, 143.86it/s]Running 5000 simulations.:  98%|█████████▊| 4907/5000 [00:34<00:00, 144.52it/s]Running 5000 simulations.:  98%|█████████▊| 4922/5000 [00:34<00:00, 145.39it/s]Running 5000 simulations.:  99%|█████████▊| 4937/5000 [00:34<00:00, 145.49it/s]Running 5000 simulations.:  99%|█████████▉| 4952/5000 [00:34<00:00, 145.41it/s]Running 5000 simulations.:  99%|█████████▉| 4967/5000 [00:34<00:00, 145.66it/s]Running 5000 simulations.: 100%|█████████▉| 4982/5000 [00:34<00:00, 145.81it/s]Running 5000 simulations.: 100%|█████████▉| 4997/5000 [00:34<00:00, 145.78it/s]Running 5000 simulations.: 100%|██████████| 5000/5000 [00:34<00:00, 143.44it/s]
Running 5000 simulations.:   0%|          | 0/5000 [00:00<?, ?it/s]Running 5000 simulations.:   0%|          | 16/5000 [00:00<00:32, 152.39it/s]Running 5000 simulations.:   1%|          | 32/5000 [00:00<00:32, 151.99it/s]Running 5000 simulations.:   1%|          | 48/5000 [00:00<00:32, 152.11it/s]Running 5000 simulations.:   1%|▏         | 64/5000 [00:00<00:32, 151.99it/s]Running 5000 simulations.:   2%|▏         | 80/5000 [00:00<00:32, 151.77it/s]Running 5000 simulations.:   2%|▏         | 95/5000 [00:00<00:32, 150.54it/s]Running 5000 simulations.:   2%|▏         | 110/5000 [00:00<00:32, 149.67it/s]Running 5000 simulations.:   2%|▎         | 125/5000 [00:00<00:32, 148.84it/s]Running 5000 simulations.:   3%|▎         | 140/5000 [00:00<00:32, 148.41it/s]Running 5000 simulations.:   3%|▎         | 155/5000 [00:01<00:32, 148.53it/s]Running 5000 simulations.:   3%|▎         | 170/5000 [00:01<00:32, 148.63it/s]Running 5000 simulations.:   4%|▎         | 185/5000 [00:01<00:32, 148.52it/s]Running 5000 simulations.:   4%|▍         | 200/5000 [00:01<00:32, 148.23it/s]Running 5000 simulations.:   4%|▍         | 215/5000 [00:01<00:32, 148.69it/s]Running 5000 simulations.:   5%|▍         | 230/5000 [00:01<00:32, 148.78it/s]Running 5000 simulations.:   5%|▍         | 245/5000 [00:01<00:31, 148.93it/s]Running 5000 simulations.:   5%|▌         | 261/5000 [00:01<00:31, 152.05it/s]Running 5000 simulations.:   6%|▌         | 278/5000 [00:01<00:30, 155.73it/s]Running 5000 simulations.:   6%|▌         | 294/5000 [00:01<00:30, 155.72it/s]Running 5000 simulations.:   6%|▌         | 310/5000 [00:02<00:30, 153.48it/s]Running 5000 simulations.:   7%|▋         | 326/5000 [00:02<00:30, 152.33it/s]Running 5000 simulations.:   7%|▋         | 342/5000 [00:02<00:30, 151.49it/s]Running 5000 simulations.:   7%|▋         | 358/5000 [00:02<00:30, 150.94it/s]Running 5000 simulations.:   7%|▋         | 374/5000 [00:02<00:30, 149.66it/s]Running 5000 simulations.:   8%|▊         | 389/5000 [00:02<00:30, 149.30it/s]Running 5000 simulations.:   8%|▊         | 404/5000 [00:02<00:30, 149.11it/s]Running 5000 simulations.:   8%|▊         | 419/5000 [00:02<00:30, 148.61it/s]Running 5000 simulations.:   9%|▊         | 434/5000 [00:02<00:30, 148.27it/s]Running 5000 simulations.:   9%|▉         | 449/5000 [00:02<00:30, 147.53it/s]Running 5000 simulations.:   9%|▉         | 464/5000 [00:03<00:30, 147.33it/s]Running 5000 simulations.:  10%|▉         | 479/5000 [00:03<00:30, 147.17it/s]Running 5000 simulations.:  10%|▉         | 494/5000 [00:03<00:30, 147.09it/s]Running 5000 simulations.:  10%|█         | 509/5000 [00:03<00:30, 147.70it/s]Running 5000 simulations.:  10%|█         | 524/5000 [00:03<00:30, 148.27it/s]Running 5000 simulations.:  11%|█         | 539/5000 [00:03<00:30, 147.95it/s]Running 5000 simulations.:  11%|█         | 554/5000 [00:03<00:30, 147.60it/s]Running 5000 simulations.:  11%|█▏        | 569/5000 [00:03<00:30, 147.44it/s]Running 5000 simulations.:  12%|█▏        | 584/5000 [00:03<00:29, 147.64it/s]Running 5000 simulations.:  12%|█▏        | 599/5000 [00:04<00:29, 147.68it/s]Running 5000 simulations.:  12%|█▏        | 614/5000 [00:04<00:29, 147.53it/s]Running 5000 simulations.:  13%|█▎        | 629/5000 [00:04<00:29, 147.87it/s]Running 5000 simulations.:  13%|█▎        | 644/5000 [00:04<00:29, 147.63it/s]Running 5000 simulations.:  13%|█▎        | 659/5000 [00:04<00:29, 147.57it/s]Running 5000 simulations.:  13%|█▎        | 674/5000 [00:04<00:29, 147.29it/s]Running 5000 simulations.:  14%|█▍        | 689/5000 [00:04<00:29, 147.22it/s]Running 5000 simulations.:  14%|█▍        | 704/5000 [00:04<00:29, 146.98it/s]Running 5000 simulations.:  14%|█▍        | 719/5000 [00:04<00:29, 147.27it/s]Running 5000 simulations.:  15%|█▍        | 734/5000 [00:04<00:28, 147.27it/s]Running 5000 simulations.:  15%|█▍        | 749/5000 [00:05<00:28, 147.05it/s]Running 5000 simulations.:  15%|█▌        | 764/5000 [00:05<00:28, 146.99it/s]Running 5000 simulations.:  16%|█▌        | 779/5000 [00:05<00:28, 146.36it/s]Running 5000 simulations.:  16%|█▌        | 794/5000 [00:05<00:28, 146.15it/s]Running 5000 simulations.:  16%|█▌        | 809/5000 [00:05<00:28, 146.26it/s]Running 5000 simulations.:  16%|█▋        | 824/5000 [00:05<00:28, 146.53it/s]Running 5000 simulations.:  17%|█▋        | 839/5000 [00:05<00:28, 146.34it/s]Running 5000 simulations.:  17%|█▋        | 854/5000 [00:05<00:28, 146.31it/s]Running 5000 simulations.:  17%|█▋        | 869/5000 [00:05<00:28, 146.33it/s]Running 5000 simulations.:  18%|█▊        | 884/5000 [00:05<00:28, 145.89it/s]Running 5000 simulations.:  18%|█▊        | 899/5000 [00:06<00:28, 146.05it/s]Running 5000 simulations.:  18%|█▊        | 914/5000 [00:06<00:27, 145.98it/s]Running 5000 simulations.:  19%|█▊        | 929/5000 [00:06<00:27, 146.34it/s]Running 5000 simulations.:  19%|█▉        | 944/5000 [00:06<00:27, 146.57it/s]Running 5000 simulations.:  19%|█▉        | 959/5000 [00:06<00:27, 146.58it/s]Running 5000 simulations.:  19%|█▉        | 974/5000 [00:06<00:27, 147.11it/s]Running 5000 simulations.:  20%|█▉        | 989/5000 [00:06<00:27, 147.08it/s]Running 5000 simulations.:  20%|██        | 1004/5000 [00:06<00:27, 146.47it/s]Running 5000 simulations.:  20%|██        | 1019/5000 [00:06<00:27, 146.05it/s]Running 5000 simulations.:  21%|██        | 1034/5000 [00:06<00:27, 145.66it/s]Running 5000 simulations.:  21%|██        | 1049/5000 [00:07<00:27, 145.45it/s]Running 5000 simulations.:  21%|██▏       | 1064/5000 [00:07<00:27, 145.38it/s]Running 5000 simulations.:  22%|██▏       | 1079/5000 [00:07<00:26, 146.07it/s]Running 5000 simulations.:  22%|██▏       | 1094/5000 [00:07<00:26, 146.15it/s]Running 5000 simulations.:  22%|██▏       | 1109/5000 [00:07<00:26, 146.25it/s]Running 5000 simulations.:  22%|██▏       | 1124/5000 [00:07<00:26, 146.50it/s]Running 5000 simulations.:  23%|██▎       | 1139/5000 [00:07<00:26, 146.55it/s]Running 5000 simulations.:  23%|██▎       | 1154/5000 [00:07<00:26, 146.84it/s]Running 5000 simulations.:  23%|██▎       | 1169/5000 [00:07<00:26, 146.42it/s]Running 5000 simulations.:  24%|██▎       | 1184/5000 [00:08<00:26, 145.87it/s]Running 5000 simulations.:  24%|██▍       | 1199/5000 [00:08<00:26, 145.94it/s]Running 5000 simulations.:  24%|██▍       | 1214/5000 [00:08<00:25, 146.22it/s]Running 5000 simulations.:  25%|██▍       | 1229/5000 [00:08<00:25, 146.18it/s]Running 5000 simulations.:  25%|██▍       | 1244/5000 [00:08<00:25, 145.92it/s]Running 5000 simulations.:  25%|██▌       | 1259/5000 [00:08<00:25, 146.16it/s]Running 5000 simulations.:  25%|██▌       | 1274/5000 [00:08<00:25, 146.27it/s]Running 5000 simulations.:  26%|██▌       | 1289/5000 [00:08<00:25, 146.58it/s]Running 5000 simulations.:  26%|██▌       | 1304/5000 [00:08<00:25, 146.81it/s]Running 5000 simulations.:  26%|██▋       | 1319/5000 [00:08<00:25, 146.71it/s]Running 5000 simulations.:  27%|██▋       | 1334/5000 [00:09<00:24, 146.85it/s]Running 5000 simulations.:  27%|██▋       | 1349/5000 [00:09<00:24, 146.93it/s]Running 5000 simulations.:  27%|██▋       | 1364/5000 [00:09<00:24, 146.43it/s]Running 5000 simulations.:  28%|██▊       | 1379/5000 [00:09<00:24, 146.45it/s]Running 5000 simulations.:  28%|██▊       | 1394/5000 [00:09<00:24, 146.10it/s]Running 5000 simulations.:  28%|██▊       | 1409/5000 [00:09<00:24, 145.53it/s]Running 5000 simulations.:  28%|██▊       | 1424/5000 [00:09<00:24, 145.55it/s]Running 5000 simulations.:  29%|██▉       | 1439/5000 [00:09<00:24, 145.42it/s]Running 5000 simulations.:  29%|██▉       | 1454/5000 [00:09<00:24, 145.10it/s]Running 5000 simulations.:  29%|██▉       | 1469/5000 [00:09<00:24, 145.15it/s]Running 5000 simulations.:  30%|██▉       | 1484/5000 [00:10<00:24, 145.13it/s]Running 5000 simulations.:  30%|██▉       | 1499/5000 [00:10<00:24, 144.78it/s]Running 5000 simulations.:  30%|███       | 1514/5000 [00:10<00:24, 144.89it/s]Running 5000 simulations.:  31%|███       | 1529/5000 [00:10<00:23, 144.65it/s]Running 5000 simulations.:  31%|███       | 1544/5000 [00:10<00:23, 144.96it/s]Running 5000 simulations.:  31%|███       | 1559/5000 [00:10<00:23, 145.55it/s]Running 5000 simulations.:  31%|███▏      | 1574/5000 [00:10<00:23, 145.74it/s]Running 5000 simulations.:  32%|███▏      | 1589/5000 [00:10<00:23, 146.08it/s]Running 5000 simulations.:  32%|███▏      | 1604/5000 [00:10<00:23, 145.59it/s]Running 5000 simulations.:  32%|███▏      | 1619/5000 [00:10<00:23, 145.85it/s]Running 5000 simulations.:  33%|███▎      | 1634/5000 [00:11<00:23, 145.99it/s]Running 5000 simulations.:  33%|███▎      | 1649/5000 [00:11<00:22, 146.03it/s]Running 5000 simulations.:  33%|███▎      | 1664/5000 [00:11<00:22, 145.79it/s]Running 5000 simulations.:  34%|███▎      | 1679/5000 [00:11<00:22, 145.40it/s]Running 5000 simulations.:  34%|███▍      | 1694/5000 [00:11<00:22, 145.27it/s]Running 5000 simulations.:  34%|███▍      | 1709/5000 [00:11<00:22, 145.83it/s]Running 5000 simulations.:  34%|███▍      | 1724/5000 [00:11<00:22, 146.10it/s]Running 5000 simulations.:  35%|███▍      | 1739/5000 [00:11<00:22, 145.75it/s]Running 5000 simulations.:  35%|███▌      | 1754/5000 [00:11<00:22, 145.37it/s]Running 5000 simulations.:  35%|███▌      | 1769/5000 [00:12<00:22, 145.23it/s]Running 5000 simulations.:  36%|███▌      | 1784/5000 [00:12<00:22, 145.17it/s]Running 5000 simulations.:  36%|███▌      | 1799/5000 [00:12<00:22, 145.08it/s]Running 5000 simulations.:  36%|███▋      | 1814/5000 [00:12<00:21, 145.16it/s]Running 5000 simulations.:  37%|███▋      | 1829/5000 [00:12<00:21, 145.12it/s]Running 5000 simulations.:  37%|███▋      | 1844/5000 [00:12<00:21, 145.56it/s]Running 5000 simulations.:  37%|███▋      | 1859/5000 [00:12<00:21, 145.13it/s]Running 5000 simulations.:  37%|███▋      | 1874/5000 [00:12<00:21, 144.95it/s]Running 5000 simulations.:  38%|███▊      | 1889/5000 [00:12<00:21, 144.99it/s]Running 5000 simulations.:  38%|███▊      | 1904/5000 [00:12<00:21, 145.34it/s]Running 5000 simulations.:  38%|███▊      | 1919/5000 [00:13<00:21, 145.14it/s]Running 5000 simulations.:  39%|███▊      | 1934/5000 [00:13<00:21, 145.43it/s]Running 5000 simulations.:  39%|███▉      | 1949/5000 [00:13<00:20, 145.62it/s]Running 5000 simulations.:  39%|███▉      | 1964/5000 [00:13<00:20, 146.34it/s]Running 5000 simulations.:  40%|███▉      | 1979/5000 [00:13<00:20, 146.66it/s]Running 5000 simulations.:  40%|███▉      | 1994/5000 [00:13<00:20, 146.80it/s]Running 5000 simulations.:  40%|████      | 2009/5000 [00:13<00:20, 146.56it/s]Running 5000 simulations.:  40%|████      | 2024/5000 [00:13<00:20, 145.78it/s]Running 5000 simulations.:  41%|████      | 2039/5000 [00:13<00:20, 146.07it/s]Running 5000 simulations.:  41%|████      | 2054/5000 [00:13<00:20, 145.30it/s]Running 5000 simulations.:  41%|████▏     | 2069/5000 [00:14<00:20, 145.29it/s]Running 5000 simulations.:  42%|████▏     | 2084/5000 [00:14<00:20, 143.63it/s]Running 5000 simulations.:  42%|████▏     | 2099/5000 [00:14<00:20, 144.52it/s]Running 5000 simulations.:  42%|████▏     | 2114/5000 [00:14<00:19, 145.21it/s]Running 5000 simulations.:  43%|████▎     | 2129/5000 [00:14<00:19, 145.42it/s]Running 5000 simulations.:  43%|████▎     | 2144/5000 [00:14<00:19, 145.56it/s]Running 5000 simulations.:  43%|████▎     | 2159/5000 [00:14<00:19, 145.51it/s]Running 5000 simulations.:  43%|████▎     | 2174/5000 [00:14<00:19, 145.74it/s]Running 5000 simulations.:  44%|████▍     | 2189/5000 [00:14<00:19, 145.85it/s]Running 5000 simulations.:  44%|████▍     | 2204/5000 [00:15<00:19, 146.05it/s]Running 5000 simulations.:  44%|████▍     | 2219/5000 [00:15<00:18, 146.65it/s]Running 5000 simulations.:  45%|████▍     | 2234/5000 [00:15<00:18, 146.36it/s]Running 5000 simulations.:  45%|████▍     | 2249/5000 [00:15<00:18, 146.43it/s]Running 5000 simulations.:  45%|████▌     | 2264/5000 [00:15<00:18, 145.17it/s]Running 5000 simulations.:  46%|████▌     | 2279/5000 [00:15<00:18, 144.29it/s]Running 5000 simulations.:  46%|████▌     | 2294/5000 [00:15<00:18, 144.67it/s]Running 5000 simulations.:  46%|████▌     | 2309/5000 [00:15<00:18, 143.60it/s]Running 5000 simulations.:  46%|████▋     | 2324/5000 [00:15<00:18, 142.80it/s]Running 5000 simulations.:  47%|████▋     | 2339/5000 [00:15<00:18, 143.18it/s]Running 5000 simulations.:  47%|████▋     | 2354/5000 [00:16<00:18, 143.03it/s]Running 5000 simulations.:  47%|████▋     | 2369/5000 [00:16<00:18, 143.04it/s]Running 5000 simulations.:  48%|████▊     | 2384/5000 [00:16<00:18, 143.44it/s]Running 5000 simulations.:  48%|████▊     | 2399/5000 [00:16<00:18, 143.08it/s]Running 5000 simulations.:  48%|████▊     | 2414/5000 [00:16<00:18, 142.69it/s]Running 5000 simulations.:  49%|████▊     | 2429/5000 [00:16<00:18, 141.27it/s]Running 5000 simulations.:  49%|████▉     | 2444/5000 [00:16<00:18, 141.35it/s]Running 5000 simulations.:  49%|████▉     | 2459/5000 [00:16<00:17, 141.18it/s]Running 5000 simulations.:  49%|████▉     | 2474/5000 [00:16<00:17, 141.25it/s]Running 5000 simulations.:  50%|████▉     | 2489/5000 [00:16<00:17, 141.60it/s]Running 5000 simulations.:  50%|█████     | 2504/5000 [00:17<00:17, 142.03it/s]Running 5000 simulations.:  50%|█████     | 2519/5000 [00:17<00:17, 142.14it/s]Running 5000 simulations.:  51%|█████     | 2534/5000 [00:17<00:17, 142.76it/s]Running 5000 simulations.:  51%|█████     | 2549/5000 [00:17<00:17, 142.42it/s]Running 5000 simulations.:  51%|█████▏    | 2564/5000 [00:17<00:17, 143.09it/s]Running 5000 simulations.:  52%|█████▏    | 2579/5000 [00:17<00:17, 142.27it/s]Running 5000 simulations.:  52%|█████▏    | 2594/5000 [00:17<00:17, 141.39it/s]Running 5000 simulations.:  52%|█████▏    | 2609/5000 [00:17<00:16, 140.98it/s]Running 5000 simulations.:  52%|█████▏    | 2624/5000 [00:17<00:16, 140.81it/s]Running 5000 simulations.:  53%|█████▎    | 2639/5000 [00:18<00:16, 141.07it/s]Running 5000 simulations.:  53%|█████▎    | 2654/5000 [00:18<00:16, 141.17it/s]Running 5000 simulations.:  53%|█████▎    | 2669/5000 [00:18<00:16, 140.88it/s]Running 5000 simulations.:  54%|█████▎    | 2684/5000 [00:18<00:16, 140.39it/s]Running 5000 simulations.:  54%|█████▍    | 2699/5000 [00:18<00:16, 140.45it/s]Running 5000 simulations.:  54%|█████▍    | 2714/5000 [00:18<00:16, 139.90it/s]Running 5000 simulations.:  55%|█████▍    | 2728/5000 [00:18<00:16, 139.61it/s]Running 5000 simulations.:  55%|█████▍    | 2742/5000 [00:18<00:16, 139.53it/s]Running 5000 simulations.:  55%|█████▌    | 2756/5000 [00:18<00:16, 139.16it/s]Running 5000 simulations.:  55%|█████▌    | 2771/5000 [00:19<00:15, 139.69it/s]Running 5000 simulations.:  56%|█████▌    | 2785/5000 [00:19<00:15, 139.59it/s]Running 5000 simulations.:  56%|█████▌    | 2799/5000 [00:19<00:15, 139.23it/s]Running 5000 simulations.:  56%|█████▋    | 2813/5000 [00:19<00:15, 139.39it/s]Running 5000 simulations.:  57%|█████▋    | 2828/5000 [00:19<00:15, 140.30it/s]Running 5000 simulations.:  57%|█████▋    | 2843/5000 [00:19<00:15, 141.68it/s]Running 5000 simulations.:  57%|█████▋    | 2858/5000 [00:19<00:15, 142.62it/s]Running 5000 simulations.:  57%|█████▋    | 2873/5000 [00:19<00:14, 143.19it/s]Running 5000 simulations.:  58%|█████▊    | 2888/5000 [00:19<00:14, 143.16it/s]Running 5000 simulations.:  58%|█████▊    | 2903/5000 [00:19<00:14, 142.90it/s]Running 5000 simulations.:  58%|█████▊    | 2918/5000 [00:20<00:14, 143.61it/s]Running 5000 simulations.:  59%|█████▊    | 2933/5000 [00:20<00:14, 144.24it/s]Running 5000 simulations.:  59%|█████▉    | 2948/5000 [00:20<00:14, 144.95it/s]Running 5000 simulations.:  59%|█████▉    | 2963/5000 [00:20<00:13, 145.54it/s]Running 5000 simulations.:  60%|█████▉    | 2978/5000 [00:20<00:13, 145.41it/s]Running 5000 simulations.:  60%|█████▉    | 2993/5000 [00:20<00:13, 145.53it/s]Running 5000 simulations.:  60%|██████    | 3008/5000 [00:20<00:13, 145.52it/s]Running 5000 simulations.:  60%|██████    | 3023/5000 [00:20<00:14, 137.88it/s]Running 5000 simulations.:  61%|██████    | 3038/5000 [00:20<00:14, 139.78it/s]Running 5000 simulations.:  61%|██████    | 3053/5000 [00:20<00:13, 140.98it/s]Running 5000 simulations.:  61%|██████▏   | 3068/5000 [00:21<00:13, 142.12it/s]Running 5000 simulations.:  62%|██████▏   | 3083/5000 [00:21<00:13, 142.93it/s]Running 5000 simulations.:  62%|██████▏   | 3098/5000 [00:21<00:13, 143.60it/s]Running 5000 simulations.:  62%|██████▏   | 3113/5000 [00:21<00:13, 144.13it/s]Running 5000 simulations.:  63%|██████▎   | 3128/5000 [00:21<00:12, 144.62it/s]Running 5000 simulations.:  63%|██████▎   | 3143/5000 [00:21<00:12, 144.67it/s]Running 5000 simulations.:  63%|██████▎   | 3158/5000 [00:21<00:12, 145.25it/s]Running 5000 simulations.:  63%|██████▎   | 3173/5000 [00:21<00:12, 145.26it/s]Running 5000 simulations.:  64%|██████▍   | 3188/5000 [00:21<00:12, 145.27it/s]Running 5000 simulations.:  64%|██████▍   | 3203/5000 [00:22<00:12, 145.52it/s]Running 5000 simulations.:  64%|██████▍   | 3218/5000 [00:22<00:12, 145.03it/s]Running 5000 simulations.:  65%|██████▍   | 3233/5000 [00:22<00:12, 145.05it/s]Running 5000 simulations.:  65%|██████▍   | 3248/5000 [00:22<00:12, 145.28it/s]Running 5000 simulations.:  65%|██████▌   | 3263/5000 [00:22<00:11, 145.59it/s]Running 5000 simulations.:  66%|██████▌   | 3278/5000 [00:22<00:11, 145.84it/s]Running 5000 simulations.:  66%|██████▌   | 3293/5000 [00:22<00:11, 146.26it/s]Running 5000 simulations.:  66%|██████▌   | 3308/5000 [00:22<00:11, 146.37it/s]Running 5000 simulations.:  66%|██████▋   | 3323/5000 [00:22<00:11, 146.20it/s]Running 5000 simulations.:  67%|██████▋   | 3338/5000 [00:22<00:11, 146.20it/s]Running 5000 simulations.:  67%|██████▋   | 3353/5000 [00:23<00:11, 145.98it/s]Running 5000 simulations.:  67%|██████▋   | 3368/5000 [00:23<00:11, 145.93it/s]Running 5000 simulations.:  68%|██████▊   | 3383/5000 [00:23<00:11, 145.74it/s]Running 5000 simulations.:  68%|██████▊   | 3398/5000 [00:23<00:11, 145.35it/s]Running 5000 simulations.:  68%|██████▊   | 3413/5000 [00:23<00:10, 145.36it/s]Running 5000 simulations.:  69%|██████▊   | 3428/5000 [00:23<00:10, 145.87it/s]Running 5000 simulations.:  69%|██████▉   | 3443/5000 [00:23<00:10, 146.22it/s]Running 5000 simulations.:  69%|██████▉   | 3458/5000 [00:23<00:10, 146.09it/s]Running 5000 simulations.:  69%|██████▉   | 3473/5000 [00:23<00:10, 145.91it/s]Running 5000 simulations.:  70%|██████▉   | 3488/5000 [00:23<00:10, 146.41it/s]Running 5000 simulations.:  70%|███████   | 3503/5000 [00:24<00:10, 146.38it/s]Running 5000 simulations.:  70%|███████   | 3518/5000 [00:24<00:10, 146.39it/s]Running 5000 simulations.:  71%|███████   | 3533/5000 [00:24<00:10, 146.65it/s]Running 5000 simulations.:  71%|███████   | 3548/5000 [00:24<00:09, 146.33it/s]Running 5000 simulations.:  71%|███████▏  | 3563/5000 [00:24<00:09, 146.50it/s]Running 5000 simulations.:  72%|███████▏  | 3578/5000 [00:24<00:09, 146.79it/s]Running 5000 simulations.:  72%|███████▏  | 3593/5000 [00:24<00:09, 146.38it/s]Running 5000 simulations.:  72%|███████▏  | 3608/5000 [00:24<00:09, 146.28it/s]Running 5000 simulations.:  72%|███████▏  | 3623/5000 [00:24<00:09, 146.10it/s]Running 5000 simulations.:  73%|███████▎  | 3638/5000 [00:24<00:09, 146.09it/s]Running 5000 simulations.:  73%|███████▎  | 3653/5000 [00:25<00:09, 146.10it/s]Running 5000 simulations.:  73%|███████▎  | 3668/5000 [00:25<00:09, 145.91it/s]Running 5000 simulations.:  74%|███████▎  | 3683/5000 [00:25<00:09, 145.68it/s]Running 5000 simulations.:  74%|███████▍  | 3698/5000 [00:25<00:08, 146.03it/s]Running 5000 simulations.:  74%|███████▍  | 3713/5000 [00:25<00:08, 146.21it/s]Running 5000 simulations.:  75%|███████▍  | 3728/5000 [00:25<00:08, 146.58it/s]Running 5000 simulations.:  75%|███████▍  | 3743/5000 [00:25<00:08, 146.18it/s]Running 5000 simulations.:  75%|███████▌  | 3758/5000 [00:25<00:08, 146.26it/s]Running 5000 simulations.:  75%|███████▌  | 3773/5000 [00:25<00:08, 146.53it/s]Running 5000 simulations.:  76%|███████▌  | 3788/5000 [00:26<00:08, 146.80it/s]Running 5000 simulations.:  76%|███████▌  | 3803/5000 [00:26<00:08, 146.40it/s]Running 5000 simulations.:  76%|███████▋  | 3818/5000 [00:26<00:08, 146.56it/s]Running 5000 simulations.:  77%|███████▋  | 3833/5000 [00:26<00:08, 145.86it/s]Running 5000 simulations.:  77%|███████▋  | 3848/5000 [00:26<00:07, 145.52it/s]Running 5000 simulations.:  77%|███████▋  | 3863/5000 [00:26<00:07, 145.03it/s]Running 5000 simulations.:  78%|███████▊  | 3878/5000 [00:26<00:07, 145.27it/s]Running 5000 simulations.:  78%|███████▊  | 3893/5000 [00:26<00:07, 145.28it/s]Running 5000 simulations.:  78%|███████▊  | 3908/5000 [00:26<00:07, 146.30it/s]Running 5000 simulations.:  78%|███████▊  | 3923/5000 [00:26<00:07, 146.18it/s]Running 5000 simulations.:  79%|███████▉  | 3938/5000 [00:27<00:07, 146.29it/s]Running 5000 simulations.:  79%|███████▉  | 3953/5000 [00:27<00:07, 146.25it/s]Running 5000 simulations.:  79%|███████▉  | 3968/5000 [00:27<00:07, 146.06it/s]Running 5000 simulations.:  80%|███████▉  | 3983/5000 [00:27<00:06, 146.25it/s]Running 5000 simulations.:  80%|███████▉  | 3998/5000 [00:27<00:06, 145.80it/s]Running 5000 simulations.:  80%|████████  | 4013/5000 [00:27<00:06, 145.40it/s]Running 5000 simulations.:  81%|████████  | 4028/5000 [00:27<00:06, 145.60it/s]Running 5000 simulations.:  81%|████████  | 4043/5000 [00:27<00:06, 145.63it/s]Running 5000 simulations.:  81%|████████  | 4058/5000 [00:27<00:06, 146.11it/s]Running 5000 simulations.:  81%|████████▏ | 4073/5000 [00:27<00:06, 146.56it/s]Running 5000 simulations.:  82%|████████▏ | 4088/5000 [00:28<00:06, 146.74it/s]Running 5000 simulations.:  82%|████████▏ | 4103/5000 [00:28<00:06, 146.45it/s]Running 5000 simulations.:  82%|████████▏ | 4118/5000 [00:28<00:06, 146.48it/s]Running 5000 simulations.:  83%|████████▎ | 4133/5000 [00:28<00:05, 146.15it/s]Running 5000 simulations.:  83%|████████▎ | 4148/5000 [00:28<00:05, 146.10it/s]Running 5000 simulations.:  83%|████████▎ | 4163/5000 [00:28<00:05, 145.82it/s]Running 5000 simulations.:  84%|████████▎ | 4178/5000 [00:28<00:05, 145.92it/s]Running 5000 simulations.:  84%|████████▍ | 4193/5000 [00:28<00:05, 146.09it/s]Running 5000 simulations.:  84%|████████▍ | 4208/5000 [00:28<00:05, 146.39it/s]Running 5000 simulations.:  84%|████████▍ | 4223/5000 [00:28<00:05, 146.39it/s]Running 5000 simulations.:  85%|████████▍ | 4238/5000 [00:29<00:05, 145.98it/s]Running 5000 simulations.:  85%|████████▌ | 4253/5000 [00:29<00:05, 146.10it/s]Running 5000 simulations.:  85%|████████▌ | 4268/5000 [00:29<00:05, 146.31it/s]Running 5000 simulations.:  86%|████████▌ | 4283/5000 [00:29<00:04, 146.33it/s]Running 5000 simulations.:  86%|████████▌ | 4298/5000 [00:29<00:04, 146.49it/s]Running 5000 simulations.:  86%|████████▋ | 4313/5000 [00:29<00:04, 146.64it/s]Running 5000 simulations.:  87%|████████▋ | 4328/5000 [00:29<00:04, 146.89it/s]Running 5000 simulations.:  87%|████████▋ | 4343/5000 [00:29<00:04, 146.94it/s]Running 5000 simulations.:  87%|████████▋ | 4358/5000 [00:29<00:04, 147.29it/s]Running 5000 simulations.:  87%|████████▋ | 4373/5000 [00:30<00:04, 147.24it/s]Running 5000 simulations.:  88%|████████▊ | 4388/5000 [00:30<00:04, 147.10it/s]Running 5000 simulations.:  88%|████████▊ | 4403/5000 [00:30<00:04, 147.34it/s]Running 5000 simulations.:  88%|████████▊ | 4418/5000 [00:30<00:03, 147.38it/s]Running 5000 simulations.:  89%|████████▊ | 4433/5000 [00:30<00:03, 147.55it/s]Running 5000 simulations.:  89%|████████▉ | 4448/5000 [00:30<00:03, 147.44it/s]Running 5000 simulations.:  89%|████████▉ | 4463/5000 [00:30<00:03, 147.89it/s]Running 5000 simulations.:  90%|████████▉ | 4478/5000 [00:30<00:03, 148.10it/s]Running 5000 simulations.:  90%|████████▉ | 4493/5000 [00:30<00:03, 148.14it/s]Running 5000 simulations.:  90%|█████████ | 4508/5000 [00:30<00:03, 148.18it/s]Running 5000 simulations.:  90%|█████████ | 4523/5000 [00:31<00:03, 148.49it/s]Running 5000 simulations.:  91%|█████████ | 4538/5000 [00:31<00:03, 148.84it/s]Running 5000 simulations.:  91%|█████████ | 4553/5000 [00:31<00:03, 148.94it/s]Running 5000 simulations.:  91%|█████████▏| 4568/5000 [00:31<00:02, 148.41it/s]Running 5000 simulations.:  92%|█████████▏| 4583/5000 [00:31<00:02, 148.18it/s]Running 5000 simulations.:  92%|█████████▏| 4598/5000 [00:31<00:02, 148.37it/s]Running 5000 simulations.:  92%|█████████▏| 4613/5000 [00:31<00:02, 148.27it/s]Running 5000 simulations.:  93%|█████████▎| 4628/5000 [00:31<00:02, 148.38it/s]Running 5000 simulations.:  93%|█████████▎| 4643/5000 [00:31<00:02, 147.91it/s]Running 5000 simulations.:  93%|█████████▎| 4658/5000 [00:31<00:02, 147.48it/s]Running 5000 simulations.:  93%|█████████▎| 4673/5000 [00:32<00:02, 147.53it/s]Running 5000 simulations.:  94%|█████████▍| 4688/5000 [00:32<00:02, 147.70it/s]Running 5000 simulations.:  94%|█████████▍| 4703/5000 [00:32<00:02, 148.11it/s]Running 5000 simulations.:  94%|█████████▍| 4718/5000 [00:32<00:01, 148.35it/s]Running 5000 simulations.:  95%|█████████▍| 4733/5000 [00:32<00:01, 148.50it/s]Running 5000 simulations.:  95%|█████████▍| 4748/5000 [00:32<00:01, 148.61it/s]Running 5000 simulations.:  95%|█████████▌| 4763/5000 [00:32<00:01, 148.66it/s]Running 5000 simulations.:  96%|█████████▌| 4778/5000 [00:32<00:01, 148.44it/s]Running 5000 simulations.:  96%|█████████▌| 4793/5000 [00:32<00:01, 148.50it/s]Running 5000 simulations.:  96%|█████████▌| 4808/5000 [00:32<00:01, 148.05it/s]Running 5000 simulations.:  96%|█████████▋| 4823/5000 [00:33<00:01, 148.32it/s]Running 5000 simulations.:  97%|█████████▋| 4838/5000 [00:33<00:01, 148.48it/s]Running 5000 simulations.:  97%|█████████▋| 4853/5000 [00:33<00:00, 148.39it/s]Running 5000 simulations.:  97%|█████████▋| 4868/5000 [00:33<00:00, 148.48it/s]Running 5000 simulations.:  98%|█████████▊| 4883/5000 [00:33<00:00, 148.28it/s]Running 5000 simulations.:  98%|█████████▊| 4898/5000 [00:33<00:00, 148.10it/s]Running 5000 simulations.:  98%|█████████▊| 4913/5000 [00:33<00:00, 147.52it/s]Running 5000 simulations.:  99%|█████████▊| 4928/5000 [00:33<00:00, 147.34it/s]Running 5000 simulations.:  99%|█████████▉| 4943/5000 [00:33<00:00, 147.88it/s]Running 5000 simulations.:  99%|█████████▉| 4958/5000 [00:33<00:00, 147.92it/s]Running 5000 simulations.:  99%|█████████▉| 4973/5000 [00:34<00:00, 148.19it/s]Running 5000 simulations.: 100%|█████████▉| 4990/5000 [00:34<00:00, 152.95it/s]Running 5000 simulations.: 100%|██████████| 5000/5000 [00:34<00:00, 146.07it/s]
Running 5000 simulations.:   0%|          | 0/5000 [00:00<?, ?it/s]Running 5000 simulations.:   0%|          | 16/5000 [00:00<00:33, 150.35it/s]Running 5000 simulations.:   1%|          | 32/5000 [00:00<00:33, 150.50it/s]Running 5000 simulations.:   1%|          | 47/5000 [00:00<00:32, 150.34it/s]Running 5000 simulations.:   1%|▏         | 63/5000 [00:00<00:32, 150.32it/s]Running 5000 simulations.:   2%|▏         | 79/5000 [00:00<00:32, 150.29it/s]Running 5000 simulations.:   2%|▏         | 94/5000 [00:00<00:32, 149.88it/s]Running 5000 simulations.:   2%|▏         | 109/5000 [00:00<00:32, 149.54it/s]Running 5000 simulations.:   2%|▎         | 125/5000 [00:00<00:32, 150.04it/s]Running 5000 simulations.:   3%|▎         | 140/5000 [00:00<00:32, 149.95it/s]Running 5000 simulations.:   3%|▎         | 155/5000 [00:01<00:32, 149.65it/s]Running 5000 simulations.:   3%|▎         | 170/5000 [00:01<00:32, 149.65it/s]Running 5000 simulations.:   4%|▎         | 185/5000 [00:01<00:32, 148.83it/s]Running 5000 simulations.:   4%|▍         | 200/5000 [00:01<00:32, 148.99it/s]Running 5000 simulations.:   4%|▍         | 215/5000 [00:01<00:32, 148.93it/s]Running 5000 simulations.:   5%|▍         | 230/5000 [00:01<00:32, 148.53it/s]Running 5000 simulations.:   5%|▍         | 245/5000 [00:01<00:32, 148.11it/s]Running 5000 simulations.:   5%|▌         | 260/5000 [00:01<00:32, 148.07it/s]Running 5000 simulations.:   6%|▌         | 275/5000 [00:01<00:31, 148.27it/s]Running 5000 simulations.:   6%|▌         | 290/5000 [00:01<00:31, 148.60it/s]Running 5000 simulations.:   6%|▌         | 305/5000 [00:02<00:31, 148.67it/s]Running 5000 simulations.:   6%|▋         | 320/5000 [00:02<00:31, 148.73it/s]Running 5000 simulations.:   7%|▋         | 335/5000 [00:02<00:31, 149.06it/s]Running 5000 simulations.:   7%|▋         | 350/5000 [00:02<00:31, 149.14it/s]Running 5000 simulations.:   7%|▋         | 365/5000 [00:02<00:31, 148.98it/s]Running 5000 simulations.:   8%|▊         | 380/5000 [00:02<00:31, 148.22it/s]Running 5000 simulations.:   8%|▊         | 395/5000 [00:02<00:31, 148.17it/s]Running 5000 simulations.:   8%|▊         | 410/5000 [00:02<00:30, 148.21it/s]Running 5000 simulations.:   8%|▊         | 425/5000 [00:02<00:30, 148.52it/s]Running 5000 simulations.:   9%|▉         | 440/5000 [00:02<00:30, 148.37it/s]Running 5000 simulations.:   9%|▉         | 455/5000 [00:03<00:30, 148.28it/s]Running 5000 simulations.:   9%|▉         | 470/5000 [00:03<00:30, 148.43it/s]Running 5000 simulations.:  10%|▉         | 485/5000 [00:03<00:30, 147.99it/s]Running 5000 simulations.:  10%|█         | 500/5000 [00:03<00:30, 147.78it/s]Running 5000 simulations.:  10%|█         | 515/5000 [00:03<00:30, 147.44it/s]Running 5000 simulations.:  11%|█         | 530/5000 [00:03<00:30, 147.35it/s]Running 5000 simulations.:  11%|█         | 545/5000 [00:03<00:30, 146.88it/s]Running 5000 simulations.:  11%|█         | 560/5000 [00:03<00:30, 146.53it/s]Running 5000 simulations.:  12%|█▏        | 575/5000 [00:03<00:30, 147.04it/s]Running 5000 simulations.:  12%|█▏        | 590/5000 [00:03<00:30, 146.94it/s]Running 5000 simulations.:  12%|█▏        | 605/5000 [00:04<00:29, 146.96it/s]Running 5000 simulations.:  12%|█▏        | 620/5000 [00:04<00:29, 146.86it/s]Running 5000 simulations.:  13%|█▎        | 635/5000 [00:04<00:29, 146.89it/s]Running 5000 simulations.:  13%|█▎        | 650/5000 [00:04<00:29, 146.83it/s]Running 5000 simulations.:  13%|█▎        | 665/5000 [00:04<00:29, 147.12it/s]Running 5000 simulations.:  14%|█▎        | 680/5000 [00:04<00:29, 146.99it/s]Running 5000 simulations.:  14%|█▍        | 695/5000 [00:04<00:29, 146.00it/s]Running 5000 simulations.:  14%|█▍        | 710/5000 [00:04<00:29, 144.21it/s]Running 5000 simulations.:  14%|█▍        | 725/5000 [00:04<00:29, 142.83it/s]Running 5000 simulations.:  15%|█▍        | 740/5000 [00:05<00:29, 142.57it/s]Running 5000 simulations.:  15%|█▌        | 755/5000 [00:05<00:30, 140.90it/s]Running 5000 simulations.:  15%|█▌        | 770/5000 [00:05<00:29, 141.04it/s]Running 5000 simulations.:  16%|█▌        | 785/5000 [00:05<00:30, 140.25it/s]Running 5000 simulations.:  16%|█▌        | 800/5000 [00:05<00:29, 140.69it/s]Running 5000 simulations.:  16%|█▋        | 815/5000 [00:05<00:29, 141.27it/s]Running 5000 simulations.:  17%|█▋        | 830/5000 [00:05<00:29, 142.51it/s]Running 5000 simulations.:  17%|█▋        | 845/5000 [00:05<00:29, 142.60it/s]Running 5000 simulations.:  17%|█▋        | 860/5000 [00:05<00:29, 141.81it/s]Running 5000 simulations.:  18%|█▊        | 875/5000 [00:05<00:28, 142.32it/s]Running 5000 simulations.:  18%|█▊        | 890/5000 [00:06<00:28, 142.16it/s]Running 5000 simulations.:  18%|█▊        | 905/5000 [00:06<00:28, 142.57it/s]Running 5000 simulations.:  18%|█▊        | 920/5000 [00:06<00:30, 135.01it/s]Running 5000 simulations.:  19%|█▊        | 935/5000 [00:06<00:29, 137.12it/s]Running 5000 simulations.:  19%|█▉        | 950/5000 [00:06<00:29, 139.14it/s]Running 5000 simulations.:  19%|█▉        | 965/5000 [00:06<00:28, 140.23it/s]Running 5000 simulations.:  20%|█▉        | 980/5000 [00:06<00:28, 141.15it/s]Running 5000 simulations.:  20%|█▉        | 995/5000 [00:06<00:28, 140.06it/s]Running 5000 simulations.:  20%|██        | 1010/5000 [00:06<00:28, 140.59it/s]Running 5000 simulations.:  20%|██        | 1025/5000 [00:07<00:28, 141.30it/s]Running 5000 simulations.:  21%|██        | 1040/5000 [00:07<00:27, 142.47it/s]Running 5000 simulations.:  21%|██        | 1055/5000 [00:07<00:27, 142.20it/s]Running 5000 simulations.:  21%|██▏       | 1070/5000 [00:07<00:27, 140.88it/s]Running 5000 simulations.:  22%|██▏       | 1085/5000 [00:07<00:27, 140.49it/s]Running 5000 simulations.:  22%|██▏       | 1100/5000 [00:07<00:27, 140.63it/s]Running 5000 simulations.:  22%|██▏       | 1115/5000 [00:07<00:27, 141.04it/s]Running 5000 simulations.:  23%|██▎       | 1130/5000 [00:07<00:27, 141.04it/s]Running 5000 simulations.:  23%|██▎       | 1145/5000 [00:07<00:27, 141.13it/s]Running 5000 simulations.:  23%|██▎       | 1160/5000 [00:07<00:27, 141.68it/s]Running 5000 simulations.:  24%|██▎       | 1175/5000 [00:08<00:27, 141.50it/s]Running 5000 simulations.:  24%|██▍       | 1190/5000 [00:08<00:27, 140.75it/s]Running 5000 simulations.:  24%|██▍       | 1205/5000 [00:08<00:26, 140.99it/s]Running 5000 simulations.:  24%|██▍       | 1220/5000 [00:08<00:26, 141.55it/s]Running 5000 simulations.:  25%|██▍       | 1235/5000 [00:08<00:26, 141.74it/s]Running 5000 simulations.:  25%|██▌       | 1250/5000 [00:08<00:26, 141.10it/s]Running 5000 simulations.:  25%|██▌       | 1265/5000 [00:08<00:26, 141.22it/s]Running 5000 simulations.:  26%|██▌       | 1280/5000 [00:08<00:26, 141.60it/s]Running 5000 simulations.:  26%|██▌       | 1295/5000 [00:08<00:26, 141.54it/s]Running 5000 simulations.:  26%|██▌       | 1310/5000 [00:09<00:26, 141.85it/s]Running 5000 simulations.:  26%|██▋       | 1325/5000 [00:09<00:25, 143.36it/s]Running 5000 simulations.:  27%|██▋       | 1340/5000 [00:09<00:25, 145.25it/s]Running 5000 simulations.:  27%|██▋       | 1355/5000 [00:09<00:24, 146.15it/s]Running 5000 simulations.:  27%|██▋       | 1370/5000 [00:09<00:24, 146.83it/s]Running 5000 simulations.:  28%|██▊       | 1385/5000 [00:09<00:24, 146.88it/s]Running 5000 simulations.:  28%|██▊       | 1400/5000 [00:09<00:24, 147.20it/s]Running 5000 simulations.:  28%|██▊       | 1415/5000 [00:09<00:24, 147.64it/s]Running 5000 simulations.:  29%|██▊       | 1430/5000 [00:09<00:24, 148.11it/s]Running 5000 simulations.:  29%|██▉       | 1445/5000 [00:09<00:23, 148.45it/s]Running 5000 simulations.:  29%|██▉       | 1460/5000 [00:10<00:23, 148.34it/s]Running 5000 simulations.:  30%|██▉       | 1475/5000 [00:10<00:23, 148.06it/s]Running 5000 simulations.:  30%|██▉       | 1490/5000 [00:10<00:23, 147.66it/s]Running 5000 simulations.:  30%|███       | 1505/5000 [00:10<00:23, 147.52it/s]Running 5000 simulations.:  30%|███       | 1520/5000 [00:10<00:23, 147.95it/s]Running 5000 simulations.:  31%|███       | 1535/5000 [00:10<00:23, 147.73it/s]Running 5000 simulations.:  31%|███       | 1550/5000 [00:10<00:23, 147.46it/s]Running 5000 simulations.:  31%|███▏      | 1565/5000 [00:10<00:23, 147.89it/s]Running 5000 simulations.:  32%|███▏      | 1580/5000 [00:10<00:23, 147.18it/s]Running 5000 simulations.:  32%|███▏      | 1595/5000 [00:10<00:23, 147.01it/s]Running 5000 simulations.:  32%|███▏      | 1610/5000 [00:11<00:23, 146.91it/s]Running 5000 simulations.:  32%|███▎      | 1625/5000 [00:11<00:22, 147.00it/s]Running 5000 simulations.:  33%|███▎      | 1640/5000 [00:11<00:22, 147.15it/s]Running 5000 simulations.:  33%|███▎      | 1655/5000 [00:11<00:22, 147.41it/s]Running 5000 simulations.:  33%|███▎      | 1670/5000 [00:11<00:22, 147.46it/s]Running 5000 simulations.:  34%|███▎      | 1685/5000 [00:11<00:22, 146.89it/s]Running 5000 simulations.:  34%|███▍      | 1700/5000 [00:11<00:22, 146.64it/s]Running 5000 simulations.:  34%|███▍      | 1715/5000 [00:11<00:22, 146.44it/s]Running 5000 simulations.:  35%|███▍      | 1730/5000 [00:11<00:22, 146.50it/s]Running 5000 simulations.:  35%|███▍      | 1745/5000 [00:12<00:22, 146.13it/s]Running 5000 simulations.:  35%|███▌      | 1760/5000 [00:12<00:22, 145.92it/s]Running 5000 simulations.:  36%|███▌      | 1775/5000 [00:12<00:22, 145.94it/s]Running 5000 simulations.:  36%|███▌      | 1791/5000 [00:12<00:21, 147.17it/s]Running 5000 simulations.:  36%|███▌      | 1806/5000 [00:12<00:21, 146.82it/s]Running 5000 simulations.:  36%|███▋      | 1821/5000 [00:12<00:21, 146.57it/s]Running 5000 simulations.:  37%|███▋      | 1836/5000 [00:12<00:21, 146.70it/s]Running 5000 simulations.:  37%|███▋      | 1851/5000 [00:12<00:21, 145.47it/s]Running 5000 simulations.:  37%|███▋      | 1866/5000 [00:12<00:21, 145.55it/s]Running 5000 simulations.:  38%|███▊      | 1881/5000 [00:12<00:21, 145.68it/s]Running 5000 simulations.:  38%|███▊      | 1896/5000 [00:13<00:21, 146.33it/s]Running 5000 simulations.:  38%|███▊      | 1911/5000 [00:13<00:21, 146.85it/s]Running 5000 simulations.:  39%|███▊      | 1926/5000 [00:13<00:21, 145.94it/s]Running 5000 simulations.:  39%|███▉      | 1941/5000 [00:13<00:21, 145.65it/s]Running 5000 simulations.:  39%|███▉      | 1956/5000 [00:13<00:20, 146.28it/s]Running 5000 simulations.:  39%|███▉      | 1971/5000 [00:13<00:20, 146.64it/s]Running 5000 simulations.:  40%|███▉      | 1986/5000 [00:13<00:20, 146.72it/s]Running 5000 simulations.:  40%|████      | 2001/5000 [00:13<00:20, 146.98it/s]Running 5000 simulations.:  40%|████      | 2016/5000 [00:13<00:20, 145.78it/s]Running 5000 simulations.:  41%|████      | 2031/5000 [00:13<00:20, 144.45it/s]Running 5000 simulations.:  41%|████      | 2046/5000 [00:14<00:20, 143.18it/s]Running 5000 simulations.:  41%|████      | 2061/5000 [00:14<00:20, 141.25it/s]Running 5000 simulations.:  42%|████▏     | 2076/5000 [00:14<00:20, 140.55it/s]Running 5000 simulations.:  42%|████▏     | 2091/5000 [00:14<00:20, 139.31it/s]Running 5000 simulations.:  42%|████▏     | 2106/5000 [00:14<00:20, 139.64it/s]Running 5000 simulations.:  42%|████▏     | 2120/5000 [00:14<00:20, 139.62it/s]Running 5000 simulations.:  43%|████▎     | 2134/5000 [00:14<00:20, 138.74it/s]Running 5000 simulations.:  43%|████▎     | 2148/5000 [00:14<00:20, 139.07it/s]Running 5000 simulations.:  43%|████▎     | 2162/5000 [00:14<00:20, 138.11it/s]Running 5000 simulations.:  44%|████▎     | 2177/5000 [00:15<00:20, 139.39it/s]Running 5000 simulations.:  44%|████▍     | 2192/5000 [00:15<00:19, 141.54it/s]Running 5000 simulations.:  44%|████▍     | 2207/5000 [00:15<00:19, 143.20it/s]Running 5000 simulations.:  44%|████▍     | 2222/5000 [00:15<00:19, 144.39it/s]Running 5000 simulations.:  45%|████▍     | 2237/5000 [00:15<00:19, 145.36it/s]Running 5000 simulations.:  45%|████▌     | 2252/5000 [00:15<00:18, 145.86it/s]Running 5000 simulations.:  45%|████▌     | 2267/5000 [00:15<00:18, 146.00it/s]Running 5000 simulations.:  46%|████▌     | 2282/5000 [00:15<00:18, 146.27it/s]Running 5000 simulations.:  46%|████▌     | 2297/5000 [00:15<00:18, 146.48it/s]Running 5000 simulations.:  46%|████▌     | 2312/5000 [00:15<00:18, 147.09it/s]Running 5000 simulations.:  47%|████▋     | 2327/5000 [00:16<00:18, 147.54it/s]Running 5000 simulations.:  47%|████▋     | 2342/5000 [00:16<00:17, 147.82it/s]Running 5000 simulations.:  47%|████▋     | 2357/5000 [00:16<00:17, 147.23it/s]Running 5000 simulations.:  47%|████▋     | 2372/5000 [00:16<00:17, 147.64it/s]Running 5000 simulations.:  48%|████▊     | 2387/5000 [00:16<00:17, 147.58it/s]Running 5000 simulations.:  48%|████▊     | 2402/5000 [00:16<00:17, 147.58it/s]Running 5000 simulations.:  48%|████▊     | 2417/5000 [00:16<00:17, 147.43it/s]Running 5000 simulations.:  49%|████▊     | 2432/5000 [00:16<00:17, 147.36it/s]Running 5000 simulations.:  49%|████▉     | 2447/5000 [00:16<00:17, 147.77it/s]Running 5000 simulations.:  49%|████▉     | 2462/5000 [00:16<00:17, 147.97it/s]Running 5000 simulations.:  50%|████▉     | 2477/5000 [00:17<00:17, 148.10it/s]Running 5000 simulations.:  50%|████▉     | 2492/5000 [00:17<00:16, 147.77it/s]Running 5000 simulations.:  50%|█████     | 2507/5000 [00:17<00:16, 147.14it/s]Running 5000 simulations.:  50%|█████     | 2522/5000 [00:17<00:16, 147.36it/s]Running 5000 simulations.:  51%|█████     | 2537/5000 [00:17<00:16, 147.31it/s]Running 5000 simulations.:  51%|█████     | 2552/5000 [00:17<00:16, 147.49it/s]Running 5000 simulations.:  51%|█████▏    | 2567/5000 [00:17<00:16, 147.79it/s]Running 5000 simulations.:  52%|█████▏    | 2582/5000 [00:17<00:16, 148.18it/s]Running 5000 simulations.:  52%|█████▏    | 2597/5000 [00:17<00:16, 147.98it/s]Running 5000 simulations.:  52%|█████▏    | 2612/5000 [00:17<00:16, 147.80it/s]Running 5000 simulations.:  53%|█████▎    | 2627/5000 [00:18<00:16, 147.36it/s]Running 5000 simulations.:  53%|█████▎    | 2642/5000 [00:18<00:15, 147.39it/s]Running 5000 simulations.:  53%|█████▎    | 2657/5000 [00:18<00:15, 147.34it/s]Running 5000 simulations.:  53%|█████▎    | 2672/5000 [00:18<00:15, 147.02it/s]Running 5000 simulations.:  54%|█████▎    | 2687/5000 [00:18<00:15, 146.73it/s]Running 5000 simulations.:  54%|█████▍    | 2702/5000 [00:18<00:15, 146.89it/s]Running 5000 simulations.:  54%|█████▍    | 2717/5000 [00:18<00:15, 147.18it/s]Running 5000 simulations.:  55%|█████▍    | 2732/5000 [00:18<00:15, 147.30it/s]Running 5000 simulations.:  55%|█████▍    | 2747/5000 [00:18<00:15, 147.49it/s]Running 5000 simulations.:  55%|█████▌    | 2762/5000 [00:18<00:15, 147.45it/s]Running 5000 simulations.:  56%|█████▌    | 2777/5000 [00:19<00:15, 147.71it/s]Running 5000 simulations.:  56%|█████▌    | 2792/5000 [00:19<00:14, 147.67it/s]Running 5000 simulations.:  56%|█████▌    | 2807/5000 [00:19<00:14, 147.69it/s]Running 5000 simulations.:  56%|█████▋    | 2822/5000 [00:19<00:14, 146.85it/s]Running 5000 simulations.:  57%|█████▋    | 2837/5000 [00:19<00:14, 146.45it/s]Running 5000 simulations.:  57%|█████▋    | 2852/5000 [00:19<00:14, 146.62it/s]Running 5000 simulations.:  57%|█████▋    | 2867/5000 [00:19<00:14, 146.58it/s]Running 5000 simulations.:  58%|█████▊    | 2882/5000 [00:19<00:14, 146.79it/s]Running 5000 simulations.:  58%|█████▊    | 2897/5000 [00:19<00:14, 146.21it/s]Running 5000 simulations.:  58%|█████▊    | 2912/5000 [00:20<00:14, 146.24it/s]Running 5000 simulations.:  59%|█████▊    | 2927/5000 [00:20<00:14, 146.74it/s]Running 5000 simulations.:  59%|█████▉    | 2942/5000 [00:20<00:14, 146.81it/s]Running 5000 simulations.:  59%|█████▉    | 2957/5000 [00:20<00:13, 146.17it/s]Running 5000 simulations.:  59%|█████▉    | 2972/5000 [00:20<00:13, 146.28it/s]Running 5000 simulations.:  60%|█████▉    | 2987/5000 [00:20<00:13, 145.91it/s]Running 5000 simulations.:  60%|██████    | 3002/5000 [00:20<00:13, 144.47it/s]Running 5000 simulations.:  60%|██████    | 3017/5000 [00:20<00:14, 140.95it/s]Running 5000 simulations.:  61%|██████    | 3032/5000 [00:20<00:14, 139.93it/s]Running 5000 simulations.:  61%|██████    | 3047/5000 [00:20<00:13, 141.46it/s]Running 5000 simulations.:  61%|██████    | 3062/5000 [00:21<00:13, 142.94it/s]Running 5000 simulations.:  62%|██████▏   | 3077/5000 [00:21<00:13, 143.97it/s]Running 5000 simulations.:  62%|██████▏   | 3092/5000 [00:21<00:13, 144.14it/s]Running 5000 simulations.:  62%|██████▏   | 3107/5000 [00:21<00:13, 145.42it/s]Running 5000 simulations.:  62%|██████▏   | 3122/5000 [00:21<00:12, 145.76it/s]Running 5000 simulations.:  63%|██████▎   | 3137/5000 [00:21<00:12, 145.90it/s]Running 5000 simulations.:  63%|██████▎   | 3152/5000 [00:21<00:12, 145.39it/s]Running 5000 simulations.:  63%|██████▎   | 3167/5000 [00:21<00:12, 145.89it/s]Running 5000 simulations.:  64%|██████▎   | 3182/5000 [00:21<00:12, 145.98it/s]Running 5000 simulations.:  64%|██████▍   | 3197/5000 [00:21<00:12, 146.23it/s]Running 5000 simulations.:  64%|██████▍   | 3212/5000 [00:22<00:12, 146.11it/s]Running 5000 simulations.:  65%|██████▍   | 3227/5000 [00:22<00:12, 146.09it/s]Running 5000 simulations.:  65%|██████▍   | 3242/5000 [00:22<00:12, 145.77it/s]Running 5000 simulations.:  65%|██████▌   | 3257/5000 [00:22<00:11, 145.52it/s]Running 5000 simulations.:  65%|██████▌   | 3272/5000 [00:22<00:11, 145.81it/s]Running 5000 simulations.:  66%|██████▌   | 3287/5000 [00:22<00:11, 143.70it/s]Running 5000 simulations.:  66%|██████▌   | 3302/5000 [00:22<00:11, 142.61it/s]Running 5000 simulations.:  66%|██████▋   | 3317/5000 [00:22<00:11, 141.43it/s]Running 5000 simulations.:  67%|██████▋   | 3332/5000 [00:22<00:11, 140.53it/s]Running 5000 simulations.:  67%|██████▋   | 3347/5000 [00:23<00:11, 140.65it/s]Running 5000 simulations.:  67%|██████▋   | 3362/5000 [00:23<00:11, 140.64it/s]Running 5000 simulations.:  68%|██████▊   | 3377/5000 [00:23<00:11, 139.92it/s]Running 5000 simulations.:  68%|██████▊   | 3391/5000 [00:23<00:11, 139.62it/s]Running 5000 simulations.:  68%|██████▊   | 3406/5000 [00:23<00:11, 142.07it/s]Running 5000 simulations.:  68%|██████▊   | 3421/5000 [00:23<00:10, 143.65it/s]Running 5000 simulations.:  69%|██████▊   | 3436/5000 [00:23<00:10, 144.75it/s]Running 5000 simulations.:  69%|██████▉   | 3451/5000 [00:23<00:10, 145.38it/s]Running 5000 simulations.:  69%|██████▉   | 3466/5000 [00:23<00:10, 145.59it/s]Running 5000 simulations.:  70%|██████▉   | 3481/5000 [00:23<00:10, 146.25it/s]Running 5000 simulations.:  70%|██████▉   | 3496/5000 [00:24<00:10, 146.73it/s]Running 5000 simulations.:  70%|███████   | 3511/5000 [00:24<00:10, 147.18it/s]Running 5000 simulations.:  71%|███████   | 3526/5000 [00:24<00:10, 147.08it/s]Running 5000 simulations.:  71%|███████   | 3541/5000 [00:24<00:09, 146.88it/s]Running 5000 simulations.:  71%|███████   | 3556/5000 [00:24<00:09, 146.95it/s]Running 5000 simulations.:  71%|███████▏  | 3571/5000 [00:24<00:09, 147.22it/s]Running 5000 simulations.:  72%|███████▏  | 3586/5000 [00:24<00:09, 147.44it/s]Running 5000 simulations.:  72%|███████▏  | 3601/5000 [00:24<00:09, 147.68it/s]Running 5000 simulations.:  72%|███████▏  | 3616/5000 [00:24<00:09, 148.10it/s]Running 5000 simulations.:  73%|███████▎  | 3631/5000 [00:24<00:09, 148.29it/s]Running 5000 simulations.:  73%|███████▎  | 3646/5000 [00:25<00:09, 148.17it/s]Running 5000 simulations.:  73%|███████▎  | 3661/5000 [00:25<00:09, 147.95it/s]Running 5000 simulations.:  74%|███████▎  | 3676/5000 [00:25<00:08, 147.44it/s]Running 5000 simulations.:  74%|███████▍  | 3691/5000 [00:25<00:08, 147.54it/s]Running 5000 simulations.:  74%|███████▍  | 3706/5000 [00:25<00:08, 147.12it/s]Running 5000 simulations.:  74%|███████▍  | 3721/5000 [00:25<00:08, 147.04it/s]Running 5000 simulations.:  75%|███████▍  | 3736/5000 [00:25<00:08, 147.03it/s]Running 5000 simulations.:  75%|███████▌  | 3751/5000 [00:25<00:08, 147.14it/s]Running 5000 simulations.:  75%|███████▌  | 3766/5000 [00:25<00:08, 147.70it/s]Running 5000 simulations.:  76%|███████▌  | 3781/5000 [00:25<00:08, 147.70it/s]Running 5000 simulations.:  76%|███████▌  | 3796/5000 [00:26<00:08, 146.89it/s]Running 5000 simulations.:  76%|███████▌  | 3811/5000 [00:26<00:08, 146.84it/s]Running 5000 simulations.:  77%|███████▋  | 3826/5000 [00:26<00:08, 146.72it/s]Running 5000 simulations.:  77%|███████▋  | 3841/5000 [00:26<00:07, 146.92it/s]Running 5000 simulations.:  77%|███████▋  | 3856/5000 [00:26<00:07, 146.91it/s]Running 5000 simulations.:  77%|███████▋  | 3871/5000 [00:26<00:07, 147.44it/s]Running 5000 simulations.:  78%|███████▊  | 3886/5000 [00:26<00:07, 147.84it/s]Running 5000 simulations.:  78%|███████▊  | 3901/5000 [00:26<00:07, 147.83it/s]Running 5000 simulations.:  78%|███████▊  | 3916/5000 [00:26<00:07, 148.07it/s]Running 5000 simulations.:  79%|███████▊  | 3931/5000 [00:27<00:07, 147.73it/s]Running 5000 simulations.:  79%|███████▉  | 3946/5000 [00:27<00:07, 147.66it/s]Running 5000 simulations.:  79%|███████▉  | 3961/5000 [00:27<00:07, 147.69it/s]Running 5000 simulations.:  80%|███████▉  | 3976/5000 [00:27<00:06, 147.25it/s]Running 5000 simulations.:  80%|███████▉  | 3991/5000 [00:27<00:06, 147.41it/s]Running 5000 simulations.:  80%|████████  | 4006/5000 [00:27<00:06, 147.70it/s]Running 5000 simulations.:  80%|████████  | 4021/5000 [00:27<00:06, 147.07it/s]Running 5000 simulations.:  81%|████████  | 4036/5000 [00:27<00:06, 146.66it/s]Running 5000 simulations.:  81%|████████  | 4051/5000 [00:27<00:06, 146.73it/s]Running 5000 simulations.:  81%|████████▏ | 4066/5000 [00:27<00:06, 146.93it/s]Running 5000 simulations.:  82%|████████▏ | 4081/5000 [00:28<00:06, 147.15it/s]Running 5000 simulations.:  82%|████████▏ | 4096/5000 [00:28<00:06, 146.53it/s]Running 5000 simulations.:  82%|████████▏ | 4111/5000 [00:28<00:06, 145.55it/s]Running 5000 simulations.:  83%|████████▎ | 4126/5000 [00:28<00:05, 145.73it/s]Running 5000 simulations.:  83%|████████▎ | 4141/5000 [00:28<00:05, 146.47it/s]Running 5000 simulations.:  83%|████████▎ | 4156/5000 [00:28<00:05, 146.67it/s]Running 5000 simulations.:  83%|████████▎ | 4171/5000 [00:28<00:05, 146.76it/s]Running 5000 simulations.:  84%|████████▎ | 4186/5000 [00:28<00:05, 146.39it/s]Running 5000 simulations.:  84%|████████▍ | 4201/5000 [00:28<00:05, 146.42it/s]Running 5000 simulations.:  84%|████████▍ | 4216/5000 [00:28<00:05, 147.28it/s]Running 5000 simulations.:  85%|████████▍ | 4231/5000 [00:29<00:05, 147.44it/s]Running 5000 simulations.:  85%|████████▍ | 4246/5000 [00:29<00:05, 147.20it/s]Running 5000 simulations.:  85%|████████▌ | 4261/5000 [00:29<00:05, 147.42it/s]Running 5000 simulations.:  86%|████████▌ | 4276/5000 [00:29<00:04, 147.90it/s]Running 5000 simulations.:  86%|████████▌ | 4291/5000 [00:29<00:04, 147.43it/s]Running 5000 simulations.:  86%|████████▌ | 4306/5000 [00:29<00:04, 146.44it/s]Running 5000 simulations.:  86%|████████▋ | 4321/5000 [00:29<00:04, 146.50it/s]Running 5000 simulations.:  87%|████████▋ | 4337/5000 [00:29<00:04, 149.79it/s]Running 5000 simulations.:  87%|████████▋ | 4354/5000 [00:29<00:04, 152.87it/s]Running 5000 simulations.:  87%|████████▋ | 4370/5000 [00:29<00:04, 150.91it/s]Running 5000 simulations.:  88%|████████▊ | 4386/5000 [00:30<00:04, 149.79it/s]Running 5000 simulations.:  88%|████████▊ | 4401/5000 [00:30<00:04, 148.72it/s]Running 5000 simulations.:  88%|████████▊ | 4416/5000 [00:30<00:03, 148.10it/s]Running 5000 simulations.:  89%|████████▊ | 4431/5000 [00:30<00:03, 146.66it/s]Running 5000 simulations.:  89%|████████▉ | 4446/5000 [00:30<00:03, 145.58it/s]Running 5000 simulations.:  89%|████████▉ | 4461/5000 [00:30<00:03, 145.67it/s]Running 5000 simulations.:  90%|████████▉ | 4476/5000 [00:30<00:03, 145.34it/s]Running 5000 simulations.:  90%|████████▉ | 4491/5000 [00:30<00:03, 144.60it/s]Running 5000 simulations.:  90%|█████████ | 4506/5000 [00:30<00:03, 144.55it/s]Running 5000 simulations.:  90%|█████████ | 4521/5000 [00:31<00:03, 144.62it/s]Running 5000 simulations.:  91%|█████████ | 4536/5000 [00:31<00:03, 144.72it/s]Running 5000 simulations.:  91%|█████████ | 4551/5000 [00:31<00:03, 144.37it/s]Running 5000 simulations.:  91%|█████████▏| 4566/5000 [00:31<00:02, 144.83it/s]Running 5000 simulations.:  92%|█████████▏| 4581/5000 [00:31<00:02, 145.61it/s]Running 5000 simulations.:  92%|█████████▏| 4596/5000 [00:31<00:02, 145.59it/s]Running 5000 simulations.:  92%|█████████▏| 4611/5000 [00:31<00:02, 144.93it/s]Running 5000 simulations.:  93%|█████████▎| 4626/5000 [00:31<00:02, 145.14it/s]Running 5000 simulations.:  93%|█████████▎| 4641/5000 [00:31<00:02, 145.64it/s]Running 5000 simulations.:  93%|█████████▎| 4656/5000 [00:31<00:02, 145.37it/s]Running 5000 simulations.:  93%|█████████▎| 4671/5000 [00:32<00:02, 145.07it/s]Running 5000 simulations.:  94%|█████████▎| 4686/5000 [00:32<00:02, 145.38it/s]Running 5000 simulations.:  94%|█████████▍| 4701/5000 [00:32<00:02, 145.71it/s]Running 5000 simulations.:  94%|█████████▍| 4716/5000 [00:32<00:01, 146.16it/s]Running 5000 simulations.:  95%|█████████▍| 4731/5000 [00:32<00:01, 146.27it/s]Running 5000 simulations.:  95%|█████████▍| 4746/5000 [00:32<00:01, 146.03it/s]Running 5000 simulations.:  95%|█████████▌| 4761/5000 [00:32<00:01, 145.91it/s]Running 5000 simulations.:  96%|█████████▌| 4776/5000 [00:32<00:01, 144.88it/s]Running 5000 simulations.:  96%|█████████▌| 4791/5000 [00:32<00:01, 145.41it/s]Running 5000 simulations.:  96%|█████████▌| 4806/5000 [00:32<00:01, 146.21it/s]Running 5000 simulations.:  96%|█████████▋| 4821/5000 [00:33<00:01, 146.54it/s]Running 5000 simulations.:  97%|█████████▋| 4836/5000 [00:33<00:01, 146.63it/s]Running 5000 simulations.:  97%|█████████▋| 4851/5000 [00:33<00:01, 147.14it/s]Running 5000 simulations.:  97%|█████████▋| 4866/5000 [00:33<00:00, 147.54it/s]Running 5000 simulations.:  98%|█████████▊| 4881/5000 [00:33<00:00, 146.08it/s]Running 5000 simulations.:  98%|█████████▊| 4896/5000 [00:33<00:00, 140.93it/s]Running 5000 simulations.:  98%|█████████▊| 4911/5000 [00:33<00:00, 139.95it/s]Running 5000 simulations.:  99%|█████████▊| 4926/5000 [00:33<00:00, 138.95it/s]Running 5000 simulations.:  99%|█████████▉| 4940/5000 [00:33<00:00, 138.59it/s]Running 5000 simulations.:  99%|█████████▉| 4954/5000 [00:34<00:00, 137.94it/s]Running 5000 simulations.:  99%|█████████▉| 4968/5000 [00:34<00:00, 136.55it/s]Running 5000 simulations.: 100%|█████████▉| 4982/5000 [00:34<00:00, 135.71it/s]Running 5000 simulations.: 100%|█████████▉| 4996/5000 [00:34<00:00, 136.86it/s]Running 5000 simulations.: 100%|██████████| 5000/5000 [00:34<00:00, 145.49it/s]
Running 5000 simulations.:   0%|          | 0/5000 [00:00<?, ?it/s]Running 5000 simulations.:   0%|          | 16/5000 [00:00<00:32, 155.43it/s]Running 5000 simulations.:   1%|          | 32/5000 [00:00<00:32, 154.60it/s]Running 5000 simulations.:   1%|          | 48/5000 [00:00<00:32, 154.32it/s]Running 5000 simulations.:   1%|▏         | 64/5000 [00:00<00:32, 154.11it/s]Running 5000 simulations.:   2%|▏         | 80/5000 [00:00<00:32, 153.70it/s]Running 5000 simulations.:   2%|▏         | 96/5000 [00:00<00:31, 153.27it/s]Running 5000 simulations.:   2%|▏         | 112/5000 [00:00<00:31, 153.35it/s]Running 5000 simulations.:   3%|▎         | 128/5000 [00:00<00:31, 153.25it/s]Running 5000 simulations.:   3%|▎         | 144/5000 [00:00<00:31, 153.28it/s]Running 5000 simulations.:   3%|▎         | 160/5000 [00:01<00:31, 152.89it/s]Running 5000 simulations.:   4%|▎         | 175/5000 [00:01<00:31, 151.76it/s]Running 5000 simulations.:   4%|▍         | 190/5000 [00:01<00:31, 151.04it/s]Running 5000 simulations.:   4%|▍         | 205/5000 [00:01<00:31, 150.64it/s]Running 5000 simulations.:   4%|▍         | 221/5000 [00:01<00:31, 151.31it/s]Running 5000 simulations.:   5%|▍         | 237/5000 [00:01<00:31, 151.75it/s]Running 5000 simulations.:   5%|▌         | 253/5000 [00:01<00:31, 151.96it/s]Running 5000 simulations.:   5%|▌         | 269/5000 [00:01<00:31, 151.85it/s]Running 5000 simulations.:   6%|▌         | 285/5000 [00:01<00:31, 151.16it/s]Running 5000 simulations.:   6%|▌         | 301/5000 [00:01<00:31, 150.35it/s]Running 5000 simulations.:   6%|▋         | 317/5000 [00:02<00:31, 150.39it/s]Running 5000 simulations.:   7%|▋         | 333/5000 [00:02<00:31, 150.16it/s]Running 5000 simulations.:   7%|▋         | 349/5000 [00:02<00:30, 150.65it/s]Running 5000 simulations.:   7%|▋         | 365/5000 [00:02<00:30, 150.24it/s]Running 5000 simulations.:   8%|▊         | 381/5000 [00:02<00:30, 149.51it/s]Running 5000 simulations.:   8%|▊         | 396/5000 [00:02<00:30, 148.92it/s]Running 5000 simulations.:   8%|▊         | 411/5000 [00:02<00:30, 149.06it/s]Running 5000 simulations.:   9%|▊         | 427/5000 [00:02<00:30, 149.32it/s]Running 5000 simulations.:   9%|▉         | 443/5000 [00:02<00:30, 149.60it/s]Running 5000 simulations.:   9%|▉         | 458/5000 [00:03<00:30, 149.66it/s]Running 5000 simulations.:   9%|▉         | 473/5000 [00:03<00:30, 148.97it/s]Running 5000 simulations.:  10%|▉         | 488/5000 [00:03<00:30, 148.58it/s]Running 5000 simulations.:  10%|█         | 503/5000 [00:03<00:30, 148.26it/s]Running 5000 simulations.:  10%|█         | 518/5000 [00:03<00:30, 148.63it/s]Running 5000 simulations.:  11%|█         | 533/5000 [00:03<00:30, 148.83it/s]Running 5000 simulations.:  11%|█         | 548/5000 [00:03<00:29, 148.89it/s]Running 5000 simulations.:  11%|█▏        | 563/5000 [00:03<00:29, 149.01it/s]Running 5000 simulations.:  12%|█▏        | 578/5000 [00:03<00:29, 149.25it/s]Running 5000 simulations.:  12%|█▏        | 593/5000 [00:03<00:29, 149.00it/s]Running 5000 simulations.:  12%|█▏        | 609/5000 [00:04<00:29, 149.31it/s]Running 5000 simulations.:  12%|█▏        | 624/5000 [00:04<00:29, 148.87it/s]Running 5000 simulations.:  13%|█▎        | 640/5000 [00:04<00:29, 149.30it/s]Running 5000 simulations.:  13%|█▎        | 656/5000 [00:04<00:29, 149.68it/s]Running 5000 simulations.:  13%|█▎        | 671/5000 [00:04<00:28, 149.60it/s]Running 5000 simulations.:  14%|█▎        | 686/5000 [00:04<00:28, 149.10it/s]Running 5000 simulations.:  14%|█▍        | 701/5000 [00:04<00:28, 148.90it/s]Running 5000 simulations.:  14%|█▍        | 716/5000 [00:04<00:28, 148.96it/s]Running 5000 simulations.:  15%|█▍        | 731/5000 [00:04<00:28, 149.21it/s]Running 5000 simulations.:  15%|█▍        | 746/5000 [00:04<00:28, 149.15it/s]Running 5000 simulations.:  15%|█▌        | 761/5000 [00:05<00:28, 149.06it/s]Running 5000 simulations.:  16%|█▌        | 777/5000 [00:05<00:28, 149.39it/s]Running 5000 simulations.:  16%|█▌        | 793/5000 [00:05<00:28, 149.63it/s]Running 5000 simulations.:  16%|█▌        | 808/5000 [00:05<00:28, 148.77it/s]Running 5000 simulations.:  16%|█▋        | 823/5000 [00:05<00:28, 148.45it/s]Running 5000 simulations.:  17%|█▋        | 839/5000 [00:05<00:27, 148.95it/s]Running 5000 simulations.:  17%|█▋        | 854/5000 [00:05<00:27, 149.23it/s]Running 5000 simulations.:  17%|█▋        | 869/5000 [00:05<00:27, 149.02it/s]Running 5000 simulations.:  18%|█▊        | 885/5000 [00:05<00:27, 149.62it/s]Running 5000 simulations.:  18%|█▊        | 900/5000 [00:05<00:27, 149.00it/s]Running 5000 simulations.:  18%|█▊        | 915/5000 [00:06<00:27, 148.54it/s]Running 5000 simulations.:  19%|█▊        | 930/5000 [00:06<00:27, 148.50it/s]Running 5000 simulations.:  19%|█▉        | 945/5000 [00:06<00:27, 148.69it/s]Running 5000 simulations.:  19%|█▉        | 961/5000 [00:06<00:27, 149.32it/s]Running 5000 simulations.:  20%|█▉        | 977/5000 [00:06<00:26, 149.59it/s]Running 5000 simulations.:  20%|█▉        | 992/5000 [00:06<00:26, 149.60it/s]Running 5000 simulations.:  20%|██        | 1007/5000 [00:06<00:26, 149.35it/s]Running 5000 simulations.:  20%|██        | 1022/5000 [00:06<00:26, 149.50it/s]Running 5000 simulations.:  21%|██        | 1038/5000 [00:06<00:26, 149.75it/s]Running 5000 simulations.:  21%|██        | 1053/5000 [00:07<00:26, 149.10it/s]Running 5000 simulations.:  21%|██▏       | 1068/5000 [00:07<00:26, 148.97it/s]Running 5000 simulations.:  22%|██▏       | 1083/5000 [00:07<00:26, 149.00it/s]Running 5000 simulations.:  22%|██▏       | 1098/5000 [00:07<00:26, 149.22it/s]Running 5000 simulations.:  22%|██▏       | 1113/5000 [00:07<00:26, 149.38it/s]Running 5000 simulations.:  23%|██▎       | 1128/5000 [00:07<00:26, 148.87it/s]Running 5000 simulations.:  23%|██▎       | 1143/5000 [00:07<00:25, 148.79it/s]Running 5000 simulations.:  23%|██▎       | 1158/5000 [00:07<00:25, 148.32it/s]Running 5000 simulations.:  23%|██▎       | 1173/5000 [00:07<00:25, 148.51it/s]Running 5000 simulations.:  24%|██▍       | 1188/5000 [00:07<00:25, 148.43it/s]Running 5000 simulations.:  24%|██▍       | 1203/5000 [00:08<00:25, 148.41it/s]Running 5000 simulations.:  24%|██▍       | 1218/5000 [00:08<00:25, 148.61it/s]Running 5000 simulations.:  25%|██▍       | 1233/5000 [00:08<00:25, 148.57it/s]Running 5000 simulations.:  25%|██▍       | 1248/5000 [00:08<00:25, 148.44it/s]Running 5000 simulations.:  25%|██▌       | 1264/5000 [00:08<00:25, 148.95it/s]Running 5000 simulations.:  26%|██▌       | 1279/5000 [00:08<00:24, 148.88it/s]Running 5000 simulations.:  26%|██▌       | 1294/5000 [00:08<00:25, 147.07it/s]Running 5000 simulations.:  26%|██▌       | 1309/5000 [00:08<00:25, 145.78it/s]Running 5000 simulations.:  26%|██▋       | 1324/5000 [00:08<00:25, 145.48it/s]Running 5000 simulations.:  27%|██▋       | 1339/5000 [00:08<00:25, 145.10it/s]Running 5000 simulations.:  27%|██▋       | 1354/5000 [00:09<00:25, 145.36it/s]Running 5000 simulations.:  27%|██▋       | 1369/5000 [00:09<00:24, 145.86it/s]Running 5000 simulations.:  28%|██▊       | 1384/5000 [00:09<00:24, 145.53it/s]Running 5000 simulations.:  28%|██▊       | 1399/5000 [00:09<00:24, 144.33it/s]Running 5000 simulations.:  28%|██▊       | 1414/5000 [00:09<00:24, 143.99it/s]Running 5000 simulations.:  29%|██▊       | 1429/5000 [00:09<00:24, 143.86it/s]Running 5000 simulations.:  29%|██▉       | 1444/5000 [00:09<00:24, 144.16it/s]Running 5000 simulations.:  29%|██▉       | 1459/5000 [00:09<00:24, 144.31it/s]Running 5000 simulations.:  29%|██▉       | 1474/5000 [00:09<00:24, 144.08it/s]Running 5000 simulations.:  30%|██▉       | 1489/5000 [00:09<00:24, 144.63it/s]Running 5000 simulations.:  30%|███       | 1504/5000 [00:10<00:24, 144.43it/s]Running 5000 simulations.:  30%|███       | 1519/5000 [00:10<00:24, 144.19it/s]Running 5000 simulations.:  31%|███       | 1534/5000 [00:10<00:23, 145.70it/s]Running 5000 simulations.:  31%|███       | 1549/5000 [00:10<00:23, 146.92it/s]Running 5000 simulations.:  31%|███▏      | 1565/5000 [00:10<00:23, 148.03it/s]Running 5000 simulations.:  32%|███▏      | 1580/5000 [00:10<00:23, 148.35it/s]Running 5000 simulations.:  32%|███▏      | 1595/5000 [00:10<00:22, 148.70it/s]Running 5000 simulations.:  32%|███▏      | 1610/5000 [00:10<00:22, 149.06it/s]Running 5000 simulations.:  33%|███▎      | 1626/5000 [00:10<00:22, 149.79it/s]Running 5000 simulations.:  33%|███▎      | 1642/5000 [00:11<00:22, 150.53it/s]Running 5000 simulations.:  33%|███▎      | 1658/5000 [00:11<00:22, 150.95it/s]Running 5000 simulations.:  33%|███▎      | 1674/5000 [00:11<00:22, 150.51it/s]Running 5000 simulations.:  34%|███▍      | 1690/5000 [00:11<00:21, 150.86it/s]Running 5000 simulations.:  34%|███▍      | 1706/5000 [00:11<00:21, 151.04it/s]Running 5000 simulations.:  34%|███▍      | 1722/5000 [00:11<00:21, 151.22it/s]Running 5000 simulations.:  35%|███▍      | 1738/5000 [00:11<00:21, 151.53it/s]Running 5000 simulations.:  35%|███▌      | 1754/5000 [00:11<00:21, 151.05it/s]Running 5000 simulations.:  35%|███▌      | 1770/5000 [00:11<00:21, 151.23it/s]Running 5000 simulations.:  36%|███▌      | 1786/5000 [00:11<00:21, 150.87it/s]Running 5000 simulations.:  36%|███▌      | 1802/5000 [00:12<00:21, 150.67it/s]Running 5000 simulations.:  36%|███▋      | 1818/5000 [00:12<00:21, 150.44it/s]Running 5000 simulations.:  37%|███▋      | 1834/5000 [00:12<00:21, 148.96it/s]Running 5000 simulations.:  37%|███▋      | 1849/5000 [00:12<00:21, 149.17it/s]Running 5000 simulations.:  37%|███▋      | 1865/5000 [00:12<00:20, 149.66it/s]Running 5000 simulations.:  38%|███▊      | 1881/5000 [00:12<00:20, 150.68it/s]Running 5000 simulations.:  38%|███▊      | 1897/5000 [00:12<00:20, 150.99it/s]Running 5000 simulations.:  38%|███▊      | 1913/5000 [00:12<00:20, 149.63it/s]Running 5000 simulations.:  39%|███▊      | 1928/5000 [00:12<00:20, 149.32it/s]Running 5000 simulations.:  39%|███▉      | 1943/5000 [00:13<00:20, 148.90it/s]Running 5000 simulations.:  39%|███▉      | 1958/5000 [00:13<00:20, 148.89it/s]Running 5000 simulations.:  39%|███▉      | 1973/5000 [00:13<00:20, 148.94it/s]Running 5000 simulations.:  40%|███▉      | 1988/5000 [00:13<00:20, 149.25it/s]Running 5000 simulations.:  40%|████      | 2004/5000 [00:13<00:20, 149.71it/s]Running 5000 simulations.:  40%|████      | 2020/5000 [00:13<00:19, 150.40it/s]Running 5000 simulations.:  41%|████      | 2036/5000 [00:13<00:19, 150.31it/s]Running 5000 simulations.:  41%|████      | 2052/5000 [00:13<00:19, 149.89it/s]Running 5000 simulations.:  41%|████▏     | 2067/5000 [00:13<00:19, 149.49it/s]Running 5000 simulations.:  42%|████▏     | 2083/5000 [00:13<00:19, 149.78it/s]Running 5000 simulations.:  42%|████▏     | 2099/5000 [00:14<00:19, 149.91it/s]Running 5000 simulations.:  42%|████▏     | 2115/5000 [00:14<00:19, 150.15it/s]Running 5000 simulations.:  43%|████▎     | 2131/5000 [00:14<00:19, 150.06it/s]Running 5000 simulations.:  43%|████▎     | 2147/5000 [00:14<00:18, 150.36it/s]Running 5000 simulations.:  43%|████▎     | 2163/5000 [00:14<00:18, 149.96it/s]Running 5000 simulations.:  44%|████▎     | 2179/5000 [00:14<00:18, 150.43it/s]Running 5000 simulations.:  44%|████▍     | 2195/5000 [00:14<00:18, 150.50it/s]Running 5000 simulations.:  44%|████▍     | 2211/5000 [00:14<00:18, 150.58it/s]Running 5000 simulations.:  45%|████▍     | 2227/5000 [00:14<00:18, 150.86it/s]Running 5000 simulations.:  45%|████▍     | 2243/5000 [00:15<00:18, 150.19it/s]Running 5000 simulations.:  45%|████▌     | 2259/5000 [00:15<00:18, 149.21it/s]Running 5000 simulations.:  46%|████▌     | 2275/5000 [00:15<00:18, 149.60it/s]Running 5000 simulations.:  46%|████▌     | 2291/5000 [00:15<00:18, 150.22it/s]Running 5000 simulations.:  46%|████▌     | 2307/5000 [00:15<00:17, 150.76it/s]Running 5000 simulations.:  46%|████▋     | 2323/5000 [00:15<00:17, 150.85it/s]Running 5000 simulations.:  47%|████▋     | 2339/5000 [00:15<00:17, 150.42it/s]Running 5000 simulations.:  47%|████▋     | 2355/5000 [00:15<00:17, 150.20it/s]Running 5000 simulations.:  47%|████▋     | 2371/5000 [00:15<00:17, 150.43it/s]Running 5000 simulations.:  48%|████▊     | 2387/5000 [00:15<00:17, 150.69it/s]Running 5000 simulations.:  48%|████▊     | 2403/5000 [00:16<00:17, 150.85it/s]Running 5000 simulations.:  48%|████▊     | 2419/5000 [00:16<00:17, 151.02it/s]Running 5000 simulations.:  49%|████▊     | 2435/5000 [00:16<00:16, 151.35it/s]Running 5000 simulations.:  49%|████▉     | 2451/5000 [00:16<00:16, 150.60it/s]Running 5000 simulations.:  49%|████▉     | 2467/5000 [00:16<00:16, 149.55it/s]Running 5000 simulations.:  50%|████▉     | 2482/5000 [00:16<00:16, 148.89it/s]Running 5000 simulations.:  50%|████▉     | 2497/5000 [00:16<00:16, 149.13it/s]Running 5000 simulations.:  50%|█████     | 2513/5000 [00:16<00:16, 149.41it/s]Running 5000 simulations.:  51%|█████     | 2528/5000 [00:16<00:16, 149.08it/s]Running 5000 simulations.:  51%|█████     | 2543/5000 [00:17<00:16, 149.05it/s]Running 5000 simulations.:  51%|█████     | 2558/5000 [00:17<00:16, 148.33it/s]Running 5000 simulations.:  51%|█████▏    | 2573/5000 [00:17<00:16, 148.31it/s]Running 5000 simulations.:  52%|█████▏    | 2588/5000 [00:17<00:16, 148.50it/s]Running 5000 simulations.:  52%|█████▏    | 2603/5000 [00:17<00:16, 148.72it/s]Running 5000 simulations.:  52%|█████▏    | 2618/5000 [00:17<00:16, 148.54it/s]Running 5000 simulations.:  53%|█████▎    | 2633/5000 [00:17<00:15, 148.45it/s]Running 5000 simulations.:  53%|█████▎    | 2648/5000 [00:17<00:15, 148.60it/s]Running 5000 simulations.:  53%|█████▎    | 2663/5000 [00:17<00:15, 149.01it/s]Running 5000 simulations.:  54%|█████▎    | 2678/5000 [00:17<00:15, 149.05it/s]Running 5000 simulations.:  54%|█████▍    | 2693/5000 [00:18<00:15, 148.53it/s]Running 5000 simulations.:  54%|█████▍    | 2708/5000 [00:18<00:15, 148.41it/s]Running 5000 simulations.:  54%|█████▍    | 2723/5000 [00:18<00:15, 148.85it/s]Running 5000 simulations.:  55%|█████▍    | 2738/5000 [00:18<00:15, 149.17it/s]Running 5000 simulations.:  55%|█████▌    | 2754/5000 [00:18<00:14, 149.79it/s]Running 5000 simulations.:  55%|█████▌    | 2770/5000 [00:18<00:14, 150.31it/s]Running 5000 simulations.:  56%|█████▌    | 2786/5000 [00:18<00:14, 150.25it/s]Running 5000 simulations.:  56%|█████▌    | 2802/5000 [00:18<00:14, 149.50it/s]Running 5000 simulations.:  56%|█████▋    | 2817/5000 [00:18<00:14, 149.45it/s]Running 5000 simulations.:  57%|█████▋    | 2832/5000 [00:18<00:14, 149.00it/s]Running 5000 simulations.:  57%|█████▋    | 2847/5000 [00:19<00:14, 148.90it/s]Running 5000 simulations.:  57%|█████▋    | 2862/5000 [00:19<00:14, 147.97it/s]Running 5000 simulations.:  58%|█████▊    | 2877/5000 [00:19<00:14, 147.26it/s]Running 5000 simulations.:  58%|█████▊    | 2892/5000 [00:19<00:14, 147.02it/s]Running 5000 simulations.:  58%|█████▊    | 2907/5000 [00:19<00:14, 146.43it/s]Running 5000 simulations.:  58%|█████▊    | 2922/5000 [00:19<00:14, 145.30it/s]Running 5000 simulations.:  59%|█████▊    | 2937/5000 [00:19<00:14, 145.00it/s]Running 5000 simulations.:  59%|█████▉    | 2952/5000 [00:19<00:14, 145.53it/s]Running 5000 simulations.:  59%|█████▉    | 2967/5000 [00:19<00:13, 145.73it/s]Running 5000 simulations.:  60%|█████▉    | 2982/5000 [00:19<00:13, 146.25it/s]Running 5000 simulations.:  60%|█████▉    | 2997/5000 [00:20<00:13, 145.45it/s]Running 5000 simulations.:  60%|██████    | 3012/5000 [00:20<00:13, 144.91it/s]Running 5000 simulations.:  61%|██████    | 3027/5000 [00:20<00:13, 146.23it/s]Running 5000 simulations.:  61%|██████    | 3043/5000 [00:20<00:13, 147.98it/s]Running 5000 simulations.:  61%|██████    | 3059/5000 [00:20<00:13, 149.13it/s]Running 5000 simulations.:  62%|██████▏   | 3075/5000 [00:20<00:12, 149.91it/s]Running 5000 simulations.:  62%|██████▏   | 3091/5000 [00:20<00:12, 150.92it/s]Running 5000 simulations.:  62%|██████▏   | 3108/5000 [00:20<00:12, 156.06it/s]Running 5000 simulations.:  62%|██████▏   | 3124/5000 [00:20<00:12, 154.27it/s]Running 5000 simulations.:  63%|██████▎   | 3140/5000 [00:21<00:12, 152.70it/s]Running 5000 simulations.:  63%|██████▎   | 3156/5000 [00:21<00:12, 152.03it/s]Running 5000 simulations.:  63%|██████▎   | 3172/5000 [00:21<00:12, 151.63it/s]Running 5000 simulations.:  64%|██████▍   | 3188/5000 [00:21<00:12, 150.80it/s]Running 5000 simulations.:  64%|██████▍   | 3204/5000 [00:21<00:11, 150.47it/s]Running 5000 simulations.:  64%|██████▍   | 3220/5000 [00:21<00:11, 150.31it/s]Running 5000 simulations.:  65%|██████▍   | 3236/5000 [00:21<00:11, 149.02it/s]Running 5000 simulations.:  65%|██████▌   | 3252/5000 [00:21<00:11, 149.53it/s]Running 5000 simulations.:  65%|██████▌   | 3268/5000 [00:21<00:11, 150.00it/s]Running 5000 simulations.:  66%|██████▌   | 3284/5000 [00:21<00:11, 150.22it/s]Running 5000 simulations.:  66%|██████▌   | 3300/5000 [00:22<00:11, 150.55it/s]Running 5000 simulations.:  66%|██████▋   | 3316/5000 [00:22<00:11, 150.62it/s]Running 5000 simulations.:  67%|██████▋   | 3332/5000 [00:22<00:11, 150.90it/s]Running 5000 simulations.:  67%|██████▋   | 3348/5000 [00:22<00:10, 150.80it/s]Running 5000 simulations.:  67%|██████▋   | 3364/5000 [00:22<00:10, 150.41it/s]Running 5000 simulations.:  68%|██████▊   | 3380/5000 [00:22<00:10, 150.42it/s]Running 5000 simulations.:  68%|██████▊   | 3396/5000 [00:22<00:11, 145.13it/s]Running 5000 simulations.:  68%|██████▊   | 3412/5000 [00:22<00:10, 146.88it/s]Running 5000 simulations.:  69%|██████▊   | 3428/5000 [00:22<00:10, 148.11it/s]Running 5000 simulations.:  69%|██████▉   | 3444/5000 [00:23<00:10, 149.02it/s]Running 5000 simulations.:  69%|██████▉   | 3459/5000 [00:23<00:10, 148.80it/s]Running 5000 simulations.:  70%|██████▉   | 3475/5000 [00:23<00:10, 149.26it/s]Running 5000 simulations.:  70%|██████▉   | 3491/5000 [00:23<00:10, 150.06it/s]Running 5000 simulations.:  70%|███████   | 3507/5000 [00:23<00:09, 150.54it/s]Running 5000 simulations.:  70%|███████   | 3523/5000 [00:23<00:09, 150.73it/s]Running 5000 simulations.:  71%|███████   | 3539/5000 [00:23<00:09, 149.94it/s]Running 5000 simulations.:  71%|███████   | 3554/5000 [00:23<00:09, 149.67it/s]Running 5000 simulations.:  71%|███████▏  | 3570/5000 [00:23<00:09, 149.97it/s]Running 5000 simulations.:  72%|███████▏  | 3586/5000 [00:24<00:09, 150.17it/s]Running 5000 simulations.:  72%|███████▏  | 3602/5000 [00:24<00:09, 150.43it/s]Running 5000 simulations.:  72%|███████▏  | 3618/5000 [00:24<00:09, 150.12it/s]Running 5000 simulations.:  73%|███████▎  | 3634/5000 [00:24<00:09, 149.34it/s]Running 5000 simulations.:  73%|███████▎  | 3649/5000 [00:24<00:09, 148.84it/s]Running 5000 simulations.:  73%|███████▎  | 3664/5000 [00:24<00:08, 148.68it/s]Running 5000 simulations.:  74%|███████▎  | 3679/5000 [00:24<00:08, 148.13it/s]Running 5000 simulations.:  74%|███████▍  | 3694/5000 [00:24<00:08, 147.45it/s]Running 5000 simulations.:  74%|███████▍  | 3709/5000 [00:24<00:08, 146.82it/s]Running 5000 simulations.:  74%|███████▍  | 3724/5000 [00:24<00:08, 146.54it/s]Running 5000 simulations.:  75%|███████▍  | 3739/5000 [00:25<00:08, 145.74it/s]Running 5000 simulations.:  75%|███████▌  | 3754/5000 [00:25<00:08, 145.09it/s]Running 5000 simulations.:  75%|███████▌  | 3769/5000 [00:25<00:08, 145.17it/s]Running 5000 simulations.:  76%|███████▌  | 3784/5000 [00:25<00:08, 145.21it/s]Running 5000 simulations.:  76%|███████▌  | 3799/5000 [00:25<00:08, 145.46it/s]Running 5000 simulations.:  76%|███████▋  | 3814/5000 [00:25<00:08, 145.28it/s]Running 5000 simulations.:  77%|███████▋  | 3829/5000 [00:25<00:08, 146.27it/s]Running 5000 simulations.:  77%|███████▋  | 3844/5000 [00:25<00:07, 147.00it/s]Running 5000 simulations.:  77%|███████▋  | 3860/5000 [00:25<00:07, 147.96it/s]Running 5000 simulations.:  78%|███████▊  | 3876/5000 [00:25<00:07, 148.63it/s]Running 5000 simulations.:  78%|███████▊  | 3892/5000 [00:26<00:07, 149.11it/s]Running 5000 simulations.:  78%|███████▊  | 3907/5000 [00:26<00:07, 149.15it/s]Running 5000 simulations.:  78%|███████▊  | 3922/5000 [00:26<00:07, 149.38it/s]Running 5000 simulations.:  79%|███████▉  | 3938/5000 [00:26<00:07, 149.75it/s]Running 5000 simulations.:  79%|███████▉  | 3953/5000 [00:26<00:06, 149.82it/s]Running 5000 simulations.:  79%|███████▉  | 3968/5000 [00:26<00:06, 149.74it/s]Running 5000 simulations.:  80%|███████▉  | 3983/5000 [00:26<00:06, 149.56it/s]Running 5000 simulations.:  80%|███████▉  | 3998/5000 [00:26<00:06, 149.68it/s]Running 5000 simulations.:  80%|████████  | 4014/5000 [00:26<00:06, 150.03it/s]Running 5000 simulations.:  81%|████████  | 4030/5000 [00:27<00:06, 149.50it/s]Running 5000 simulations.:  81%|████████  | 4045/5000 [00:27<00:06, 149.15it/s]Running 5000 simulations.:  81%|████████  | 4060/5000 [00:27<00:06, 149.15it/s]Running 5000 simulations.:  82%|████████▏ | 4076/5000 [00:27<00:06, 149.61it/s]Running 5000 simulations.:  82%|████████▏ | 4092/5000 [00:27<00:06, 150.10it/s]Running 5000 simulations.:  82%|████████▏ | 4108/5000 [00:27<00:05, 150.27it/s]Running 5000 simulations.:  82%|████████▏ | 4124/5000 [00:27<00:05, 149.96it/s]Running 5000 simulations.:  83%|████████▎ | 4139/5000 [00:27<00:05, 149.74it/s]Running 5000 simulations.:  83%|████████▎ | 4154/5000 [00:27<00:05, 148.27it/s]Running 5000 simulations.:  83%|████████▎ | 4169/5000 [00:27<00:05, 147.05it/s]Running 5000 simulations.:  84%|████████▎ | 4184/5000 [00:28<00:05, 146.04it/s]Running 5000 simulations.:  84%|████████▍ | 4199/5000 [00:28<00:05, 145.71it/s]Running 5000 simulations.:  84%|████████▍ | 4214/5000 [00:28<00:05, 145.31it/s]Running 5000 simulations.:  85%|████████▍ | 4229/5000 [00:28<00:05, 144.85it/s]Running 5000 simulations.:  85%|████████▍ | 4244/5000 [00:28<00:05, 144.79it/s]Running 5000 simulations.:  85%|████████▌ | 4259/5000 [00:28<00:05, 143.84it/s]Running 5000 simulations.:  85%|████████▌ | 4274/5000 [00:28<00:05, 143.07it/s]Running 5000 simulations.:  86%|████████▌ | 4289/5000 [00:28<00:04, 144.89it/s]Running 5000 simulations.:  86%|████████▌ | 4305/5000 [00:28<00:04, 146.98it/s]Running 5000 simulations.:  86%|████████▋ | 4321/5000 [00:28<00:04, 148.55it/s]Running 5000 simulations.:  87%|████████▋ | 4337/5000 [00:29<00:04, 149.02it/s]Running 5000 simulations.:  87%|████████▋ | 4352/5000 [00:29<00:04, 149.04it/s]Running 5000 simulations.:  87%|████████▋ | 4368/5000 [00:29<00:04, 149.70it/s]Running 5000 simulations.:  88%|████████▊ | 4383/5000 [00:29<00:04, 149.57it/s]Running 5000 simulations.:  88%|████████▊ | 4399/5000 [00:29<00:04, 149.78it/s]Running 5000 simulations.:  88%|████████▊ | 4414/5000 [00:29<00:03, 149.56it/s]Running 5000 simulations.:  89%|████████▊ | 4429/5000 [00:29<00:03, 149.57it/s]Running 5000 simulations.:  89%|████████▉ | 4445/5000 [00:29<00:03, 150.04it/s]Running 5000 simulations.:  89%|████████▉ | 4461/5000 [00:29<00:03, 150.77it/s]Running 5000 simulations.:  90%|████████▉ | 4477/5000 [00:30<00:03, 151.11it/s]Running 5000 simulations.:  90%|████████▉ | 4493/5000 [00:30<00:03, 151.08it/s]Running 5000 simulations.:  90%|█████████ | 4509/5000 [00:30<00:03, 151.00it/s]Running 5000 simulations.:  90%|█████████ | 4525/5000 [00:30<00:03, 150.77it/s]Running 5000 simulations.:  91%|█████████ | 4541/5000 [00:30<00:03, 151.10it/s]Running 5000 simulations.:  91%|█████████ | 4557/5000 [00:30<00:02, 151.32it/s]Running 5000 simulations.:  91%|█████████▏| 4573/5000 [00:30<00:02, 151.05it/s]Running 5000 simulations.:  92%|█████████▏| 4589/5000 [00:30<00:02, 151.03it/s]Running 5000 simulations.:  92%|█████████▏| 4605/5000 [00:30<00:02, 151.07it/s]Running 5000 simulations.:  92%|█████████▏| 4621/5000 [00:30<00:02, 150.81it/s]Running 5000 simulations.:  93%|█████████▎| 4637/5000 [00:31<00:02, 150.60it/s]Running 5000 simulations.:  93%|█████████▎| 4653/5000 [00:31<00:02, 150.70it/s]Running 5000 simulations.:  93%|█████████▎| 4669/5000 [00:31<00:02, 150.76it/s]Running 5000 simulations.:  94%|█████████▎| 4685/5000 [00:31<00:02, 150.56it/s]Running 5000 simulations.:  94%|█████████▍| 4701/5000 [00:31<00:01, 150.04it/s]Running 5000 simulations.:  94%|█████████▍| 4717/5000 [00:31<00:01, 150.16it/s]Running 5000 simulations.:  95%|█████████▍| 4733/5000 [00:31<00:01, 149.76it/s]Running 5000 simulations.:  95%|█████████▍| 4749/5000 [00:31<00:01, 150.45it/s]Running 5000 simulations.:  95%|█████████▌| 4765/5000 [00:31<00:01, 150.55it/s]Running 5000 simulations.:  96%|█████████▌| 4781/5000 [00:32<00:01, 150.75it/s]Running 5000 simulations.:  96%|█████████▌| 4797/5000 [00:32<00:01, 150.89it/s]Running 5000 simulations.:  96%|█████████▋| 4813/5000 [00:32<00:01, 150.26it/s]Running 5000 simulations.:  97%|█████████▋| 4829/5000 [00:32<00:01, 150.37it/s]Running 5000 simulations.:  97%|█████████▋| 4845/5000 [00:32<00:01, 150.85it/s]Running 5000 simulations.:  97%|█████████▋| 4861/5000 [00:32<00:00, 150.96it/s]Running 5000 simulations.:  98%|█████████▊| 4877/5000 [00:32<00:00, 151.38it/s]Running 5000 simulations.:  98%|█████████▊| 4893/5000 [00:32<00:00, 151.51it/s]Running 5000 simulations.:  98%|█████████▊| 4909/5000 [00:32<00:00, 151.34it/s]Running 5000 simulations.:  98%|█████████▊| 4925/5000 [00:33<00:00, 150.77it/s]Running 5000 simulations.:  99%|█████████▉| 4941/5000 [00:33<00:00, 149.07it/s]Running 5000 simulations.:  99%|█████████▉| 4957/5000 [00:33<00:00, 149.62it/s]Running 5000 simulations.:  99%|█████████▉| 4973/5000 [00:33<00:00, 149.88it/s]Running 5000 simulations.: 100%|█████████▉| 4989/5000 [00:33<00:00, 150.59it/s]Running 5000 simulations.: 100%|██████████| 5000/5000 [00:33<00:00, 149.24it/s]
Running 5000 simulations.:   0%|          | 0/5000 [00:00<?, ?it/s]Running 5000 simulations.:   0%|          | 16/5000 [00:00<00:32, 155.18it/s]Running 5000 simulations.:   1%|          | 32/5000 [00:00<00:32, 154.92it/s]Running 5000 simulations.:   1%|          | 48/5000 [00:00<00:31, 155.06it/s]Running 5000 simulations.:   1%|▏         | 64/5000 [00:00<00:31, 154.63it/s]Running 5000 simulations.:   2%|▏         | 80/5000 [00:00<00:31, 154.50it/s]Running 5000 simulations.:   2%|▏         | 96/5000 [00:00<00:31, 153.85it/s]Running 5000 simulations.:   2%|▏         | 112/5000 [00:00<00:31, 153.57it/s]Running 5000 simulations.:   3%|▎         | 128/5000 [00:00<00:31, 153.21it/s]Running 5000 simulations.:   3%|▎         | 144/5000 [00:00<00:31, 153.04it/s]Running 5000 simulations.:   3%|▎         | 160/5000 [00:01<00:31, 153.12it/s]Running 5000 simulations.:   4%|▎         | 176/5000 [00:01<00:31, 153.21it/s]Running 5000 simulations.:   4%|▍         | 192/5000 [00:01<00:31, 152.82it/s]Running 5000 simulations.:   4%|▍         | 208/5000 [00:01<00:31, 152.64it/s]Running 5000 simulations.:   4%|▍         | 224/5000 [00:01<00:31, 152.41it/s]Running 5000 simulations.:   5%|▍         | 240/5000 [00:01<00:31, 152.44it/s]Running 5000 simulations.:   5%|▌         | 256/5000 [00:01<00:31, 152.47it/s]Running 5000 simulations.:   5%|▌         | 272/5000 [00:01<00:31, 152.30it/s]Running 5000 simulations.:   6%|▌         | 288/5000 [00:01<00:30, 152.70it/s]Running 5000 simulations.:   6%|▌         | 304/5000 [00:01<00:30, 152.63it/s]Running 5000 simulations.:   6%|▋         | 320/5000 [00:02<00:30, 152.24it/s]Running 5000 simulations.:   7%|▋         | 336/5000 [00:02<00:30, 152.01it/s]Running 5000 simulations.:   7%|▋         | 352/5000 [00:02<00:30, 151.17it/s]Running 5000 simulations.:   7%|▋         | 368/5000 [00:02<00:30, 149.56it/s]Running 5000 simulations.:   8%|▊         | 383/5000 [00:02<00:30, 148.99it/s]Running 5000 simulations.:   8%|▊         | 398/5000 [00:02<00:31, 148.39it/s]Running 5000 simulations.:   8%|▊         | 413/5000 [00:02<00:31, 147.60it/s]Running 5000 simulations.:   9%|▊         | 428/5000 [00:02<00:30, 147.79it/s]Running 5000 simulations.:   9%|▉         | 443/5000 [00:02<00:30, 148.05it/s]Running 5000 simulations.:   9%|▉         | 458/5000 [00:03<00:30, 148.12it/s]Running 5000 simulations.:   9%|▉         | 473/5000 [00:03<00:30, 147.52it/s]Running 5000 simulations.:  10%|▉         | 488/5000 [00:03<00:30, 147.42it/s]Running 5000 simulations.:  10%|█         | 503/5000 [00:03<00:30, 147.85it/s]Running 5000 simulations.:  10%|█         | 518/5000 [00:03<00:30, 148.44it/s]Running 5000 simulations.:  11%|█         | 533/5000 [00:03<00:30, 148.27it/s]Running 5000 simulations.:  11%|█         | 548/5000 [00:03<00:30, 148.06it/s]Running 5000 simulations.:  11%|█▏        | 563/5000 [00:03<00:30, 147.79it/s]Running 5000 simulations.:  12%|█▏        | 578/5000 [00:03<00:29, 147.83it/s]Running 5000 simulations.:  12%|█▏        | 593/5000 [00:03<00:29, 147.61it/s]Running 5000 simulations.:  12%|█▏        | 608/5000 [00:04<00:30, 145.98it/s]Running 5000 simulations.:  12%|█▏        | 623/5000 [00:04<00:30, 144.85it/s]Running 5000 simulations.:  13%|█▎        | 638/5000 [00:04<00:30, 144.97it/s]Running 5000 simulations.:  13%|█▎        | 653/5000 [00:04<00:30, 144.72it/s]Running 5000 simulations.:  13%|█▎        | 668/5000 [00:04<00:29, 145.40it/s]Running 5000 simulations.:  14%|█▎        | 683/5000 [00:04<00:29, 145.91it/s]Running 5000 simulations.:  14%|█▍        | 698/5000 [00:04<00:29, 146.24it/s]Running 5000 simulations.:  14%|█▍        | 713/5000 [00:04<00:29, 146.33it/s]Running 5000 simulations.:  15%|█▍        | 728/5000 [00:04<00:29, 146.98it/s]Running 5000 simulations.:  15%|█▍        | 743/5000 [00:04<00:29, 146.62it/s]Running 5000 simulations.:  15%|█▌        | 758/5000 [00:05<00:28, 147.13it/s]Running 5000 simulations.:  15%|█▌        | 774/5000 [00:05<00:28, 148.11it/s]Running 5000 simulations.:  16%|█▌        | 790/5000 [00:05<00:28, 149.06it/s]Running 5000 simulations.:  16%|█▌        | 806/5000 [00:05<00:28, 149.58it/s]Running 5000 simulations.:  16%|█▋        | 822/5000 [00:05<00:27, 150.06it/s]Running 5000 simulations.:  17%|█▋        | 838/5000 [00:05<00:27, 150.03it/s]Running 5000 simulations.:  17%|█▋        | 854/5000 [00:05<00:27, 150.16it/s]Running 5000 simulations.:  17%|█▋        | 870/5000 [00:05<00:27, 150.10it/s]Running 5000 simulations.:  18%|█▊        | 886/5000 [00:05<00:27, 150.31it/s]Running 5000 simulations.:  18%|█▊        | 902/5000 [00:06<00:27, 150.37it/s]Running 5000 simulations.:  18%|█▊        | 918/5000 [00:06<00:27, 150.43it/s]Running 5000 simulations.:  19%|█▊        | 934/5000 [00:06<00:27, 150.52it/s]Running 5000 simulations.:  19%|█▉        | 950/5000 [00:06<00:26, 150.76it/s]Running 5000 simulations.:  19%|█▉        | 968/5000 [00:06<00:25, 156.12it/s]Running 5000 simulations.:  20%|█▉        | 986/5000 [00:06<00:25, 160.01it/s]Running 5000 simulations.:  20%|██        | 1003/5000 [00:06<00:25, 156.84it/s]Running 5000 simulations.:  20%|██        | 1019/5000 [00:06<00:25, 155.08it/s]Running 5000 simulations.:  21%|██        | 1035/5000 [00:06<00:25, 153.94it/s]Running 5000 simulations.:  21%|██        | 1051/5000 [00:06<00:25, 153.15it/s]Running 5000 simulations.:  21%|██▏       | 1067/5000 [00:07<00:25, 152.53it/s]Running 5000 simulations.:  22%|██▏       | 1083/5000 [00:07<00:25, 151.95it/s]Running 5000 simulations.:  22%|██▏       | 1099/5000 [00:07<00:25, 151.83it/s]Running 5000 simulations.:  22%|██▏       | 1115/5000 [00:07<00:25, 151.52it/s]Running 5000 simulations.:  23%|██▎       | 1131/5000 [00:07<00:25, 151.33it/s]Running 5000 simulations.:  23%|██▎       | 1147/5000 [00:07<00:25, 150.99it/s]Running 5000 simulations.:  23%|██▎       | 1163/5000 [00:07<00:25, 149.10it/s]Running 5000 simulations.:  24%|██▎       | 1179/5000 [00:07<00:25, 149.58it/s]Running 5000 simulations.:  24%|██▍       | 1195/5000 [00:07<00:25, 149.84it/s]Running 5000 simulations.:  24%|██▍       | 1211/5000 [00:08<00:25, 150.40it/s]Running 5000 simulations.:  25%|██▍       | 1227/5000 [00:08<00:25, 150.53it/s]Running 5000 simulations.:  25%|██▍       | 1243/5000 [00:08<00:24, 150.60it/s]Running 5000 simulations.:  25%|██▌       | 1259/5000 [00:08<00:24, 150.68it/s]Running 5000 simulations.:  26%|██▌       | 1275/5000 [00:08<00:24, 150.55it/s]Running 5000 simulations.:  26%|██▌       | 1291/5000 [00:08<00:24, 149.66it/s]Running 5000 simulations.:  26%|██▌       | 1306/5000 [00:08<00:24, 149.70it/s]Running 5000 simulations.:  26%|██▋       | 1322/5000 [00:08<00:24, 150.09it/s]Running 5000 simulations.:  27%|██▋       | 1338/5000 [00:08<00:24, 150.28it/s]Running 5000 simulations.:  27%|██▋       | 1354/5000 [00:09<00:24, 150.21it/s]Running 5000 simulations.:  27%|██▋       | 1370/5000 [00:09<00:24, 150.36it/s]Running 5000 simulations.:  28%|██▊       | 1386/5000 [00:09<00:24, 150.13it/s]Running 5000 simulations.:  28%|██▊       | 1402/5000 [00:09<00:23, 150.33it/s]Running 5000 simulations.:  28%|██▊       | 1418/5000 [00:09<00:23, 150.47it/s]Running 5000 simulations.:  29%|██▊       | 1434/5000 [00:09<00:23, 150.79it/s]Running 5000 simulations.:  29%|██▉       | 1450/5000 [00:09<00:23, 150.58it/s]Running 5000 simulations.:  29%|██▉       | 1466/5000 [00:09<00:23, 150.62it/s]Running 5000 simulations.:  30%|██▉       | 1482/5000 [00:09<00:23, 150.37it/s]Running 5000 simulations.:  30%|██▉       | 1498/5000 [00:09<00:23, 150.51it/s]Running 5000 simulations.:  30%|███       | 1514/5000 [00:10<00:23, 150.36it/s]Running 5000 simulations.:  31%|███       | 1530/5000 [00:10<00:23, 150.49it/s]Running 5000 simulations.:  31%|███       | 1546/5000 [00:10<00:22, 150.44it/s]Running 5000 simulations.:  31%|███       | 1562/5000 [00:10<00:22, 150.43it/s]Running 5000 simulations.:  32%|███▏      | 1578/5000 [00:10<00:22, 150.55it/s]Running 5000 simulations.:  32%|███▏      | 1594/5000 [00:10<00:22, 150.52it/s]Running 5000 simulations.:  32%|███▏      | 1610/5000 [00:10<00:22, 150.51it/s]Running 5000 simulations.:  33%|███▎      | 1626/5000 [00:10<00:22, 150.40it/s]Running 5000 simulations.:  33%|███▎      | 1642/5000 [00:10<00:22, 150.49it/s]Running 5000 simulations.:  33%|███▎      | 1658/5000 [00:11<00:22, 150.36it/s]Running 5000 simulations.:  33%|███▎      | 1674/5000 [00:11<00:22, 150.34it/s]Running 5000 simulations.:  34%|███▍      | 1690/5000 [00:11<00:22, 150.34it/s]Running 5000 simulations.:  34%|███▍      | 1706/5000 [00:11<00:21, 150.20it/s]Running 5000 simulations.:  34%|███▍      | 1722/5000 [00:11<00:21, 149.95it/s]Running 5000 simulations.:  35%|███▍      | 1738/5000 [00:11<00:21, 150.20it/s]Running 5000 simulations.:  35%|███▌      | 1754/5000 [00:11<00:21, 150.30it/s]Running 5000 simulations.:  35%|███▌      | 1770/5000 [00:11<00:21, 150.48it/s]Running 5000 simulations.:  36%|███▌      | 1786/5000 [00:11<00:21, 150.21it/s]Running 5000 simulations.:  36%|███▌      | 1802/5000 [00:11<00:21, 150.06it/s]Running 5000 simulations.:  36%|███▋      | 1818/5000 [00:12<00:21, 149.99it/s]Running 5000 simulations.:  37%|███▋      | 1833/5000 [00:12<00:21, 149.74it/s]Running 5000 simulations.:  37%|███▋      | 1849/5000 [00:12<00:21, 149.93it/s]Running 5000 simulations.:  37%|███▋      | 1864/5000 [00:12<00:20, 149.62it/s]Running 5000 simulations.:  38%|███▊      | 1880/5000 [00:12<00:20, 149.81it/s]Running 5000 simulations.:  38%|███▊      | 1895/5000 [00:12<00:20, 149.79it/s]Running 5000 simulations.:  38%|███▊      | 1910/5000 [00:12<00:20, 149.80it/s]Running 5000 simulations.:  38%|███▊      | 1925/5000 [00:12<00:20, 149.68it/s]Running 5000 simulations.:  39%|███▉      | 1940/5000 [00:12<00:20, 149.71it/s]Running 5000 simulations.:  39%|███▉      | 1955/5000 [00:13<00:20, 149.69it/s]Running 5000 simulations.:  39%|███▉      | 1970/5000 [00:13<00:20, 149.58it/s]Running 5000 simulations.:  40%|███▉      | 1986/5000 [00:13<00:20, 150.22it/s]Running 5000 simulations.:  40%|████      | 2002/5000 [00:13<00:19, 150.28it/s]Running 5000 simulations.:  40%|████      | 2018/5000 [00:13<00:19, 150.21it/s]Running 5000 simulations.:  41%|████      | 2034/5000 [00:13<00:19, 150.25it/s]Running 5000 simulations.:  41%|████      | 2050/5000 [00:13<00:19, 149.79it/s]Running 5000 simulations.:  41%|████▏     | 2065/5000 [00:13<00:19, 149.47it/s]Running 5000 simulations.:  42%|████▏     | 2080/5000 [00:13<00:19, 149.57it/s]Running 5000 simulations.:  42%|████▏     | 2095/5000 [00:13<00:19, 149.51it/s]Running 5000 simulations.:  42%|████▏     | 2110/5000 [00:14<00:19, 149.31it/s]Running 5000 simulations.:  42%|████▎     | 2125/5000 [00:14<00:19, 149.36it/s]Running 5000 simulations.:  43%|████▎     | 2140/5000 [00:14<00:19, 149.54it/s]Running 5000 simulations.:  43%|████▎     | 2155/5000 [00:14<00:19, 149.57it/s]Running 5000 simulations.:  43%|████▎     | 2170/5000 [00:14<00:18, 149.60it/s]Running 5000 simulations.:  44%|████▎     | 2185/5000 [00:14<00:18, 149.64it/s]Running 5000 simulations.:  44%|████▍     | 2201/5000 [00:14<00:18, 149.96it/s]Running 5000 simulations.:  44%|████▍     | 2217/5000 [00:14<00:18, 149.97it/s]Running 5000 simulations.:  45%|████▍     | 2232/5000 [00:14<00:18, 149.86it/s]Running 5000 simulations.:  45%|████▍     | 2248/5000 [00:14<00:18, 149.86it/s]Running 5000 simulations.:  45%|████▌     | 2263/5000 [00:15<00:18, 149.67it/s]Running 5000 simulations.:  46%|████▌     | 2278/5000 [00:15<00:18, 149.75it/s]Running 5000 simulations.:  46%|████▌     | 2294/5000 [00:15<00:18, 149.94it/s]Running 5000 simulations.:  46%|████▌     | 2309/5000 [00:15<00:17, 149.77it/s]Running 5000 simulations.:  46%|████▋     | 2324/5000 [00:15<00:17, 149.80it/s]Running 5000 simulations.:  47%|████▋     | 2339/5000 [00:15<00:17, 149.54it/s]Running 5000 simulations.:  47%|████▋     | 2354/5000 [00:15<00:17, 149.32it/s]Running 5000 simulations.:  47%|████▋     | 2369/5000 [00:15<00:17, 149.22it/s]Running 5000 simulations.:  48%|████▊     | 2384/5000 [00:15<00:17, 148.99it/s]Running 5000 simulations.:  48%|████▊     | 2399/5000 [00:15<00:17, 148.83it/s]Running 5000 simulations.:  48%|████▊     | 2414/5000 [00:16<00:17, 148.87it/s]Running 5000 simulations.:  49%|████▊     | 2430/5000 [00:16<00:17, 149.26it/s]Running 5000 simulations.:  49%|████▉     | 2445/5000 [00:16<00:17, 149.14it/s]Running 5000 simulations.:  49%|████▉     | 2460/5000 [00:16<00:17, 148.86it/s]Running 5000 simulations.:  50%|████▉     | 2475/5000 [00:16<00:16, 148.83it/s]Running 5000 simulations.:  50%|████▉     | 2490/5000 [00:16<00:16, 148.91it/s]Running 5000 simulations.:  50%|█████     | 2505/5000 [00:16<00:17, 142.74it/s]Running 5000 simulations.:  50%|█████     | 2520/5000 [00:16<00:17, 144.74it/s]Running 5000 simulations.:  51%|█████     | 2536/5000 [00:16<00:16, 146.37it/s]Running 5000 simulations.:  51%|█████     | 2551/5000 [00:17<00:16, 147.01it/s]Running 5000 simulations.:  51%|█████▏    | 2566/5000 [00:17<00:16, 147.77it/s]Running 5000 simulations.:  52%|█████▏    | 2581/5000 [00:17<00:16, 148.38it/s]Running 5000 simulations.:  52%|█████▏    | 2596/5000 [00:17<00:16, 148.77it/s]Running 5000 simulations.:  52%|█████▏    | 2611/5000 [00:17<00:16, 148.89it/s]Running 5000 simulations.:  53%|█████▎    | 2626/5000 [00:17<00:15, 148.97it/s]Running 5000 simulations.:  53%|█████▎    | 2642/5000 [00:17<00:15, 149.31it/s]Running 5000 simulations.:  53%|█████▎    | 2657/5000 [00:17<00:15, 149.15it/s]Running 5000 simulations.:  53%|█████▎    | 2672/5000 [00:17<00:15, 149.33it/s]Running 5000 simulations.:  54%|█████▎    | 2687/5000 [00:17<00:15, 149.37it/s]Running 5000 simulations.:  54%|█████▍    | 2702/5000 [00:18<00:15, 149.55it/s]Running 5000 simulations.:  54%|█████▍    | 2717/5000 [00:18<00:15, 149.38it/s]Running 5000 simulations.:  55%|█████▍    | 2733/5000 [00:18<00:15, 149.70it/s]Running 5000 simulations.:  55%|█████▍    | 2748/5000 [00:18<00:15, 149.48it/s]Running 5000 simulations.:  55%|█████▌    | 2763/5000 [00:18<00:14, 149.29it/s]Running 5000 simulations.:  56%|█████▌    | 2778/5000 [00:18<00:14, 149.23it/s]Running 5000 simulations.:  56%|█████▌    | 2793/5000 [00:18<00:14, 149.30it/s]Running 5000 simulations.:  56%|█████▌    | 2808/5000 [00:18<00:14, 149.10it/s]Running 5000 simulations.:  56%|█████▋    | 2823/5000 [00:18<00:14, 149.22it/s]Running 5000 simulations.:  57%|█████▋    | 2838/5000 [00:18<00:14, 149.26it/s]Running 5000 simulations.:  57%|█████▋    | 2853/5000 [00:19<00:14, 149.32it/s]Running 5000 simulations.:  57%|█████▋    | 2869/5000 [00:19<00:14, 149.55it/s]Running 5000 simulations.:  58%|█████▊    | 2884/5000 [00:19<00:14, 149.40it/s]Running 5000 simulations.:  58%|█████▊    | 2899/5000 [00:19<00:14, 149.40it/s]Running 5000 simulations.:  58%|█████▊    | 2914/5000 [00:19<00:13, 149.21it/s]Running 5000 simulations.:  59%|█████▊    | 2929/5000 [00:19<00:13, 149.01it/s]Running 5000 simulations.:  59%|█████▉    | 2945/5000 [00:19<00:13, 149.43it/s]Running 5000 simulations.:  59%|█████▉    | 2960/5000 [00:19<00:13, 149.57it/s]Running 5000 simulations.:  60%|█████▉    | 2975/5000 [00:19<00:13, 149.68it/s]Running 5000 simulations.:  60%|█████▉    | 2990/5000 [00:19<00:13, 149.69it/s]Running 5000 simulations.:  60%|██████    | 3005/5000 [00:20<00:13, 149.53it/s]Running 5000 simulations.:  60%|██████    | 3020/5000 [00:20<00:13, 148.89it/s]Running 5000 simulations.:  61%|██████    | 3035/5000 [00:20<00:13, 149.00it/s]Running 5000 simulations.:  61%|██████    | 3050/5000 [00:20<00:13, 148.87it/s]Running 5000 simulations.:  61%|██████▏   | 3065/5000 [00:20<00:13, 148.41it/s]Running 5000 simulations.:  62%|██████▏   | 3080/5000 [00:20<00:12, 148.52it/s]Running 5000 simulations.:  62%|██████▏   | 3095/5000 [00:20<00:12, 148.69it/s]Running 5000 simulations.:  62%|██████▏   | 3110/5000 [00:20<00:12, 148.76it/s]Running 5000 simulations.:  62%|██████▎   | 3125/5000 [00:20<00:12, 148.72it/s]Running 5000 simulations.:  63%|██████▎   | 3140/5000 [00:20<00:12, 147.80it/s]Running 5000 simulations.:  63%|██████▎   | 3155/5000 [00:21<00:12, 147.64it/s]Running 5000 simulations.:  63%|██████▎   | 3170/5000 [00:21<00:12, 148.15it/s]Running 5000 simulations.:  64%|██████▎   | 3185/5000 [00:21<00:12, 148.34it/s]Running 5000 simulations.:  64%|██████▍   | 3201/5000 [00:21<00:12, 148.84it/s]Running 5000 simulations.:  64%|██████▍   | 3217/5000 [00:21<00:11, 149.19it/s]Running 5000 simulations.:  65%|██████▍   | 3232/5000 [00:21<00:11, 149.32it/s]Running 5000 simulations.:  65%|██████▍   | 3247/5000 [00:21<00:11, 149.32it/s]Running 5000 simulations.:  65%|██████▌   | 3262/5000 [00:21<00:11, 149.30it/s]Running 5000 simulations.:  66%|██████▌   | 3277/5000 [00:21<00:11, 149.38it/s]Running 5000 simulations.:  66%|██████▌   | 3292/5000 [00:21<00:11, 149.56it/s]Running 5000 simulations.:  66%|██████▌   | 3308/5000 [00:22<00:11, 150.00it/s]Running 5000 simulations.:  66%|██████▋   | 3324/5000 [00:22<00:11, 149.85it/s]Running 5000 simulations.:  67%|██████▋   | 3339/5000 [00:22<00:11, 149.79it/s]Running 5000 simulations.:  67%|██████▋   | 3355/5000 [00:22<00:10, 150.14it/s]Running 5000 simulations.:  67%|██████▋   | 3371/5000 [00:22<00:10, 149.97it/s]Running 5000 simulations.:  68%|██████▊   | 3386/5000 [00:22<00:10, 149.78it/s]Running 5000 simulations.:  68%|██████▊   | 3401/5000 [00:22<00:10, 149.81it/s]Running 5000 simulations.:  68%|██████▊   | 3417/5000 [00:22<00:10, 149.94it/s]Running 5000 simulations.:  69%|██████▊   | 3432/5000 [00:22<00:10, 149.73it/s]Running 5000 simulations.:  69%|██████▉   | 3447/5000 [00:23<00:10, 149.45it/s]Running 5000 simulations.:  69%|██████▉   | 3462/5000 [00:23<00:10, 149.40it/s]Running 5000 simulations.:  70%|██████▉   | 3477/5000 [00:23<00:10, 149.27it/s]Running 5000 simulations.:  70%|██████▉   | 3492/5000 [00:23<00:10, 149.27it/s]Running 5000 simulations.:  70%|███████   | 3507/5000 [00:23<00:10, 149.03it/s]Running 5000 simulations.:  70%|███████   | 3522/5000 [00:23<00:09, 148.83it/s]Running 5000 simulations.:  71%|███████   | 3537/5000 [00:23<00:09, 149.17it/s]Running 5000 simulations.:  71%|███████   | 3552/5000 [00:23<00:09, 149.00it/s]Running 5000 simulations.:  71%|███████▏  | 3567/5000 [00:23<00:09, 149.28it/s]Running 5000 simulations.:  72%|███████▏  | 3582/5000 [00:23<00:09, 149.07it/s]Running 5000 simulations.:  72%|███████▏  | 3597/5000 [00:24<00:09, 149.07it/s]Running 5000 simulations.:  72%|███████▏  | 3612/5000 [00:24<00:09, 148.91it/s]Running 5000 simulations.:  73%|███████▎  | 3627/5000 [00:24<00:09, 148.78it/s]Running 5000 simulations.:  73%|███████▎  | 3642/5000 [00:24<00:09, 148.97it/s]Running 5000 simulations.:  73%|███████▎  | 3657/5000 [00:24<00:09, 148.82it/s]Running 5000 simulations.:  73%|███████▎  | 3672/5000 [00:24<00:08, 148.90it/s]Running 5000 simulations.:  74%|███████▎  | 3687/5000 [00:24<00:08, 148.71it/s]Running 5000 simulations.:  74%|███████▍  | 3702/5000 [00:24<00:08, 148.59it/s]Running 5000 simulations.:  74%|███████▍  | 3717/5000 [00:24<00:08, 148.66it/s]Running 5000 simulations.:  75%|███████▍  | 3732/5000 [00:24<00:08, 148.73it/s]Running 5000 simulations.:  75%|███████▍  | 3747/5000 [00:25<00:08, 148.86it/s]Running 5000 simulations.:  75%|███████▌  | 3762/5000 [00:25<00:08, 148.82it/s]Running 5000 simulations.:  76%|███████▌  | 3777/5000 [00:25<00:08, 148.52it/s]Running 5000 simulations.:  76%|███████▌  | 3792/5000 [00:25<00:08, 148.51it/s]Running 5000 simulations.:  76%|███████▌  | 3807/5000 [00:25<00:08, 148.62it/s]Running 5000 simulations.:  76%|███████▋  | 3822/5000 [00:25<00:07, 148.70it/s]Running 5000 simulations.:  77%|███████▋  | 3837/5000 [00:25<00:07, 149.06it/s]Running 5000 simulations.:  77%|███████▋  | 3852/5000 [00:25<00:07, 148.73it/s]Running 5000 simulations.:  77%|███████▋  | 3867/5000 [00:25<00:07, 148.70it/s]Running 5000 simulations.:  78%|███████▊  | 3882/5000 [00:25<00:07, 148.21it/s]Running 5000 simulations.:  78%|███████▊  | 3897/5000 [00:26<00:07, 146.47it/s]Running 5000 simulations.:  78%|███████▊  | 3912/5000 [00:26<00:07, 146.16it/s]Running 5000 simulations.:  79%|███████▊  | 3927/5000 [00:26<00:07, 146.73it/s]Running 5000 simulations.:  79%|███████▉  | 3942/5000 [00:26<00:07, 146.77it/s]Running 5000 simulations.:  79%|███████▉  | 3957/5000 [00:26<00:07, 147.25it/s]Running 5000 simulations.:  79%|███████▉  | 3973/5000 [00:26<00:06, 148.05it/s]Running 5000 simulations.:  80%|███████▉  | 3988/5000 [00:26<00:06, 148.24it/s]Running 5000 simulations.:  80%|████████  | 4003/5000 [00:26<00:06, 148.61it/s]Running 5000 simulations.:  80%|████████  | 4018/5000 [00:26<00:06, 148.76it/s]Running 5000 simulations.:  81%|████████  | 4033/5000 [00:26<00:06, 148.72it/s]Running 5000 simulations.:  81%|████████  | 4048/5000 [00:27<00:06, 148.99it/s]Running 5000 simulations.:  81%|████████▏ | 4063/5000 [00:27<00:06, 148.94it/s]Running 5000 simulations.:  82%|████████▏ | 4078/5000 [00:27<00:06, 149.15it/s]Running 5000 simulations.:  82%|████████▏ | 4093/5000 [00:27<00:06, 149.18it/s]Running 5000 simulations.:  82%|████████▏ | 4108/5000 [00:27<00:05, 149.12it/s]Running 5000 simulations.:  82%|████████▏ | 4123/5000 [00:27<00:05, 148.94it/s]Running 5000 simulations.:  83%|████████▎ | 4138/5000 [00:27<00:05, 148.94it/s]Running 5000 simulations.:  83%|████████▎ | 4153/5000 [00:27<00:05, 148.88it/s]Running 5000 simulations.:  83%|████████▎ | 4168/5000 [00:27<00:05, 148.55it/s]Running 5000 simulations.:  84%|████████▎ | 4183/5000 [00:27<00:05, 148.79it/s]Running 5000 simulations.:  84%|████████▍ | 4199/5000 [00:28<00:05, 149.16it/s]Running 5000 simulations.:  84%|████████▍ | 4214/5000 [00:28<00:05, 149.11it/s]Running 5000 simulations.:  85%|████████▍ | 4230/5000 [00:28<00:05, 149.44it/s]Running 5000 simulations.:  85%|████████▍ | 4245/5000 [00:28<00:05, 149.31it/s]Running 5000 simulations.:  85%|████████▌ | 4260/5000 [00:28<00:04, 149.17it/s]Running 5000 simulations.:  86%|████████▌ | 4275/5000 [00:28<00:04, 149.24it/s]Running 5000 simulations.:  86%|████████▌ | 4290/5000 [00:28<00:04, 149.37it/s]Running 5000 simulations.:  86%|████████▌ | 4306/5000 [00:28<00:04, 149.89it/s]Running 5000 simulations.:  86%|████████▋ | 4321/5000 [00:28<00:04, 149.64it/s]Running 5000 simulations.:  87%|████████▋ | 4336/5000 [00:28<00:04, 148.40it/s]Running 5000 simulations.:  87%|████████▋ | 4351/5000 [00:29<00:04, 148.45it/s]Running 5000 simulations.:  87%|████████▋ | 4366/5000 [00:29<00:04, 147.57it/s]Running 5000 simulations.:  88%|████████▊ | 4381/5000 [00:29<00:04, 147.43it/s]Running 5000 simulations.:  88%|████████▊ | 4396/5000 [00:29<00:04, 147.64it/s]Running 5000 simulations.:  88%|████████▊ | 4411/5000 [00:29<00:03, 147.77it/s]Running 5000 simulations.:  89%|████████▊ | 4426/5000 [00:29<00:03, 147.70it/s]Running 5000 simulations.:  89%|████████▉ | 4441/5000 [00:29<00:03, 144.55it/s]Running 5000 simulations.:  89%|████████▉ | 4456/5000 [00:29<00:03, 144.23it/s]Running 5000 simulations.:  89%|████████▉ | 4471/5000 [00:29<00:03, 145.25it/s]Running 5000 simulations.:  90%|████████▉ | 4486/5000 [00:30<00:03, 146.11it/s]Running 5000 simulations.:  90%|█████████ | 4501/5000 [00:30<00:03, 145.67it/s]Running 5000 simulations.:  90%|█████████ | 4516/5000 [00:30<00:03, 145.72it/s]Running 5000 simulations.:  91%|█████████ | 4531/5000 [00:30<00:03, 145.65it/s]Running 5000 simulations.:  91%|█████████ | 4546/5000 [00:30<00:03, 142.83it/s]Running 5000 simulations.:  91%|█████████ | 4561/5000 [00:30<00:03, 143.48it/s]Running 5000 simulations.:  92%|█████████▏| 4576/5000 [00:30<00:02, 144.46it/s]Running 5000 simulations.:  92%|█████████▏| 4591/5000 [00:30<00:02, 145.77it/s]Running 5000 simulations.:  92%|█████████▏| 4606/5000 [00:30<00:02, 146.60it/s]Running 5000 simulations.:  92%|█████████▏| 4621/5000 [00:30<00:02, 146.66it/s]Running 5000 simulations.:  93%|█████████▎| 4636/5000 [00:31<00:02, 143.61it/s]Running 5000 simulations.:  93%|█████████▎| 4651/5000 [00:31<00:02, 144.63it/s]Running 5000 simulations.:  93%|█████████▎| 4666/5000 [00:31<00:02, 146.20it/s]Running 5000 simulations.:  94%|█████████▎| 4681/5000 [00:31<00:02, 146.52it/s]Running 5000 simulations.:  94%|█████████▍| 4697/5000 [00:31<00:02, 147.73it/s]Running 5000 simulations.:  94%|█████████▍| 4713/5000 [00:31<00:01, 148.69it/s]Running 5000 simulations.:  95%|█████████▍| 4728/5000 [00:31<00:01, 147.71it/s]Running 5000 simulations.:  95%|█████████▍| 4743/5000 [00:31<00:01, 148.04it/s]Running 5000 simulations.:  95%|█████████▌| 4759/5000 [00:31<00:01, 148.96it/s]Running 5000 simulations.:  95%|█████████▌| 4774/5000 [00:31<00:01, 149.05it/s]Running 5000 simulations.:  96%|█████████▌| 4790/5000 [00:32<00:01, 149.42it/s]Running 5000 simulations.:  96%|█████████▌| 4806/5000 [00:32<00:01, 150.05it/s]Running 5000 simulations.:  96%|█████████▋| 4822/5000 [00:32<00:01, 149.78it/s]Running 5000 simulations.:  97%|█████████▋| 4837/5000 [00:32<00:01, 148.57it/s]Running 5000 simulations.:  97%|█████████▋| 4852/5000 [00:32<00:01, 146.83it/s]Running 5000 simulations.:  97%|█████████▋| 4867/5000 [00:32<00:00, 146.70it/s]Running 5000 simulations.:  98%|█████████▊| 4882/5000 [00:32<00:00, 145.21it/s]Running 5000 simulations.:  98%|█████████▊| 4897/5000 [00:32<00:00, 143.67it/s]Running 5000 simulations.:  98%|█████████▊| 4912/5000 [00:32<00:00, 143.43it/s]Running 5000 simulations.:  99%|█████████▊| 4927/5000 [00:33<00:00, 143.74it/s]Running 5000 simulations.:  99%|█████████▉| 4942/5000 [00:33<00:00, 144.58it/s]Running 5000 simulations.:  99%|█████████▉| 4957/5000 [00:33<00:00, 144.71it/s]Running 5000 simulations.:  99%|█████████▉| 4972/5000 [00:33<00:00, 143.41it/s]Running 5000 simulations.: 100%|█████████▉| 4987/5000 [00:33<00:00, 141.61it/s]Running 5000 simulations.: 100%|██████████| 5000/5000 [00:33<00:00, 149.07it/s]
Running 5000 simulations.:   0%|          | 0/5000 [00:00<?, ?it/s]Running 5000 simulations.:   0%|          | 16/5000 [00:00<00:32, 155.12it/s]Running 5000 simulations.:   1%|          | 32/5000 [00:00<00:32, 155.14it/s]Running 5000 simulations.:   1%|          | 48/5000 [00:00<00:31, 155.63it/s]Running 5000 simulations.:   1%|▏         | 64/5000 [00:00<00:31, 155.75it/s]Running 5000 simulations.:   2%|▏         | 80/5000 [00:00<00:31, 155.53it/s]Running 5000 simulations.:   2%|▏         | 96/5000 [00:00<00:31, 155.76it/s]Running 5000 simulations.:   2%|▏         | 112/5000 [00:00<00:31, 155.97it/s]Running 5000 simulations.:   3%|▎         | 128/5000 [00:00<00:31, 156.23it/s]Running 5000 simulations.:   3%|▎         | 144/5000 [00:00<00:31, 155.57it/s]Running 5000 simulations.:   3%|▎         | 160/5000 [00:01<00:31, 155.16it/s]Running 5000 simulations.:   4%|▎         | 176/5000 [00:01<00:31, 154.75it/s]Running 5000 simulations.:   4%|▍         | 192/5000 [00:01<00:32, 149.22it/s]Running 5000 simulations.:   4%|▍         | 208/5000 [00:01<00:31, 150.52it/s]Running 5000 simulations.:   4%|▍         | 224/5000 [00:01<00:31, 151.18it/s]Running 5000 simulations.:   5%|▍         | 240/5000 [00:01<00:31, 153.05it/s]Running 5000 simulations.:   5%|▌         | 258/5000 [00:01<00:29, 159.40it/s]Running 5000 simulations.:   6%|▌         | 275/5000 [00:01<00:29, 160.64it/s]Running 5000 simulations.:   6%|▌         | 292/5000 [00:01<00:29, 159.10it/s]Running 5000 simulations.:   6%|▌         | 308/5000 [00:01<00:29, 158.22it/s]Running 5000 simulations.:   6%|▋         | 324/5000 [00:02<00:29, 157.33it/s]Running 5000 simulations.:   7%|▋         | 340/5000 [00:02<00:29, 155.85it/s]Running 5000 simulations.:   7%|▋         | 356/5000 [00:02<00:29, 155.68it/s]Running 5000 simulations.:   7%|▋         | 372/5000 [00:02<00:29, 155.09it/s]Running 5000 simulations.:   8%|▊         | 388/5000 [00:02<00:29, 154.67it/s]Running 5000 simulations.:   8%|▊         | 404/5000 [00:02<00:29, 153.72it/s]Running 5000 simulations.:   8%|▊         | 420/5000 [00:02<00:30, 152.55it/s]Running 5000 simulations.:   9%|▊         | 436/5000 [00:02<00:29, 152.78it/s]Running 5000 simulations.:   9%|▉         | 452/5000 [00:02<00:29, 152.74it/s]Running 5000 simulations.:   9%|▉         | 468/5000 [00:03<00:29, 152.38it/s]Running 5000 simulations.:  10%|▉         | 484/5000 [00:03<00:29, 152.86it/s]Running 5000 simulations.:  10%|█         | 500/5000 [00:03<00:29, 153.07it/s]Running 5000 simulations.:  10%|█         | 516/5000 [00:03<00:29, 152.64it/s]Running 5000 simulations.:  11%|█         | 532/5000 [00:03<00:29, 152.25it/s]Running 5000 simulations.:  11%|█         | 548/5000 [00:03<00:29, 151.74it/s]Running 5000 simulations.:  11%|█▏        | 564/5000 [00:03<00:29, 152.25it/s]Running 5000 simulations.:  12%|█▏        | 580/5000 [00:03<00:28, 152.75it/s]Running 5000 simulations.:  12%|█▏        | 596/5000 [00:03<00:28, 153.32it/s]Running 5000 simulations.:  12%|█▏        | 612/5000 [00:03<00:28, 153.65it/s]Running 5000 simulations.:  13%|█▎        | 628/5000 [00:04<00:28, 153.91it/s]Running 5000 simulations.:  13%|█▎        | 644/5000 [00:04<00:28, 153.81it/s]Running 5000 simulations.:  13%|█▎        | 660/5000 [00:04<00:28, 153.23it/s]Running 5000 simulations.:  14%|█▎        | 676/5000 [00:04<00:28, 153.68it/s]Running 5000 simulations.:  14%|█▍        | 692/5000 [00:04<00:28, 153.74it/s]Running 5000 simulations.:  14%|█▍        | 708/5000 [00:04<00:28, 150.54it/s]Running 5000 simulations.:  14%|█▍        | 724/5000 [00:04<00:28, 148.14it/s]Running 5000 simulations.:  15%|█▍        | 739/5000 [00:04<00:28, 147.18it/s]Running 5000 simulations.:  15%|█▌        | 754/5000 [00:04<00:28, 147.23it/s]Running 5000 simulations.:  15%|█▌        | 769/5000 [00:05<00:28, 147.33it/s]Running 5000 simulations.:  16%|█▌        | 784/5000 [00:05<00:28, 148.01it/s]Running 5000 simulations.:  16%|█▌        | 799/5000 [00:05<00:28, 148.44it/s]Running 5000 simulations.:  16%|█▋        | 815/5000 [00:05<00:28, 149.16it/s]Running 5000 simulations.:  17%|█▋        | 831/5000 [00:05<00:27, 150.05it/s]Running 5000 simulations.:  17%|█▋        | 847/5000 [00:05<00:27, 151.23it/s]Running 5000 simulations.:  17%|█▋        | 863/5000 [00:05<00:27, 151.58it/s]Running 5000 simulations.:  18%|█▊        | 879/5000 [00:05<00:27, 151.30it/s]Running 5000 simulations.:  18%|█▊        | 895/5000 [00:05<00:27, 150.87it/s]Running 5000 simulations.:  18%|█▊        | 911/5000 [00:05<00:27, 150.77it/s]Running 5000 simulations.:  19%|█▊        | 927/5000 [00:06<00:27, 149.27it/s]Running 5000 simulations.:  19%|█▉        | 943/5000 [00:06<00:27, 149.69it/s]Running 5000 simulations.:  19%|█▉        | 959/5000 [00:06<00:26, 150.02it/s]Running 5000 simulations.:  20%|█▉        | 975/5000 [00:06<00:26, 150.42it/s]Running 5000 simulations.:  20%|█▉        | 991/5000 [00:06<00:26, 149.80it/s]Running 5000 simulations.:  20%|██        | 1006/5000 [00:06<00:26, 149.61it/s]Running 5000 simulations.:  20%|██        | 1022/5000 [00:06<00:26, 150.28it/s]Running 5000 simulations.:  21%|██        | 1038/5000 [00:06<00:26, 150.28it/s]Running 5000 simulations.:  21%|██        | 1054/5000 [00:06<00:26, 150.21it/s]Running 5000 simulations.:  21%|██▏       | 1070/5000 [00:07<00:26, 150.47it/s]Running 5000 simulations.:  22%|██▏       | 1086/5000 [00:07<00:26, 150.21it/s]Running 5000 simulations.:  22%|██▏       | 1102/5000 [00:07<00:25, 150.42it/s]Running 5000 simulations.:  22%|██▏       | 1118/5000 [00:07<00:25, 150.03it/s]Running 5000 simulations.:  23%|██▎       | 1134/5000 [00:07<00:25, 150.53it/s]Running 5000 simulations.:  23%|██▎       | 1150/5000 [00:07<00:25, 150.11it/s]Running 5000 simulations.:  23%|██▎       | 1166/5000 [00:07<00:25, 149.51it/s]Running 5000 simulations.:  24%|██▎       | 1181/5000 [00:07<00:25, 149.28it/s]Running 5000 simulations.:  24%|██▍       | 1196/5000 [00:07<00:25, 149.04it/s]Running 5000 simulations.:  24%|██▍       | 1212/5000 [00:07<00:25, 149.43it/s]Running 5000 simulations.:  25%|██▍       | 1228/5000 [00:08<00:25, 149.94it/s]Running 5000 simulations.:  25%|██▍       | 1243/5000 [00:08<00:25, 148.91it/s]Running 5000 simulations.:  25%|██▌       | 1258/5000 [00:08<00:25, 148.74it/s]Running 5000 simulations.:  25%|██▌       | 1273/5000 [00:08<00:25, 148.28it/s]Running 5000 simulations.:  26%|██▌       | 1288/5000 [00:08<00:25, 147.61it/s]Running 5000 simulations.:  26%|██▌       | 1303/5000 [00:08<00:25, 147.49it/s]Running 5000 simulations.:  26%|██▋       | 1318/5000 [00:08<00:25, 147.11it/s]Running 5000 simulations.:  27%|██▋       | 1333/5000 [00:08<00:25, 146.60it/s]Running 5000 simulations.:  27%|██▋       | 1348/5000 [00:08<00:25, 145.93it/s]Running 5000 simulations.:  27%|██▋       | 1363/5000 [00:08<00:24, 146.95it/s]Running 5000 simulations.:  28%|██▊       | 1378/5000 [00:09<00:24, 147.23it/s]Running 5000 simulations.:  28%|██▊       | 1393/5000 [00:09<00:24, 147.96it/s]Running 5000 simulations.:  28%|██▊       | 1409/5000 [00:09<00:24, 148.68it/s]Running 5000 simulations.:  28%|██▊       | 1425/5000 [00:09<00:23, 149.22it/s]Running 5000 simulations.:  29%|██▉       | 1441/5000 [00:09<00:23, 149.50it/s]Running 5000 simulations.:  29%|██▉       | 1457/5000 [00:09<00:23, 150.26it/s]Running 5000 simulations.:  29%|██▉       | 1473/5000 [00:09<00:23, 151.27it/s]Running 5000 simulations.:  30%|██▉       | 1489/5000 [00:09<00:23, 151.68it/s]Running 5000 simulations.:  30%|███       | 1505/5000 [00:09<00:23, 151.12it/s]Running 5000 simulations.:  30%|███       | 1521/5000 [00:10<00:23, 150.83it/s]Running 5000 simulations.:  31%|███       | 1537/5000 [00:10<00:23, 150.55it/s]Running 5000 simulations.:  31%|███       | 1553/5000 [00:10<00:22, 150.38it/s]Running 5000 simulations.:  31%|███▏      | 1569/5000 [00:10<00:22, 150.34it/s]Running 5000 simulations.:  32%|███▏      | 1585/5000 [00:10<00:22, 150.33it/s]Running 5000 simulations.:  32%|███▏      | 1601/5000 [00:10<00:22, 150.31it/s]Running 5000 simulations.:  32%|███▏      | 1617/5000 [00:10<00:22, 150.34it/s]Running 5000 simulations.:  33%|███▎      | 1633/5000 [00:10<00:22, 150.09it/s]Running 5000 simulations.:  33%|███▎      | 1649/5000 [00:10<00:22, 149.97it/s]Running 5000 simulations.:  33%|███▎      | 1665/5000 [00:10<00:22, 150.22it/s]Running 5000 simulations.:  34%|███▎      | 1681/5000 [00:11<00:22, 149.83it/s]Running 5000 simulations.:  34%|███▍      | 1696/5000 [00:11<00:22, 149.85it/s]Running 5000 simulations.:  34%|███▍      | 1711/5000 [00:11<00:21, 149.78it/s]Running 5000 simulations.:  35%|███▍      | 1726/5000 [00:11<00:21, 149.66it/s]Running 5000 simulations.:  35%|███▍      | 1742/5000 [00:11<00:21, 149.91it/s]Running 5000 simulations.:  35%|███▌      | 1758/5000 [00:11<00:21, 150.21it/s]Running 5000 simulations.:  35%|███▌      | 1774/5000 [00:11<00:21, 150.89it/s]Running 5000 simulations.:  36%|███▌      | 1790/5000 [00:11<00:21, 151.44it/s]Running 5000 simulations.:  36%|███▌      | 1806/5000 [00:11<00:21, 151.47it/s]Running 5000 simulations.:  36%|███▋      | 1822/5000 [00:12<00:21, 150.94it/s]Running 5000 simulations.:  37%|███▋      | 1838/5000 [00:12<00:21, 150.45it/s]Running 5000 simulations.:  37%|███▋      | 1854/5000 [00:12<00:20, 150.61it/s]Running 5000 simulations.:  37%|███▋      | 1870/5000 [00:12<00:20, 150.99it/s]Running 5000 simulations.:  38%|███▊      | 1886/5000 [00:12<00:20, 150.76it/s]Running 5000 simulations.:  38%|███▊      | 1902/5000 [00:12<00:20, 150.79it/s]Running 5000 simulations.:  38%|███▊      | 1918/5000 [00:12<00:20, 150.84it/s]Running 5000 simulations.:  39%|███▊      | 1934/5000 [00:12<00:20, 150.87it/s]Running 5000 simulations.:  39%|███▉      | 1950/5000 [00:12<00:20, 150.78it/s]Running 5000 simulations.:  39%|███▉      | 1966/5000 [00:12<00:20, 151.19it/s]Running 5000 simulations.:  40%|███▉      | 1982/5000 [00:13<00:19, 150.91it/s]Running 5000 simulations.:  40%|███▉      | 1998/5000 [00:13<00:19, 150.73it/s]Running 5000 simulations.:  40%|████      | 2014/5000 [00:13<00:19, 150.74it/s]Running 5000 simulations.:  41%|████      | 2030/5000 [00:13<00:19, 151.26it/s]Running 5000 simulations.:  41%|████      | 2046/5000 [00:13<00:19, 150.86it/s]Running 5000 simulations.:  41%|████      | 2062/5000 [00:13<00:19, 150.39it/s]Running 5000 simulations.:  42%|████▏     | 2078/5000 [00:13<00:19, 150.38it/s]Running 5000 simulations.:  42%|████▏     | 2094/5000 [00:13<00:19, 150.54it/s]Running 5000 simulations.:  42%|████▏     | 2110/5000 [00:13<00:19, 150.47it/s]Running 5000 simulations.:  43%|████▎     | 2126/5000 [00:14<00:19, 150.11it/s]Running 5000 simulations.:  43%|████▎     | 2142/5000 [00:14<00:19, 149.89it/s]Running 5000 simulations.:  43%|████▎     | 2158/5000 [00:14<00:18, 150.10it/s]Running 5000 simulations.:  43%|████▎     | 2174/5000 [00:14<00:18, 149.86it/s]Running 5000 simulations.:  44%|████▍     | 2189/5000 [00:14<00:18, 149.69it/s]Running 5000 simulations.:  44%|████▍     | 2204/5000 [00:14<00:18, 149.72it/s]Running 5000 simulations.:  44%|████▍     | 2219/5000 [00:14<00:18, 149.54it/s]Running 5000 simulations.:  45%|████▍     | 2234/5000 [00:14<00:18, 149.52it/s]Running 5000 simulations.:  45%|████▍     | 2249/5000 [00:14<00:18, 149.53it/s]Running 5000 simulations.:  45%|████▌     | 2264/5000 [00:14<00:18, 149.52it/s]Running 5000 simulations.:  46%|████▌     | 2279/5000 [00:15<00:18, 149.53it/s]Running 5000 simulations.:  46%|████▌     | 2295/5000 [00:15<00:18, 149.73it/s]Running 5000 simulations.:  46%|████▌     | 2311/5000 [00:15<00:17, 150.09it/s]Running 5000 simulations.:  47%|████▋     | 2327/5000 [00:15<00:17, 150.35it/s]Running 5000 simulations.:  47%|████▋     | 2343/5000 [00:15<00:17, 150.38it/s]Running 5000 simulations.:  47%|████▋     | 2359/5000 [00:15<00:17, 148.74it/s]Running 5000 simulations.:  47%|████▋     | 2374/5000 [00:15<00:17, 148.70it/s]Running 5000 simulations.:  48%|████▊     | 2389/5000 [00:15<00:17, 148.84it/s]Running 5000 simulations.:  48%|████▊     | 2404/5000 [00:15<00:17, 148.90it/s]Running 5000 simulations.:  48%|████▊     | 2419/5000 [00:16<00:17, 148.49it/s]Running 5000 simulations.:  49%|████▊     | 2434/5000 [00:16<00:17, 148.82it/s]Running 5000 simulations.:  49%|████▉     | 2449/5000 [00:16<00:17, 149.13it/s]Running 5000 simulations.:  49%|████▉     | 2465/5000 [00:16<00:16, 149.55it/s]Running 5000 simulations.:  50%|████▉     | 2481/5000 [00:16<00:16, 149.99it/s]Running 5000 simulations.:  50%|████▉     | 2497/5000 [00:16<00:16, 149.51it/s]Running 5000 simulations.:  50%|█████     | 2513/5000 [00:16<00:16, 149.77it/s]Running 5000 simulations.:  51%|█████     | 2528/5000 [00:16<00:16, 149.71it/s]Running 5000 simulations.:  51%|█████     | 2543/5000 [00:16<00:16, 148.09it/s]Running 5000 simulations.:  51%|█████     | 2558/5000 [00:16<00:16, 148.44it/s]Running 5000 simulations.:  51%|█████▏    | 2573/5000 [00:17<00:16, 148.73it/s]Running 5000 simulations.:  52%|█████▏    | 2588/5000 [00:17<00:16, 148.77it/s]Running 5000 simulations.:  52%|█████▏    | 2603/5000 [00:17<00:16, 148.82it/s]Running 5000 simulations.:  52%|█████▏    | 2618/5000 [00:17<00:15, 149.14it/s]Running 5000 simulations.:  53%|█████▎    | 2633/5000 [00:17<00:15, 149.03it/s]Running 5000 simulations.:  53%|█████▎    | 2648/5000 [00:17<00:15, 149.23it/s]Running 5000 simulations.:  53%|█████▎    | 2664/5000 [00:17<00:15, 149.57it/s]Running 5000 simulations.:  54%|█████▎    | 2680/5000 [00:17<00:15, 149.91it/s]Running 5000 simulations.:  54%|█████▍    | 2696/5000 [00:17<00:15, 150.05it/s]Running 5000 simulations.:  54%|█████▍    | 2712/5000 [00:17<00:15, 149.99it/s]Running 5000 simulations.:  55%|█████▍    | 2728/5000 [00:18<00:15, 150.08it/s]Running 5000 simulations.:  55%|█████▍    | 2744/5000 [00:18<00:14, 150.57it/s]Running 5000 simulations.:  55%|█████▌    | 2760/5000 [00:18<00:14, 150.08it/s]Running 5000 simulations.:  56%|█████▌    | 2776/5000 [00:18<00:14, 149.92it/s]Running 5000 simulations.:  56%|█████▌    | 2791/5000 [00:18<00:14, 149.57it/s]Running 5000 simulations.:  56%|█████▌    | 2806/5000 [00:18<00:14, 149.40it/s]Running 5000 simulations.:  56%|█████▋    | 2821/5000 [00:18<00:14, 149.35it/s]Running 5000 simulations.:  57%|█████▋    | 2837/5000 [00:18<00:14, 149.61it/s]Running 5000 simulations.:  57%|█████▋    | 2853/5000 [00:18<00:14, 149.79it/s]Running 5000 simulations.:  57%|█████▋    | 2869/5000 [00:19<00:14, 150.01it/s]Running 5000 simulations.:  58%|█████▊    | 2885/5000 [00:19<00:14, 149.98it/s]Running 5000 simulations.:  58%|█████▊    | 2901/5000 [00:19<00:13, 149.98it/s]Running 5000 simulations.:  58%|█████▊    | 2916/5000 [00:19<00:13, 149.67it/s]Running 5000 simulations.:  59%|█████▊    | 2931/5000 [00:19<00:13, 149.40it/s]Running 5000 simulations.:  59%|█████▉    | 2946/5000 [00:19<00:13, 149.30it/s]Running 5000 simulations.:  59%|█████▉    | 2961/5000 [00:19<00:13, 149.21it/s]Running 5000 simulations.:  60%|█████▉    | 2976/5000 [00:19<00:13, 149.25it/s]Running 5000 simulations.:  60%|█████▉    | 2992/5000 [00:19<00:13, 149.64it/s]Running 5000 simulations.:  60%|██████    | 3008/5000 [00:19<00:13, 150.25it/s]Running 5000 simulations.:  60%|██████    | 3024/5000 [00:20<00:13, 149.93it/s]Running 5000 simulations.:  61%|██████    | 3039/5000 [00:20<00:13, 149.72it/s]Running 5000 simulations.:  61%|██████    | 3054/5000 [00:20<00:12, 149.71it/s]Running 5000 simulations.:  61%|██████▏   | 3070/5000 [00:20<00:12, 149.87it/s]Running 5000 simulations.:  62%|██████▏   | 3086/5000 [00:20<00:12, 149.95it/s]Running 5000 simulations.:  62%|██████▏   | 3102/5000 [00:20<00:12, 150.08it/s]Running 5000 simulations.:  62%|██████▏   | 3118/5000 [00:20<00:12, 150.13it/s]Running 5000 simulations.:  63%|██████▎   | 3134/5000 [00:20<00:12, 149.95it/s]Running 5000 simulations.:  63%|██████▎   | 3149/5000 [00:20<00:12, 149.72it/s]Running 5000 simulations.:  63%|██████▎   | 3164/5000 [00:20<00:12, 149.38it/s]Running 5000 simulations.:  64%|██████▎   | 3179/5000 [00:21<00:12, 149.26it/s]Running 5000 simulations.:  64%|██████▍   | 3194/5000 [00:21<00:12, 149.18it/s]Running 5000 simulations.:  64%|██████▍   | 3210/5000 [00:21<00:11, 149.44it/s]Running 5000 simulations.:  64%|██████▍   | 3225/5000 [00:21<00:11, 149.51it/s]Running 5000 simulations.:  65%|██████▍   | 3240/5000 [00:21<00:11, 149.46it/s]Running 5000 simulations.:  65%|██████▌   | 3255/5000 [00:21<00:11, 149.51it/s]Running 5000 simulations.:  65%|██████▌   | 3270/5000 [00:21<00:11, 149.63it/s]Running 5000 simulations.:  66%|██████▌   | 3285/5000 [00:21<00:11, 149.63it/s]Running 5000 simulations.:  66%|██████▌   | 3300/5000 [00:21<00:11, 149.48it/s]Running 5000 simulations.:  66%|██████▋   | 3315/5000 [00:22<00:11, 149.52it/s]Running 5000 simulations.:  67%|██████▋   | 3330/5000 [00:22<00:11, 149.45it/s]Running 5000 simulations.:  67%|██████▋   | 3345/5000 [00:22<00:11, 149.23it/s]Running 5000 simulations.:  67%|██████▋   | 3360/5000 [00:22<00:10, 149.15it/s]Running 5000 simulations.:  68%|██████▊   | 3376/5000 [00:22<00:10, 149.46it/s]Running 5000 simulations.:  68%|██████▊   | 3391/5000 [00:22<00:10, 149.40it/s]Running 5000 simulations.:  68%|██████▊   | 3407/5000 [00:22<00:10, 149.67it/s]Running 5000 simulations.:  68%|██████▊   | 3423/5000 [00:22<00:10, 149.81it/s]Running 5000 simulations.:  69%|██████▉   | 3439/5000 [00:22<00:10, 150.46it/s]Running 5000 simulations.:  69%|██████▉   | 3455/5000 [00:22<00:10, 150.98it/s]Running 5000 simulations.:  69%|██████▉   | 3471/5000 [00:23<00:10, 151.08it/s]Running 5000 simulations.:  70%|██████▉   | 3487/5000 [00:23<00:10, 150.50it/s]Running 5000 simulations.:  70%|███████   | 3503/5000 [00:23<00:09, 150.57it/s]Running 5000 simulations.:  70%|███████   | 3519/5000 [00:23<00:09, 150.91it/s]Running 5000 simulations.:  71%|███████   | 3535/5000 [00:23<00:09, 150.87it/s]Running 5000 simulations.:  71%|███████   | 3551/5000 [00:23<00:09, 151.16it/s]Running 5000 simulations.:  71%|███████▏  | 3567/5000 [00:23<00:09, 151.51it/s]Running 5000 simulations.:  72%|███████▏  | 3583/5000 [00:23<00:09, 151.28it/s]Running 5000 simulations.:  72%|███████▏  | 3599/5000 [00:23<00:09, 150.93it/s]Running 5000 simulations.:  72%|███████▏  | 3615/5000 [00:24<00:09, 150.58it/s]Running 5000 simulations.:  73%|███████▎  | 3631/5000 [00:24<00:09, 150.36it/s]Running 5000 simulations.:  73%|███████▎  | 3647/5000 [00:24<00:09, 150.30it/s]Running 5000 simulations.:  73%|███████▎  | 3663/5000 [00:24<00:08, 150.66it/s]Running 5000 simulations.:  74%|███████▎  | 3679/5000 [00:24<00:08, 150.98it/s]Running 5000 simulations.:  74%|███████▍  | 3695/5000 [00:24<00:08, 149.59it/s]Running 5000 simulations.:  74%|███████▍  | 3710/5000 [00:24<00:08, 149.26it/s]Running 5000 simulations.:  74%|███████▍  | 3725/5000 [00:24<00:08, 149.21it/s]Running 5000 simulations.:  75%|███████▍  | 3741/5000 [00:24<00:08, 150.04it/s]Running 5000 simulations.:  75%|███████▌  | 3757/5000 [00:24<00:08, 150.60it/s]Running 5000 simulations.:  75%|███████▌  | 3773/5000 [00:25<00:08, 150.71it/s]Running 5000 simulations.:  76%|███████▌  | 3789/5000 [00:25<00:08, 150.40it/s]Running 5000 simulations.:  76%|███████▌  | 3805/5000 [00:25<00:07, 150.24it/s]Running 5000 simulations.:  76%|███████▋  | 3821/5000 [00:25<00:07, 150.12it/s]Running 5000 simulations.:  77%|███████▋  | 3837/5000 [00:25<00:07, 149.99it/s]Running 5000 simulations.:  77%|███████▋  | 3852/5000 [00:25<00:07, 149.72it/s]Running 5000 simulations.:  77%|███████▋  | 3867/5000 [00:25<00:07, 149.69it/s]Running 5000 simulations.:  78%|███████▊  | 3882/5000 [00:25<00:07, 149.40it/s]Running 5000 simulations.:  78%|███████▊  | 3897/5000 [00:25<00:07, 149.56it/s]Running 5000 simulations.:  78%|███████▊  | 3912/5000 [00:25<00:07, 149.51it/s]Running 5000 simulations.:  79%|███████▊  | 3927/5000 [00:26<00:07, 149.20it/s]Running 5000 simulations.:  79%|███████▉  | 3942/5000 [00:26<00:07, 149.12it/s]Running 5000 simulations.:  79%|███████▉  | 3957/5000 [00:26<00:06, 149.28it/s]Running 5000 simulations.:  79%|███████▉  | 3972/5000 [00:26<00:06, 149.00it/s]Running 5000 simulations.:  80%|███████▉  | 3987/5000 [00:26<00:06, 148.99it/s]Running 5000 simulations.:  80%|████████  | 4002/5000 [00:26<00:06, 149.27it/s]Running 5000 simulations.:  80%|████████  | 4017/5000 [00:26<00:06, 149.42it/s]Running 5000 simulations.:  81%|████████  | 4033/5000 [00:26<00:06, 149.79it/s]Running 5000 simulations.:  81%|████████  | 4048/5000 [00:26<00:06, 149.43it/s]Running 5000 simulations.:  81%|████████▏ | 4064/5000 [00:27<00:06, 149.79it/s]Running 5000 simulations.:  82%|████████▏ | 4080/5000 [00:27<00:06, 150.28it/s]Running 5000 simulations.:  82%|████████▏ | 4096/5000 [00:27<00:06, 150.47it/s]Running 5000 simulations.:  82%|████████▏ | 4112/5000 [00:27<00:05, 150.71it/s]Running 5000 simulations.:  83%|████████▎ | 4128/5000 [00:27<00:05, 151.17it/s]Running 5000 simulations.:  83%|████████▎ | 4144/5000 [00:27<00:05, 150.98it/s]Running 5000 simulations.:  83%|████████▎ | 4160/5000 [00:27<00:05, 150.76it/s]Running 5000 simulations.:  84%|████████▎ | 4176/5000 [00:27<00:05, 150.50it/s]Running 5000 simulations.:  84%|████████▍ | 4192/5000 [00:27<00:05, 150.28it/s]Running 5000 simulations.:  84%|████████▍ | 4208/5000 [00:27<00:05, 149.21it/s]Running 5000 simulations.:  84%|████████▍ | 4224/5000 [00:28<00:05, 149.50it/s]Running 5000 simulations.:  85%|████████▍ | 4239/5000 [00:28<00:05, 149.29it/s]Running 5000 simulations.:  85%|████████▌ | 4254/5000 [00:28<00:04, 149.31it/s]Running 5000 simulations.:  85%|████████▌ | 4270/5000 [00:28<00:04, 149.69it/s]Running 5000 simulations.:  86%|████████▌ | 4285/5000 [00:28<00:04, 149.48it/s]Running 5000 simulations.:  86%|████████▌ | 4301/5000 [00:28<00:04, 149.77it/s]Running 5000 simulations.:  86%|████████▋ | 4316/5000 [00:28<00:04, 149.65it/s]Running 5000 simulations.:  87%|████████▋ | 4331/5000 [00:28<00:04, 149.64it/s]Running 5000 simulations.:  87%|████████▋ | 4346/5000 [00:28<00:04, 149.55it/s]Running 5000 simulations.:  87%|████████▋ | 4362/5000 [00:28<00:04, 149.71it/s]Running 5000 simulations.:  88%|████████▊ | 4377/5000 [00:29<00:04, 149.74it/s]Running 5000 simulations.:  88%|████████▊ | 4392/5000 [00:29<00:04, 149.72it/s]Running 5000 simulations.:  88%|████████▊ | 4407/5000 [00:29<00:03, 149.80it/s]Running 5000 simulations.:  88%|████████▊ | 4422/5000 [00:29<00:03, 149.40it/s]Running 5000 simulations.:  89%|████████▊ | 4437/5000 [00:29<00:03, 149.29it/s]Running 5000 simulations.:  89%|████████▉ | 4452/5000 [00:29<00:03, 149.40it/s]Running 5000 simulations.:  89%|████████▉ | 4467/5000 [00:29<00:03, 149.49it/s]Running 5000 simulations.:  90%|████████▉ | 4483/5000 [00:29<00:03, 150.28it/s]Running 5000 simulations.:  90%|████████▉ | 4499/5000 [00:29<00:03, 151.18it/s]Running 5000 simulations.:  90%|█████████ | 4515/5000 [00:30<00:03, 151.78it/s]Running 5000 simulations.:  91%|█████████ | 4531/5000 [00:30<00:03, 152.31it/s]Running 5000 simulations.:  91%|█████████ | 4547/5000 [00:30<00:02, 152.69it/s]Running 5000 simulations.:  91%|█████████▏| 4563/5000 [00:30<00:02, 152.68it/s]Running 5000 simulations.:  92%|█████████▏| 4579/5000 [00:30<00:02, 152.14it/s]Running 5000 simulations.:  92%|█████████▏| 4595/5000 [00:30<00:02, 151.40it/s]Running 5000 simulations.:  92%|█████████▏| 4611/5000 [00:30<00:02, 150.76it/s]Running 5000 simulations.:  93%|█████████▎| 4627/5000 [00:30<00:02, 150.76it/s]Running 5000 simulations.:  93%|█████████▎| 4643/5000 [00:30<00:02, 150.60it/s]Running 5000 simulations.:  93%|█████████▎| 4659/5000 [00:30<00:02, 150.79it/s]Running 5000 simulations.:  94%|█████████▎| 4675/5000 [00:31<00:02, 150.86it/s]Running 5000 simulations.:  94%|█████████▍| 4691/5000 [00:31<00:02, 145.19it/s]Running 5000 simulations.:  94%|█████████▍| 4707/5000 [00:31<00:01, 146.96it/s]Running 5000 simulations.:  94%|█████████▍| 4723/5000 [00:31<00:01, 148.18it/s]Running 5000 simulations.:  95%|█████████▍| 4739/5000 [00:31<00:01, 148.85it/s]Running 5000 simulations.:  95%|█████████▌| 4755/5000 [00:31<00:01, 149.22it/s]Running 5000 simulations.:  95%|█████████▌| 4770/5000 [00:31<00:01, 149.33it/s]Running 5000 simulations.:  96%|█████████▌| 4785/5000 [00:31<00:01, 149.47it/s]Running 5000 simulations.:  96%|█████████▌| 4801/5000 [00:31<00:01, 149.88it/s]Running 5000 simulations.:  96%|█████████▋| 4817/5000 [00:32<00:01, 150.07it/s]Running 5000 simulations.:  97%|█████████▋| 4833/5000 [00:32<00:01, 150.73it/s]Running 5000 simulations.:  97%|█████████▋| 4850/5000 [00:32<00:00, 155.26it/s]Running 5000 simulations.:  97%|█████████▋| 4867/5000 [00:32<00:00, 156.79it/s]Running 5000 simulations.:  98%|█████████▊| 4883/5000 [00:32<00:00, 155.08it/s]Running 5000 simulations.:  98%|█████████▊| 4899/5000 [00:32<00:00, 153.60it/s]Running 5000 simulations.:  98%|█████████▊| 4915/5000 [00:32<00:00, 152.53it/s]Running 5000 simulations.:  99%|█████████▊| 4931/5000 [00:32<00:00, 151.80it/s]Running 5000 simulations.:  99%|█████████▉| 4947/5000 [00:32<00:00, 151.33it/s]Running 5000 simulations.:  99%|█████████▉| 4963/5000 [00:32<00:00, 151.66it/s]Running 5000 simulations.: 100%|█████████▉| 4979/5000 [00:33<00:00, 151.38it/s]Running 5000 simulations.: 100%|█████████▉| 4995/5000 [00:33<00:00, 150.92it/s]Running 5000 simulations.: 100%|██████████| 5000/5000 [00:33<00:00, 150.53it/s]
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18329it [00:00, 532425.14it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18345it [00:00, 513100.21it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18412it [00:00, 529021.67it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18341it [00:00, 527108.05it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 17276it [00:00, 493770.33it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18411it [00:00, 523864.75it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18366it [00:00, 517626.02it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18427it [00:00, 517017.57it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18382it [00:00, 526827.99it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18373it [00:00, 522623.95it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18374it [00:00, 520340.98it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18408it [00:00, 527890.58it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18460it [00:00, 537033.83it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18393it [00:00, 535820.54it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18330it [00:00, 525804.74it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18335it [00:00, 529201.91it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18176it [00:00, 520138.57it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18357it [00:00, 531967.43it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18367it [00:00, 535092.84it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18367it [00:00, 517932.63it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18363it [00:00, 523407.96it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18393it [00:00, 534410.06it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18396it [00:00, 526000.02it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18344it [00:00, 517454.52it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18436it [00:00, 534862.83it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18371it [00:00, 519288.32it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18370it [00:00, 527941.49it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18422it [00:00, 530035.18it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18371it [00:00, 524024.15it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18477it [00:00, 520939.97it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 575516.13it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18613it [00:00, 536974.54it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 554552.71it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 19587it [00:00, 550237.98it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 15413it [00:00, 435469.86it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 16548it [00:00, 472403.03it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 559247.99it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 563985.53it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 567526.42it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 564828.57it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 19528it [00:00, 561333.17it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 562956.04it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 572554.33it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 558547.93it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 19989it [00:00, 569317.30it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 19586it [00:00, 567449.32it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 19955it [00:00, 573583.72it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 573870.40it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18289it [00:00, 516890.33it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 570925.47it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 567495.70it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 562397.46it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 563281.14it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 567004.72it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 574514.97it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 556790.65it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 566040.57it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 550852.88it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 558458.69it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 16084it [00:00, 458227.61it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 562903.16it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 19130it [00:00, 549956.72it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 574885.07it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 19999it [00:00, 575404.45it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 16487it [00:00, 466886.48it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 16628it [00:00, 474961.60it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 556015.64it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 552470.92it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 561621.81it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 569916.98it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 19969it [00:00, 572910.36it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 570521.65it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 560953.31it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 570544.93it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 547209.23it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 19649it [00:00, 556827.96it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 19750it [00:00, 562067.47it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 558406.65it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 19797it [00:00, 566800.93it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 570909.93it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 576703.10it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 565971.82it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 560151.71it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 575911.24it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 565689.39it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 562269.29it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 19900it [00:00, 577679.84it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 557108.66it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 561606.77it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 17728it [00:00, 509850.67it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18280it [00:00, 516970.38it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18063it [00:00, 507351.02it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18330it [00:00, 519726.57it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18302it [00:00, 523073.34it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 12085it [00:00, 174784.36it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18223it [00:00, 515998.55it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18276it [00:00, 514622.63it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18197it [00:00, 520913.67it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18284it [00:00, 515873.04it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18370it [00:00, 520224.19it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18301it [00:00, 528923.05it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18332it [00:00, 528671.49it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18272it [00:00, 514313.19it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18254it [00:00, 524219.79it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18276it [00:00, 513371.55it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18289it [00:00, 531252.17it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18301it [00:00, 527371.37it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18309it [00:00, 524187.79it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18215it [00:00, 518618.50it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18298it [00:00, 515778.83it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18300it [00:00, 520268.71it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18268it [00:00, 522365.02it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18274it [00:00, 516602.15it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18330it [00:00, 523566.77it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18250it [00:00, 527285.58it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18239it [00:00, 536852.78it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18279it [00:00, 515080.57it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18283it [00:00, 521099.36it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18281it [00:00, 528931.81it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18310it [00:00, 527149.03it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 566185.75it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 19414it [00:00, 559067.75it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 573493.77it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 19974it [00:00, 581518.39it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 16619it [00:00, 483428.96it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 16274it [00:00, 464056.72it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 563356.79it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 575508.23it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 571446.63it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 570219.15it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 19948it [00:00, 574074.93it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 571734.85it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 575998.24it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 569576.45it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 572757.61it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18948it [00:00, 548298.48it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 19927it [00:00, 564031.61it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 573211.61it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 19564it [00:00, 552496.71it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 562586.05it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 566132.25it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 573964.64it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 568049.08it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 559748.04it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 565483.47it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 563682.35it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 19996it [00:00, 576992.37it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 567810.69it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 560196.60it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 15951it [00:00, 446063.92it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 576901.41it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 19058it [00:00, 544973.28it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 571610.18it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 19945it [00:00, 568767.04it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 15695it [00:00, 447598.14it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18046it [00:00, 517838.69it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 551715.14it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 568541.88it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 562291.90it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 564478.90it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 19803it [00:00, 568062.33it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 567043.05it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 569383.15it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 563250.88it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 564281.45it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 19264it [00:00, 552899.49it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18898it [00:00, 536049.00it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 565620.74it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 19388it [00:00, 555303.27it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 572538.70it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 572820.19it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 570219.15it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 576560.41it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 567810.69it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 559524.03it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 567043.05it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 19948it [00:00, 573119.36it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 558258.00it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 566223.96it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 16531it [00:00, 471779.65it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 566828.48it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 19666it [00:00, 566394.63it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 579419.79it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 554853.49it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 16353it [00:00, 474185.11it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 17554it [00:00, 510871.58it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 567610.90it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 574971.76it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 551185.87it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 568726.90it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 19982it [00:00, 584963.06it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 570048.66it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 564205.54it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 560428.64it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 572890.61it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 19491it [00:00, 556262.91it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 19543it [00:00, 567579.63it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 566614.07it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 19321it [00:00, 558887.63it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 563826.32it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 565857.29it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 555139.90it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 551620.81it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 557464.08it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 553433.17it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 565026.40it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 19966it [00:00, 575275.80it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 559606.14it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 552376.34it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 15040it [00:00, 434693.82it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 558652.09it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18223it [00:00, 515462.65it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 564881.82it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 19901it [00:00, 564514.75it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 16353it [00:00, 470551.39it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18121it [00:00, 531061.44it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 570102.89it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 567411.26it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 576109.00it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 571703.67it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 19703it [00:00, 563913.34it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 549640.15it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 573148.95it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 583937.18it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 19970it [00:00, 566586.97it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 18779it [00:00, 534745.71it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 19774it [00:00, 567859.61it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 560473.58it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 17786it [00:00, 508669.15it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 566805.50it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 325011.35it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 564440.92it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 561539.10it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 569916.98it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 567035.38it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 563281.14it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 19950it [00:00, 561386.65it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 571656.92it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 565552.09it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 16042it [00:00, 444389.57it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 567833.75it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 19996it [00:00, 576520.38it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 565567.35it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 566178.10it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 16806it [00:00, 485641.96it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 19225it [00:00, 549868.69it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 562450.25it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 561433.87it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 547730.88it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 559972.23it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 19992it [00:00, 561415.95it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 571656.92it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 547959.87it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 561358.73it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 560121.79it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 19929it [00:00, 564766.63it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 19996it [00:00, 532804.59it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 557427.04it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 19610it [00:00, 549944.85it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 562254.22it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 565712.28it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 568295.37it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 569321.32it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 562118.58it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 560683.36it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 565811.49it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 549373.78it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 560968.32it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 570746.79it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 15920it [00:00, 449279.85it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 564144.83it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 19974it [00:00, 578426.83it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 546240.02it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 558310.02it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 15369it [00:00, 437964.60it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 19563it [00:00, 554769.41it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 548547.51it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 558912.64it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 539363.20it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 564410.53it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 554582.04it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 569514.58it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 570025.41it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 559218.16it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 560308.86it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 19982it [00:00, 574123.73it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 19986it [00:00, 571019.39it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 565826.76it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 19927it [00:00, 521546.39it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 564296.63it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 558005.48it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 557857.05it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 573008.01it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 572945.39it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 562133.65it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 567511.06it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 565483.47it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 566422.77it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 100%|██████████| 10000/10000 [00:00<00:00, 573101.96it/s]
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]Drawing 10000 posterior samples: 16930it [00:00, 479765.19it/s]           
lstm_sbi.py:455: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  points=torch.tensor(true_theta),
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  arr_value = np.array(value)
/home/SHARED/software/anaconda3/2020.07e/lib/python3.8/site-packages/pandas/core/internals/blocks.py:867: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  arr_value = np.array(value)
30
Training neural network. Epochs trained:  1Training neural network. Epochs trained:  2Training neural network. Epochs trained:  3Training neural network. Epochs trained:  4Training neural network. Epochs trained:  5Training neural network. Epochs trained:  6Training neural network. Epochs trained:  7Training neural network. Epochs trained:  8Training neural network. Epochs trained:  9Training neural network. Epochs trained:  10Training neural network. Epochs trained:  11Training neural network. Epochs trained:  12Training neural network. Epochs trained:  13Training neural network. Epochs trained:  14Training neural network. Epochs trained:  15Training neural network. Epochs trained:  16Training neural network. Epochs trained:  17Training neural network. Epochs trained:  18Training neural network. Epochs trained:  19Training neural network. Epochs trained:  20Training neural network. Epochs trained:  21Training neural network. Epochs trained:  22Training neural network. Epochs trained:  23Training neural network. Epochs trained:  24Training neural network. Epochs trained:  25Training neural network. Epochs trained:  26Training neural network. Epochs trained:  27Training neural network. Epochs trained:  28Training neural network. Epochs trained:  29Training neural network. Epochs trained:  30Training neural network. Epochs trained:  31Training neural network. Epochs trained:  32Training neural network. Epochs trained:  33Training neural network. Epochs trained:  34Training neural network. Epochs trained:  35Training neural network. Epochs trained:  36Training neural network. Epochs trained:  37Training neural network. Epochs trained:  38Training neural network. Epochs trained:  39Training neural network. Epochs trained:  40Training neural network. Epochs trained:  41Training neural network. Epochs trained:  42Training neural network. Epochs trained:  43Training neural network. Epochs trained:  44Training neural network. Epochs trained:  45Training neural network. Epochs trained:  46Training neural network. Epochs trained:  47Training neural network. Epochs trained:  48Training neural network. Epochs trained:  49Training neural network. Epochs trained:  50Training neural network. Epochs trained:  51Training neural network. Epochs trained:  52Training neural network. Epochs trained:  53Training neural network. Epochs trained:  54Training neural network. Epochs trained:  55Training neural network. Epochs trained:  56Training neural network. Epochs trained:  57Training neural network. Epochs trained:  58Training neural network. Epochs trained:  59Training neural network. Epochs trained:  60Training neural network. Epochs trained:  61Training neural network. Epochs trained:  62Training neural network. Epochs trained:  63Training neural network. Epochs trained:  64Training neural network. Epochs trained:  65Training neural network. Epochs trained:  66Training neural network. Epochs trained:  67Training neural network. Epochs trained:  68Training neural network. Epochs trained:  69Training neural network. Epochs trained:  70Training neural network. Epochs trained:  71Training neural network. Epochs trained:  72Training neural network. Epochs trained:  73Training neural network. Epochs trained:  74Training neural network. Epochs trained:  75Training neural network. Epochs trained:  76Training neural network. Epochs trained:  77Training neural network. Epochs trained:  78Training neural network. Epochs trained:  79Training neural network. Epochs trained:  80Training neural network. Epochs trained:  81Training neural network. Epochs trained:  82Training neural network. Epochs trained:  83Training neural network. Epochs trained:  84Training neural network. Epochs trained:  85Training neural network. Epochs trained:  86Training neural network. Epochs trained:  87Training neural network. Epochs trained:  88Training neural network. Epochs trained:  89Training neural network. Epochs trained:  90Training neural network. Epochs trained:  91Training neural network. Epochs trained:  92Training neural network. Epochs trained:  93Training neural network. Epochs trained:  94Training neural network. Epochs trained:  95Training neural network. Epochs trained:  96Training neural network. Epochs trained:  97Training neural network. Epochs trained:  98Training neural network. Epochs trained:  99Training neural network. Epochs trained:  100Training neural network. Epochs trained:  101Training neural network. Epochs trained:  102Training neural network. Epochs trained:  103Training neural network. Epochs trained:  104Training neural network. Epochs trained:  105Training neural network. Epochs trained:  106Training neural network. Epochs trained:  107Training neural network. Epochs trained:  108Training neural network. Epochs trained:  109Training neural network. Epochs trained:  110Training neural network. Epochs trained:  111Training neural network. Epochs trained:  112Training neural network. Epochs trained:  113Training neural network. Epochs trained:  114Training neural network. Epochs trained:  115Training neural network. Epochs trained:  116Training neural network. Epochs trained:  117Training neural network. Epochs trained:  118Training neural network. Epochs trained:  119Training neural network. Epochs trained:  120Training neural network. Epochs trained:  121Training neural network. Epochs trained:  122Training neural network. Epochs trained:  123Training neural network. Epochs trained:  124Training neural network. Epochs trained:  125Training neural network. Epochs trained:  126Training neural network. Epochs trained:  127Training neural network. Epochs trained:  128Training neural network. Epochs trained:  129Training neural network. Epochs trained:  130Training neural network. Epochs trained:  131Training neural network. Epochs trained:  132Training neural network. Epochs trained:  133Training neural network. Epochs trained:  134Training neural network. Epochs trained:  135Training neural network. Epochs trained:  136Training neural network. Epochs trained:  137Training neural network. Epochs trained:  138Training neural network. Epochs trained:  139Training neural network. Epochs trained:  140Training neural network. Epochs trained:  141Training neural network. Epochs trained:  142Training neural network. Epochs trained:  143Training neural network. Epochs trained:  144Training neural network. Epochs trained:  145Training neural network. Epochs trained:  146Training neural network. Epochs trained:  147Training neural network. Epochs trained:  148Training neural network. Epochs trained:  149Training neural network. Epochs trained:  150Training neural network. Epochs trained:  151Training neural network. Epochs trained:  152Training neural network. Epochs trained:  153Training neural network. Epochs trained:  154Training neural network. Epochs trained:  155Training neural network. Epochs trained:  156Training neural network. Epochs trained:  157Training neural network. Epochs trained:  158Training neural network. Epochs trained:  159Training neural network. Epochs trained:  160Training neural network. Epochs trained:  161Training neural network. Epochs trained:  162Training neural network. Epochs trained:  163Training neural network. Epochs trained:  164Training neural network. Epochs trained:  165Training neural network. Epochs trained:  166Training neural network. Epochs trained:  167Training neural network. Epochs trained:  168Training neural network. Epochs trained:  169Training neural network. Epochs trained:  170Training neural network. Epochs trained:  171Training neural network. Epochs trained:  172Training neural network. Epochs trained:  173Training neural network. Epochs trained:  174Training neural network. Epochs trained:  175Training neural network. Epochs trained:  176Training neural network. Epochs trained:  177Training neural network. Epochs trained:  178Training neural network. Epochs trained:  179Training neural network. Epochs trained:  180Training neural network. Epochs trained:  181Training neural network. Epochs trained:  182Training neural network. Epochs trained:  183Training neural network. Epochs trained:  184Training neural network. Epochs trained:  185Training neural network. Epochs trained:  186Training neural network. Epochs trained:  187Training neural network. Epochs trained:  188Training neural network. Epochs trained:  189Training neural network. Epochs trained:  190Training neural network. Epochs trained:  191Training neural network. Epochs trained:  192Training neural network. Epochs trained:  193Training neural network. Epochs trained:  194Training neural network. Epochs trained:  195Training neural network. Epochs trained:  196Training neural network. Epochs trained:  197Training neural network. Epochs trained:  198Training neural network. Epochs trained:  199Training neural network. Epochs trained:  200Training neural network. Epochs trained:  201Training neural network. Epochs trained:  202Training neural network. Epochs trained:  203Training neural network. Epochs trained:  204Training neural network. Epochs trained:  205Training neural network. Epochs trained:  206Training neural network. Epochs trained:  207Training neural network. Epochs trained:  208Training neural network. Epochs trained:  209Training neural network. Epochs trained:  210Training neural network. Epochs trained:  211Training neural network. Epochs trained:  212Training neural network. Epochs trained:  213Training neural network. Epochs trained:  214Training neural network. Epochs trained:  215Training neural network. Epochs trained:  216Training neural network. Epochs trained:  217Training neural network. Epochs trained:  218Training neural network. Epochs trained:  219Training neural network. Epochs trained:  220Training neural network. Epochs trained:  221Training neural network. Epochs trained:  222Training neural network. Epochs trained:  223Training neural network. Epochs trained:  224Training neural network. Epochs trained:  225Training neural network. Epochs trained:  226Training neural network. Epochs trained:  227Training neural network. Epochs trained:  228Training neural network. Epochs trained:  229Training neural network. Epochs trained:  230Training neural network. Epochs trained:  231Training neural network. Epochs trained:  232Training neural network. Epochs trained:  233Training neural network. Epochs trained:  234Training neural network. Epochs trained:  235Training neural network. Epochs trained:  236Training neural network. Epochs trained:  237Training neural network. Epochs trained:  238Training neural network. Epochs trained:  239Training neural network. Epochs trained:  240Training neural network. Epochs trained:  241Neural network successfully converged after 241 epochs.
Training neural network. Epochs trained:  1Training neural network. Epochs trained:  2Training neural network. Epochs trained:  3Training neural network. Epochs trained:  4Training neural network. Epochs trained:  5Training neural network. Epochs trained:  6Training neural network. Epochs trained:  7Training neural network. Epochs trained:  8Training neural network. Epochs trained:  9Training neural network. Epochs trained:  10Training neural network. Epochs trained:  11Training neural network. Epochs trained:  12Training neural network. Epochs trained:  13Training neural network. Epochs trained:  14Training neural network. Epochs trained:  15Training neural network. Epochs trained:  16Training neural network. Epochs trained:  17Training neural network. Epochs trained:  18Training neural network. Epochs trained:  19Training neural network. Epochs trained:  20Training neural network. Epochs trained:  21Training neural network. Epochs trained:  22Training neural network. Epochs trained:  23Training neural network. Epochs trained:  24Training neural network. Epochs trained:  25Training neural network. Epochs trained:  26Training neural network. Epochs trained:  27Training neural network. Epochs trained:  28Training neural network. Epochs trained:  29Training neural network. Epochs trained:  30Training neural network. Epochs trained:  31Training neural network. Epochs trained:  32Training neural network. Epochs trained:  33Training neural network. Epochs trained:  34Training neural network. Epochs trained:  35Training neural network. Epochs trained:  36Training neural network. Epochs trained:  37Training neural network. Epochs trained:  38Training neural network. Epochs trained:  39Training neural network. Epochs trained:  40Training neural network. Epochs trained:  41Training neural network. Epochs trained:  42Training neural network. Epochs trained:  43Training neural network. Epochs trained:  44Training neural network. Epochs trained:  45Training neural network. Epochs trained:  46Training neural network. Epochs trained:  47Training neural network. Epochs trained:  48Training neural network. Epochs trained:  49Training neural network. Epochs trained:  50Training neural network. Epochs trained:  51Training neural network. Epochs trained:  52Training neural network. Epochs trained:  53Training neural network. Epochs trained:  54Training neural network. Epochs trained:  55Training neural network. Epochs trained:  56Training neural network. Epochs trained:  57Training neural network. Epochs trained:  58Training neural network. Epochs trained:  59Training neural network. Epochs trained:  60Training neural network. Epochs trained:  61Training neural network. Epochs trained:  62Training neural network. Epochs trained:  63Training neural network. Epochs trained:  64Training neural network. Epochs trained:  65Training neural network. Epochs trained:  66Training neural network. Epochs trained:  67Training neural network. Epochs trained:  68Training neural network. Epochs trained:  69Training neural network. Epochs trained:  70Training neural network. Epochs trained:  71Training neural network. Epochs trained:  72Training neural network. Epochs trained:  73Training neural network. Epochs trained:  74Training neural network. Epochs trained:  75Training neural network. Epochs trained:  76Training neural network. Epochs trained:  77Training neural network. Epochs trained:  78Training neural network. Epochs trained:  79Training neural network. Epochs trained:  80Training neural network. Epochs trained:  81Training neural network. Epochs trained:  82Training neural network. Epochs trained:  83Training neural network. Epochs trained:  84Training neural network. Epochs trained:  85Training neural network. Epochs trained:  86Training neural network. Epochs trained:  87Training neural network. Epochs trained:  88Training neural network. Epochs trained:  89Training neural network. Epochs trained:  90Training neural network. Epochs trained:  91Training neural network. Epochs trained:  92Training neural network. Epochs trained:  93Training neural network. Epochs trained:  94Training neural network. Epochs trained:  95Training neural network. Epochs trained:  96Training neural network. Epochs trained:  97Training neural network. Epochs trained:  98Training neural network. Epochs trained:  99Training neural network. Epochs trained:  100Training neural network. Epochs trained:  101Training neural network. Epochs trained:  102Training neural network. Epochs trained:  103Training neural network. Epochs trained:  104Training neural network. Epochs trained:  105Training neural network. Epochs trained:  106Training neural network. Epochs trained:  107Training neural network. Epochs trained:  108Training neural network. Epochs trained:  109Training neural network. Epochs trained:  110Training neural network. Epochs trained:  111Training neural network. Epochs trained:  112Training neural network. Epochs trained:  113Training neural network. Epochs trained:  114Training neural network. Epochs trained:  115Training neural network. Epochs trained:  116Training neural network. Epochs trained:  117Training neural network. Epochs trained:  118Training neural network. Epochs trained:  119Training neural network. Epochs trained:  120Training neural network. Epochs trained:  121Training neural network. Epochs trained:  122Training neural network. Epochs trained:  123Training neural network. Epochs trained:  124Training neural network. Epochs trained:  125Training neural network. Epochs trained:  126Training neural network. Epochs trained:  127Training neural network. Epochs trained:  128Training neural network. Epochs trained:  129Training neural network. Epochs trained:  130Training neural network. Epochs trained:  131Training neural network. Epochs trained:  132Training neural network. Epochs trained:  133Training neural network. Epochs trained:  134Training neural network. Epochs trained:  135Training neural network. Epochs trained:  136Training neural network. Epochs trained:  137Training neural network. Epochs trained:  138Training neural network. Epochs trained:  139Training neural network. Epochs trained:  140Training neural network. Epochs trained:  141Training neural network. Epochs trained:  142Training neural network. Epochs trained:  143Training neural network. Epochs trained:  144Training neural network. Epochs trained:  145Training neural network. Epochs trained:  146Training neural network. Epochs trained:  147Training neural network. Epochs trained:  148Training neural network. Epochs trained:  149Training neural network. Epochs trained:  150Training neural network. Epochs trained:  151Training neural network. Epochs trained:  152Training neural network. Epochs trained:  153Training neural network. Epochs trained:  154Training neural network. Epochs trained:  155Training neural network. Epochs trained:  156Training neural network. Epochs trained:  157Training neural network. Epochs trained:  158Training neural network. Epochs trained:  159Training neural network. Epochs trained:  160Training neural network. Epochs trained:  161Training neural network. Epochs trained:  162Training neural network. Epochs trained:  163Training neural network. Epochs trained:  164Training neural network. Epochs trained:  165Training neural network. Epochs trained:  166Training neural network. Epochs trained:  167Training neural network. Epochs trained:  168Training neural network. Epochs trained:  169Training neural network. Epochs trained:  170Training neural network. Epochs trained:  171Training neural network. Epochs trained:  172Training neural network. Epochs trained:  173Training neural network. Epochs trained:  174Training neural network. Epochs trained:  175Training neural network. Epochs trained:  176Training neural network. Epochs trained:  177Training neural network. Epochs trained:  178Training neural network. Epochs trained:  179Training neural network. Epochs trained:  180Training neural network. Epochs trained:  181Training neural network. Epochs trained:  182Training neural network. Epochs trained:  183Training neural network. Epochs trained:  184Training neural network. Epochs trained:  185Training neural network. Epochs trained:  186Training neural network. Epochs trained:  187Training neural network. Epochs trained:  188Training neural network. Epochs trained:  189Training neural network. Epochs trained:  190Training neural network. Epochs trained:  191Training neural network. Epochs trained:  192Training neural network. Epochs trained:  193Training neural network. Epochs trained:  194Training neural network. Epochs trained:  195Training neural network. Epochs trained:  196Training neural network. Epochs trained:  197Training neural network. Epochs trained:  198Training neural network. Epochs trained:  199Training neural network. Epochs trained:  200Training neural network. Epochs trained:  201Training neural network. Epochs trained:  202Training neural network. Epochs trained:  203Training neural network. Epochs trained:  204Training neural network. Epochs trained:  205Training neural network. Epochs trained:  206Training neural network. Epochs trained:  207Training neural network. Epochs trained:  208Training neural network. Epochs trained:  209Training neural network. Epochs trained:  210Training neural network. Epochs trained:  211Training neural network. Epochs trained:  212Training neural network. Epochs trained:  213Training neural network. Epochs trained:  214Training neural network. Epochs trained:  215Training neural network. Epochs trained:  216Training neural network. Epochs trained:  217Training neural network. Epochs trained:  218Training neural network. Epochs trained:  219Training neural network. Epochs trained:  220Training neural network. Epochs trained:  221Training neural network. Epochs trained:  222Training neural network. Epochs trained:  223Training neural network. Epochs trained:  224Training neural network. Epochs trained:  225Training neural network. Epochs trained:  226Training neural network. Epochs trained:  227Training neural network. Epochs trained:  228Training neural network. Epochs trained:  229Training neural network. Epochs trained:  230Training neural network. Epochs trained:  231Training neural network. Epochs trained:  232Training neural network. Epochs trained:  233Training neural network. Epochs trained:  234Training neural network. Epochs trained:  235Training neural network. Epochs trained:  236Training neural network. Epochs trained:  237Training neural network. Epochs trained:  238Training neural network. Epochs trained:  239Training neural network. Epochs trained:  240Training neural network. Epochs trained:  241Training neural network. Epochs trained:  242Training neural network. Epochs trained:  243Training neural network. Epochs trained:  244Training neural network. Epochs trained:  245Training neural network. Epochs trained:  246Training neural network. Epochs trained:  247Training neural network. Epochs trained:  248Training neural network. Epochs trained:  249Training neural network. Epochs trained:  250Training neural network. Epochs trained:  251Training neural network. Epochs trained:  252Training neural network. Epochs trained:  253Training neural network. Epochs trained:  254Training neural network. Epochs trained:  255Training neural network. Epochs trained:  256Training neural network. Epochs trained:  257Training neural network. Epochs trained:  258Training neural network. Epochs trained:  259Training neural network. Epochs trained:  260Training neural network. Epochs trained:  261Training neural network. Epochs trained:  262Training neural network. Epochs trained:  263Training neural network. Epochs trained:  264Training neural network. Epochs trained:  265Training neural network. Epochs trained:  266Training neural network. Epochs trained:  267Training neural network. Epochs trained:  268Training neural network. Epochs trained:  269Training neural network. Epochs trained:  270Training neural network. Epochs trained:  271Training neural network. Epochs trained:  272Training neural network. Epochs trained:  273Training neural network. Epochs trained:  274Training neural network. Epochs trained:  275Training neural network. Epochs trained:  276Training neural network. Epochs trained:  277Training neural network. Epochs trained:  278Training neural network. Epochs trained:  279Training neural network. Epochs trained:  280Training neural network. Epochs trained:  281Training neural network. Epochs trained:  282Training neural network. Epochs trained:  283Training neural network. Epochs trained:  284Training neural network. Epochs trained:  285Training neural network. Epochs trained:  286Training neural network. Epochs trained:  287Training neural network. Epochs trained:  288Training neural network. Epochs trained:  289Training neural network. Epochs trained:  290Training neural network. Epochs trained:  291Training neural network. Epochs trained:  292Training neural network. Epochs trained:  293Training neural network. Epochs trained:  294Training neural network. Epochs trained:  295Training neural network. Epochs trained:  296Training neural network. Epochs trained:  297Training neural network. Epochs trained:  298Training neural network. Epochs trained:  299Training neural network. Epochs trained:  300Training neural network. Epochs trained:  301Training neural network. Epochs trained:  302Training neural network. Epochs trained:  303Training neural network. Epochs trained:  304Training neural network. Epochs trained:  305Training neural network. Epochs trained:  306Training neural network. Epochs trained:  307Training neural network. Epochs trained:  308Training neural network. Epochs trained:  309Training neural network. Epochs trained:  310Training neural network. Epochs trained:  311Training neural network. Epochs trained:  312Training neural network. Epochs trained:  313Training neural network. Epochs trained:  314Training neural network. Epochs trained:  315Training neural network. Epochs trained:  316Training neural network. Epochs trained:  317Training neural network. Epochs trained:  318Training neural network. Epochs trained:  319Training neural network. Epochs trained:  320Training neural network. Epochs trained:  321Training neural network. Epochs trained:  322Training neural network. Epochs trained:  323Training neural network. Epochs trained:  324Training neural network. Epochs trained:  325Training neural network. Epochs trained:  326Training neural network. Epochs trained:  327Training neural network. Epochs trained:  328Training neural network. Epochs trained:  329Training neural network. Epochs trained:  330Training neural network. Epochs trained:  331Training neural network. Epochs trained:  332Training neural network. Epochs trained:  333Training neural network. Epochs trained:  334Training neural network. Epochs trained:  335Training neural network. Epochs trained:  336Training neural network. Epochs trained:  337Training neural network. Epochs trained:  338Training neural network. Epochs trained:  339Training neural network. Epochs trained:  340Training neural network. Epochs trained:  341Training neural network. Epochs trained:  342Training neural network. Epochs trained:  343Training neural network. Epochs trained:  344Training neural network. Epochs trained:  345Training neural network. Epochs trained:  346Training neural network. Epochs trained:  347Neural network successfully converged after 347 epochs.
Training neural network. Epochs trained:  1Training neural network. Epochs trained:  2Training neural network. Epochs trained:  3Training neural network. Epochs trained:  4Training neural network. Epochs trained:  5Training neural network. Epochs trained:  6Training neural network. Epochs trained:  7Training neural network. Epochs trained:  8Training neural network. Epochs trained:  9Training neural network. Epochs trained:  10Training neural network. Epochs trained:  11Training neural network. Epochs trained:  12Training neural network. Epochs trained:  13Training neural network. Epochs trained:  14Training neural network. Epochs trained:  15Training neural network. Epochs trained:  16Training neural network. Epochs trained:  17Training neural network. Epochs trained:  18Training neural network. Epochs trained:  19Training neural network. Epochs trained:  20Training neural network. Epochs trained:  21Training neural network. Epochs trained:  22Training neural network. Epochs trained:  23Training neural network. Epochs trained:  24Training neural network. Epochs trained:  25Training neural network. Epochs trained:  26Training neural network. Epochs trained:  27Training neural network. Epochs trained:  28Training neural network. Epochs trained:  29Training neural network. Epochs trained:  30Training neural network. Epochs trained:  31Training neural network. Epochs trained:  32Training neural network. Epochs trained:  33Training neural network. Epochs trained:  34Training neural network. Epochs trained:  35Training neural network. Epochs trained:  36Training neural network. Epochs trained:  37Training neural network. Epochs trained:  38Training neural network. Epochs trained:  39Training neural network. Epochs trained:  40Training neural network. Epochs trained:  41Training neural network. Epochs trained:  42Training neural network. Epochs trained:  43Training neural network. Epochs trained:  44Training neural network. Epochs trained:  45Training neural network. Epochs trained:  46Training neural network. Epochs trained:  47Training neural network. Epochs trained:  48Training neural network. Epochs trained:  49Training neural network. Epochs trained:  50Training neural network. Epochs trained:  51Training neural network. Epochs trained:  52Training neural network. Epochs trained:  53Training neural network. Epochs trained:  54Training neural network. Epochs trained:  55Training neural network. Epochs trained:  56Training neural network. Epochs trained:  57Training neural network. Epochs trained:  58Training neural network. Epochs trained:  59Training neural network. Epochs trained:  60Training neural network. Epochs trained:  61Training neural network. Epochs trained:  62Training neural network. Epochs trained:  63Training neural network. Epochs trained:  64Training neural network. Epochs trained:  65Training neural network. Epochs trained:  66Training neural network. Epochs trained:  67Training neural network. Epochs trained:  68Training neural network. Epochs trained:  69Training neural network. Epochs trained:  70Training neural network. Epochs trained:  71Training neural network. Epochs trained:  72Training neural network. Epochs trained:  73Training neural network. Epochs trained:  74Training neural network. Epochs trained:  75Training neural network. Epochs trained:  76Training neural network. Epochs trained:  77Training neural network. Epochs trained:  78Training neural network. Epochs trained:  79Training neural network. Epochs trained:  80Training neural network. Epochs trained:  81Training neural network. Epochs trained:  82Training neural network. Epochs trained:  83Training neural network. Epochs trained:  84Training neural network. Epochs trained:  85Training neural network. Epochs trained:  86Training neural network. Epochs trained:  87Training neural network. Epochs trained:  88Training neural network. Epochs trained:  89Training neural network. Epochs trained:  90Training neural network. Epochs trained:  91Training neural network. Epochs trained:  92Training neural network. Epochs trained:  93Training neural network. Epochs trained:  94Training neural network. Epochs trained:  95Training neural network. Epochs trained:  96Training neural network. Epochs trained:  97Training neural network. Epochs trained:  98Training neural network. Epochs trained:  99Training neural network. Epochs trained:  100Training neural network. Epochs trained:  101Training neural network. Epochs trained:  102Training neural network. Epochs trained:  103Training neural network. Epochs trained:  104Training neural network. Epochs trained:  105Training neural network. Epochs trained:  106Training neural network. Epochs trained:  107Training neural network. Epochs trained:  108Training neural network. Epochs trained:  109Training neural network. Epochs trained:  110Training neural network. Epochs trained:  111Training neural network. Epochs trained:  112Training neural network. Epochs trained:  113Training neural network. Epochs trained:  114Training neural network. Epochs trained:  115Training neural network. Epochs trained:  116Training neural network. Epochs trained:  117Training neural network. Epochs trained:  118Training neural network. Epochs trained:  119Training neural network. Epochs trained:  120Training neural network. Epochs trained:  121Training neural network. Epochs trained:  122Training neural network. Epochs trained:  123Training neural network. Epochs trained:  124Training neural network. Epochs trained:  125Training neural network. Epochs trained:  126Training neural network. Epochs trained:  127Training neural network. Epochs trained:  128Training neural network. Epochs trained:  129Training neural network. Epochs trained:  130Training neural network. Epochs trained:  131Training neural network. Epochs trained:  132Training neural network. Epochs trained:  133Training neural network. Epochs trained:  134Training neural network. Epochs trained:  135Training neural network. Epochs trained:  136Training neural network. Epochs trained:  137Training neural network. Epochs trained:  138Training neural network. Epochs trained:  139Training neural network. Epochs trained:  140Training neural network. Epochs trained:  141Training neural network. Epochs trained:  142Training neural network. Epochs trained:  143Training neural network. Epochs trained:  144Training neural network. Epochs trained:  145Training neural network. Epochs trained:  146Training neural network. Epochs trained:  147Training neural network. Epochs trained:  148Training neural network. Epochs trained:  149Training neural network. Epochs trained:  150Training neural network. Epochs trained:  151Training neural network. Epochs trained:  152Training neural network. Epochs trained:  153Training neural network. Epochs trained:  154Training neural network. Epochs trained:  155Training neural network. Epochs trained:  156Training neural network. Epochs trained:  157Training neural network. Epochs trained:  158Training neural network. Epochs trained:  159Training neural network. Epochs trained:  160Training neural network. Epochs trained:  161Training neural network. Epochs trained:  162Training neural network. Epochs trained:  163Training neural network. Epochs trained:  164Training neural network. Epochs trained:  165Training neural network. Epochs trained:  166Training neural network. Epochs trained:  167Training neural network. Epochs trained:  168Training neural network. Epochs trained:  169Training neural network. Epochs trained:  170Training neural network. Epochs trained:  171Training neural network. Epochs trained:  172Training neural network. Epochs trained:  173Training neural network. Epochs trained:  174Training neural network. Epochs trained:  175Training neural network. Epochs trained:  176Training neural network. Epochs trained:  177Training neural network. Epochs trained:  178Training neural network. Epochs trained:  179Training neural network. Epochs trained:  180Training neural network. Epochs trained:  181Training neural network. Epochs trained:  182Training neural network. Epochs trained:  183Training neural network. Epochs trained:  184Training neural network. Epochs trained:  185Training neural network. Epochs trained:  186Training neural network. Epochs trained:  187Training neural network. Epochs trained:  188Training neural network. Epochs trained:  189Training neural network. Epochs trained:  190Training neural network. Epochs trained:  191Training neural network. Epochs trained:  192Training neural network. Epochs trained:  193Training neural network. Epochs trained:  194Training neural network. Epochs trained:  195Training neural network. Epochs trained:  196Training neural network. Epochs trained:  197Training neural network. Epochs trained:  198Training neural network. Epochs trained:  199Training neural network. Epochs trained:  200Training neural network. Epochs trained:  201Training neural network. Epochs trained:  202Training neural network. Epochs trained:  203Training neural network. Epochs trained:  204Training neural network. Epochs trained:  205Training neural network. Epochs trained:  206Training neural network. Epochs trained:  207Training neural network. Epochs trained:  208Training neural network. Epochs trained:  209Training neural network. Epochs trained:  210Training neural network. Epochs trained:  211Training neural network. Epochs trained:  212Training neural network. Epochs trained:  213Training neural network. Epochs trained:  214Training neural network. Epochs trained:  215Training neural network. Epochs trained:  216Training neural network. Epochs trained:  217Training neural network. Epochs trained:  218Training neural network. Epochs trained:  219Training neural network. Epochs trained:  220Training neural network. Epochs trained:  221Training neural network. Epochs trained:  222Training neural network. Epochs trained:  223Training neural network. Epochs trained:  224Training neural network. Epochs trained:  225Training neural network. Epochs trained:  226Training neural network. Epochs trained:  227Training neural network. Epochs trained:  228Training neural network. Epochs trained:  229Training neural network. Epochs trained:  230Training neural network. Epochs trained:  231Training neural network. Epochs trained:  232Training neural network. Epochs trained:  233Training neural network. Epochs trained:  234Training neural network. Epochs trained:  235Training neural network. Epochs trained:  236Training neural network. Epochs trained:  237Training neural network. Epochs trained:  238Training neural network. Epochs trained:  239Training neural network. Epochs trained:  240Training neural network. Epochs trained:  241Training neural network. Epochs trained:  242Training neural network. Epochs trained:  243Training neural network. Epochs trained:  244Training neural network. Epochs trained:  245Training neural network. Epochs trained:  246Training neural network. Epochs trained:  247Training neural network. Epochs trained:  248Training neural network. Epochs trained:  249Training neural network. Epochs trained:  250Training neural network. Epochs trained:  251Training neural network. Epochs trained:  252Training neural network. Epochs trained:  253Training neural network. Epochs trained:  254Training neural network. Epochs trained:  255Training neural network. Epochs trained:  256Training neural network. Epochs trained:  257Training neural network. Epochs trained:  258Training neural network. Epochs trained:  259Training neural network. Epochs trained:  260Training neural network. Epochs trained:  261Training neural network. Epochs trained:  262Training neural network. Epochs trained:  263Training neural network. Epochs trained:  264Training neural network. Epochs trained:  265Training neural network. Epochs trained:  266Training neural network. Epochs trained:  267Training neural network. Epochs trained:  268Training neural network. Epochs trained:  269Training neural network. Epochs trained:  270Training neural network. Epochs trained:  271Training neural network. Epochs trained:  272Training neural network. Epochs trained:  273Training neural network. Epochs trained:  274Training neural network. Epochs trained:  275Training neural network. Epochs trained:  276Training neural network. Epochs trained:  277Training neural network. Epochs trained:  278Training neural network. Epochs trained:  279Training neural network. Epochs trained:  280Training neural network. Epochs trained:  281Training neural network. Epochs trained:  282Training neural network. Epochs trained:  283Training neural network. Epochs trained:  284Training neural network. Epochs trained:  285Training neural network. Epochs trained:  286Training neural network. Epochs trained:  287Training neural network. Epochs trained:  288Training neural network. Epochs trained:  289Training neural network. Epochs trained:  290Training neural network. Epochs trained:  291Training neural network. Epochs trained:  292Training neural network. Epochs trained:  293Training neural network. Epochs trained:  294Training neural network. Epochs trained:  295Training neural network. Epochs trained:  296Training neural network. Epochs trained:  297Training neural network. Epochs trained:  298Training neural network. Epochs trained:  299Training neural network. Epochs trained:  300Training neural network. Epochs trained:  301Training neural network. Epochs trained:  302Training neural network. Epochs trained:  303Training neural network. Epochs trained:  304Training neural network. Epochs trained:  305Training neural network. Epochs trained:  306Training neural network. Epochs trained:  307Training neural network. Epochs trained:  308Training neural network. Epochs trained:  309Training neural network. Epochs trained:  310Training neural network. Epochs trained:  311Training neural network. Epochs trained:  312Training neural network. Epochs trained:  313Training neural network. Epochs trained:  314Training neural network. Epochs trained:  315Training neural network. Epochs trained:  316Training neural network. Epochs trained:  317Training neural network. Epochs trained:  318Training neural network. Epochs trained:  319Training neural network. Epochs trained:  320Training neural network. Epochs trained:  321Training neural network. Epochs trained:  322Training neural network. Epochs trained:  323Training neural network. Epochs trained:  324Training neural network. Epochs trained:  325Training neural network. Epochs trained:  326Training neural network. Epochs trained:  327Training neural network. Epochs trained:  328Training neural network. Epochs trained:  329Training neural network. Epochs trained:  330Training neural network. Epochs trained:  331Training neural network. Epochs trained:  332Training neural network. Epochs trained:  333Training neural network. Epochs trained:  334Training neural network. Epochs trained:  335Training neural network. Epochs trained:  336Training neural network. Epochs trained:  337Training neural network. Epochs trained:  338Training neural network. Epochs trained:  339Training neural network. Epochs trained:  340Training neural network. Epochs trained:  341Training neural network. Epochs trained:  342Training neural network. Epochs trained:  343Neural network successfully converged after 343 epochs.
Training neural network. Epochs trained:  1Training neural network. Epochs trained:  2Training neural network. Epochs trained:  3Training neural network. Epochs trained:  4Training neural network. Epochs trained:  5Training neural network. Epochs trained:  6Training neural network. Epochs trained:  7Training neural network. Epochs trained:  8Training neural network. Epochs trained:  9Training neural network. Epochs trained:  10Training neural network. Epochs trained:  11Training neural network. Epochs trained:  12Training neural network. Epochs trained:  13Training neural network. Epochs trained:  14Training neural network. Epochs trained:  15Training neural network. Epochs trained:  16Training neural network. Epochs trained:  17Training neural network. Epochs trained:  18Training neural network. Epochs trained:  19Training neural network. Epochs trained:  20Training neural network. Epochs trained:  21Training neural network. Epochs trained:  22Training neural network. Epochs trained:  23Training neural network. Epochs trained:  24Training neural network. Epochs trained:  25Training neural network. Epochs trained:  26Training neural network. Epochs trained:  27Training neural network. Epochs trained:  28Training neural network. Epochs trained:  29Training neural network. Epochs trained:  30Training neural network. Epochs trained:  31Training neural network. Epochs trained:  32Training neural network. Epochs trained:  33Training neural network. Epochs trained:  34Training neural network. Epochs trained:  35Training neural network. Epochs trained:  36Training neural network. Epochs trained:  37Training neural network. Epochs trained:  38Training neural network. Epochs trained:  39Training neural network. Epochs trained:  40Training neural network. Epochs trained:  41Training neural network. Epochs trained:  42Training neural network. Epochs trained:  43Training neural network. Epochs trained:  44Training neural network. Epochs trained:  45Training neural network. Epochs trained:  46Training neural network. Epochs trained:  47Training neural network. Epochs trained:  48Training neural network. Epochs trained:  49Training neural network. Epochs trained:  50Training neural network. Epochs trained:  51Training neural network. Epochs trained:  52Training neural network. Epochs trained:  53Training neural network. Epochs trained:  54Training neural network. Epochs trained:  55Training neural network. Epochs trained:  56Training neural network. Epochs trained:  57Training neural network. Epochs trained:  58Training neural network. Epochs trained:  59Training neural network. Epochs trained:  60Training neural network. Epochs trained:  61Training neural network. Epochs trained:  62Training neural network. Epochs trained:  63Training neural network. Epochs trained:  64Training neural network. Epochs trained:  65Training neural network. Epochs trained:  66Training neural network. Epochs trained:  67Training neural network. Epochs trained:  68Training neural network. Epochs trained:  69Training neural network. Epochs trained:  70Training neural network. Epochs trained:  71Training neural network. Epochs trained:  72Training neural network. Epochs trained:  73Training neural network. Epochs trained:  74Training neural network. Epochs trained:  75Training neural network. Epochs trained:  76Training neural network. Epochs trained:  77Training neural network. Epochs trained:  78Training neural network. Epochs trained:  79Training neural network. Epochs trained:  80Training neural network. Epochs trained:  81Training neural network. Epochs trained:  82Training neural network. Epochs trained:  83Training neural network. Epochs trained:  84Training neural network. Epochs trained:  85Training neural network. Epochs trained:  86Training neural network. Epochs trained:  87Training neural network. Epochs trained:  88Training neural network. Epochs trained:  89Training neural network. Epochs trained:  90Training neural network. Epochs trained:  91Training neural network. Epochs trained:  92Training neural network. Epochs trained:  93Training neural network. Epochs trained:  94Training neural network. Epochs trained:  95Training neural network. Epochs trained:  96Training neural network. Epochs trained:  97Training neural network. Epochs trained:  98Training neural network. Epochs trained:  99Training neural network. Epochs trained:  100Training neural network. Epochs trained:  101Training neural network. Epochs trained:  102Training neural network. Epochs trained:  103Training neural network. Epochs trained:  104Training neural network. Epochs trained:  105Training neural network. Epochs trained:  106Training neural network. Epochs trained:  107Training neural network. Epochs trained:  108Training neural network. Epochs trained:  109Training neural network. Epochs trained:  110Training neural network. Epochs trained:  111Training neural network. Epochs trained:  112Training neural network. Epochs trained:  113Training neural network. Epochs trained:  114Training neural network. Epochs trained:  115Training neural network. Epochs trained:  116Training neural network. Epochs trained:  117Training neural network. Epochs trained:  118Training neural network. Epochs trained:  119Training neural network. Epochs trained:  120Training neural network. Epochs trained:  121Training neural network. Epochs trained:  122Training neural network. Epochs trained:  123Training neural network. Epochs trained:  124Training neural network. Epochs trained:  125Training neural network. Epochs trained:  126Training neural network. Epochs trained:  127Training neural network. Epochs trained:  128Training neural network. Epochs trained:  129Training neural network. Epochs trained:  130Training neural network. Epochs trained:  131Training neural network. Epochs trained:  132Training neural network. Epochs trained:  133Training neural network. Epochs trained:  134Training neural network. Epochs trained:  135Training neural network. Epochs trained:  136Training neural network. Epochs trained:  137Training neural network. Epochs trained:  138Training neural network. Epochs trained:  139Training neural network. Epochs trained:  140Training neural network. Epochs trained:  141Training neural network. Epochs trained:  142Training neural network. Epochs trained:  143Training neural network. Epochs trained:  144Training neural network. Epochs trained:  145Training neural network. Epochs trained:  146Training neural network. Epochs trained:  147Training neural network. Epochs trained:  148Training neural network. Epochs trained:  149Training neural network. Epochs trained:  150Training neural network. Epochs trained:  151Training neural network. Epochs trained:  152Training neural network. Epochs trained:  153Training neural network. Epochs trained:  154Training neural network. Epochs trained:  155Training neural network. Epochs trained:  156Training neural network. Epochs trained:  157Training neural network. Epochs trained:  158Training neural network. Epochs trained:  159Training neural network. Epochs trained:  160Training neural network. Epochs trained:  161Training neural network. Epochs trained:  162Training neural network. Epochs trained:  163Training neural network. Epochs trained:  164Training neural network. Epochs trained:  165Training neural network. Epochs trained:  166Training neural network. Epochs trained:  167Training neural network. Epochs trained:  168Training neural network. Epochs trained:  169Training neural network. Epochs trained:  170Training neural network. Epochs trained:  171Training neural network. Epochs trained:  172Training neural network. Epochs trained:  173Training neural network. Epochs trained:  174Training neural network. Epochs trained:  175Training neural network. Epochs trained:  176Training neural network. Epochs trained:  177Training neural network. Epochs trained:  178Training neural network. Epochs trained:  179Training neural network. Epochs trained:  180Training neural network. Epochs trained:  181Training neural network. Epochs trained:  182Training neural network. Epochs trained:  183Training neural network. Epochs trained:  184Training neural network. Epochs trained:  185Training neural network. Epochs trained:  186Training neural network. Epochs trained:  187Training neural network. Epochs trained:  188Training neural network. Epochs trained:  189Training neural network. Epochs trained:  190Training neural network. Epochs trained:  191Training neural network. Epochs trained:  192Training neural network. Epochs trained:  193Training neural network. Epochs trained:  194Training neural network. Epochs trained:  195Training neural network. Epochs trained:  196Training neural network. Epochs trained:  197Training neural network. Epochs trained:  198Training neural network. Epochs trained:  199Training neural network. Epochs trained:  200Training neural network. Epochs trained:  201Training neural network. Epochs trained:  202Training neural network. Epochs trained:  203Training neural network. Epochs trained:  204Training neural network. Epochs trained:  205Training neural network. Epochs trained:  206Training neural network. Epochs trained:  207Training neural network. Epochs trained:  208Training neural network. Epochs trained:  209Training neural network. Epochs trained:  210Training neural network. Epochs trained:  211Training neural network. Epochs trained:  212Training neural network. Epochs trained:  213Training neural network. Epochs trained:  214Training neural network. Epochs trained:  215Training neural network. Epochs trained:  216Training neural network. Epochs trained:  217Training neural network. Epochs trained:  218Training neural network. Epochs trained:  219Training neural network. Epochs trained:  220Training neural network. Epochs trained:  221Training neural network. Epochs trained:  222Training neural network. Epochs trained:  223Training neural network. Epochs trained:  224Training neural network. Epochs trained:  225Training neural network. Epochs trained:  226Training neural network. Epochs trained:  227Training neural network. Epochs trained:  228Training neural network. Epochs trained:  229Training neural network. Epochs trained:  230Training neural network. Epochs trained:  231Training neural network. Epochs trained:  232Training neural network. Epochs trained:  233Training neural network. Epochs trained:  234Training neural network. Epochs trained:  235Training neural network. Epochs trained:  236Training neural network. Epochs trained:  237Training neural network. Epochs trained:  238Training neural network. Epochs trained:  239Training neural network. Epochs trained:  240Training neural network. Epochs trained:  241Training neural network. Epochs trained:  242Training neural network. Epochs trained:  243Training neural network. Epochs trained:  244Neural network successfully converged after 244 epochs.
Training neural network. Epochs trained:  1Training neural network. Epochs trained:  2Training neural network. Epochs trained:  3Training neural network. Epochs trained:  4Training neural network. Epochs trained:  5Training neural network. Epochs trained:  6Training neural network. Epochs trained:  7Training neural network. Epochs trained:  8Training neural network. Epochs trained:  9Training neural network. Epochs trained:  10Training neural network. Epochs trained:  11Training neural network. Epochs trained:  12Training neural network. Epochs trained:  13Training neural network. Epochs trained:  14Training neural network. Epochs trained:  15Training neural network. Epochs trained:  16Training neural network. Epochs trained:  17Training neural network. Epochs trained:  18Training neural network. Epochs trained:  19Training neural network. Epochs trained:  20Training neural network. Epochs trained:  21Training neural network. Epochs trained:  22Training neural network. Epochs trained:  23Training neural network. Epochs trained:  24Training neural network. Epochs trained:  25Training neural network. Epochs trained:  26Training neural network. Epochs trained:  27Training neural network. Epochs trained:  28Training neural network. Epochs trained:  29Training neural network. Epochs trained:  30Training neural network. Epochs trained:  31Training neural network. Epochs trained:  32Training neural network. Epochs trained:  33Training neural network. Epochs trained:  34Training neural network. Epochs trained:  35Training neural network. Epochs trained:  36Training neural network. Epochs trained:  37Training neural network. Epochs trained:  38Training neural network. Epochs trained:  39Training neural network. Epochs trained:  40Training neural network. Epochs trained:  41Training neural network. Epochs trained:  42Training neural network. Epochs trained:  43Training neural network. Epochs trained:  44Training neural network. Epochs trained:  45Training neural network. Epochs trained:  46Training neural network. Epochs trained:  47Training neural network. Epochs trained:  48Training neural network. Epochs trained:  49Training neural network. Epochs trained:  50Training neural network. Epochs trained:  51Training neural network. Epochs trained:  52Training neural network. Epochs trained:  53Training neural network. Epochs trained:  54Training neural network. Epochs trained:  55Training neural network. Epochs trained:  56Training neural network. Epochs trained:  57Training neural network. Epochs trained:  58Training neural network. Epochs trained:  59Training neural network. Epochs trained:  60Training neural network. Epochs trained:  61Training neural network. Epochs trained:  62Training neural network. Epochs trained:  63Training neural network. Epochs trained:  64Training neural network. Epochs trained:  65Training neural network. Epochs trained:  66Training neural network. Epochs trained:  67Training neural network. Epochs trained:  68Training neural network. Epochs trained:  69Training neural network. Epochs trained:  70Training neural network. Epochs trained:  71Training neural network. Epochs trained:  72Training neural network. Epochs trained:  73Training neural network. Epochs trained:  74Training neural network. Epochs trained:  75Training neural network. Epochs trained:  76Training neural network. Epochs trained:  77Training neural network. Epochs trained:  78Training neural network. Epochs trained:  79Training neural network. Epochs trained:  80Training neural network. Epochs trained:  81Training neural network. Epochs trained:  82Training neural network. Epochs trained:  83Training neural network. Epochs trained:  84Training neural network. Epochs trained:  85Training neural network. Epochs trained:  86Training neural network. Epochs trained:  87Training neural network. Epochs trained:  88Training neural network. Epochs trained:  89Training neural network. Epochs trained:  90Training neural network. Epochs trained:  91Training neural network. Epochs trained:  92Training neural network. Epochs trained:  93Training neural network. Epochs trained:  94Training neural network. Epochs trained:  95Training neural network. Epochs trained:  96Training neural network. Epochs trained:  97Training neural network. Epochs trained:  98Training neural network. Epochs trained:  99Training neural network. Epochs trained:  100Training neural network. Epochs trained:  101Training neural network. Epochs trained:  102Training neural network. Epochs trained:  103Training neural network. Epochs trained:  104Training neural network. Epochs trained:  105Training neural network. Epochs trained:  106Training neural network. Epochs trained:  107Training neural network. Epochs trained:  108Training neural network. Epochs trained:  109Training neural network. Epochs trained:  110Training neural network. Epochs trained:  111Training neural network. Epochs trained:  112Training neural network. Epochs trained:  113Training neural network. Epochs trained:  114Training neural network. Epochs trained:  115Training neural network. Epochs trained:  116Training neural network. Epochs trained:  117Training neural network. Epochs trained:  118Training neural network. Epochs trained:  119Training neural network. Epochs trained:  120Training neural network. Epochs trained:  121Training neural network. Epochs trained:  122Training neural network. Epochs trained:  123Training neural network. Epochs trained:  124Training neural network. Epochs trained:  125Training neural network. Epochs trained:  126Training neural network. Epochs trained:  127Training neural network. Epochs trained:  128Training neural network. Epochs trained:  129Training neural network. Epochs trained:  130Training neural network. Epochs trained:  131Training neural network. Epochs trained:  132Training neural network. Epochs trained:  133Training neural network. Epochs trained:  134Training neural network. Epochs trained:  135Training neural network. Epochs trained:  136Training neural network. Epochs trained:  137Training neural network. Epochs trained:  138Training neural network. Epochs trained:  139Training neural network. Epochs trained:  140Training neural network. Epochs trained:  141Training neural network. Epochs trained:  142Training neural network. Epochs trained:  143Training neural network. Epochs trained:  144Training neural network. Epochs trained:  145Training neural network. Epochs trained:  146Training neural network. Epochs trained:  147Training neural network. Epochs trained:  148Training neural network. Epochs trained:  149Training neural network. Epochs trained:  150Training neural network. Epochs trained:  151Training neural network. Epochs trained:  152Training neural network. Epochs trained:  153Training neural network. Epochs trained:  154Training neural network. Epochs trained:  155Training neural network. Epochs trained:  156Training neural network. Epochs trained:  157Training neural network. Epochs trained:  158Training neural network. Epochs trained:  159Training neural network. Epochs trained:  160Training neural network. Epochs trained:  161Training neural network. Epochs trained:  162Training neural network. Epochs trained:  163Training neural network. Epochs trained:  164Training neural network. Epochs trained:  165Training neural network. Epochs trained:  166Training neural network. Epochs trained:  167Training neural network. Epochs trained:  168Training neural network. Epochs trained:  169Training neural network. Epochs trained:  170Training neural network. Epochs trained:  171Training neural network. Epochs trained:  172Training neural network. Epochs trained:  173Training neural network. Epochs trained:  174Training neural network. Epochs trained:  175Training neural network. Epochs trained:  176Training neural network. Epochs trained:  177Training neural network. Epochs trained:  178Training neural network. Epochs trained:  179Training neural network. Epochs trained:  180Training neural network. Epochs trained:  181Training neural network. Epochs trained:  182Training neural network. Epochs trained:  183Training neural network. Epochs trained:  184Training neural network. Epochs trained:  185Training neural network. Epochs trained:  186Training neural network. Epochs trained:  187Training neural network. Epochs trained:  188Training neural network. Epochs trained:  189Training neural network. Epochs trained:  190Training neural network. Epochs trained:  191Training neural network. Epochs trained:  192Training neural network. Epochs trained:  193Training neural network. Epochs trained:  194Training neural network. Epochs trained:  195Training neural network. Epochs trained:  196Training neural network. Epochs trained:  197Training neural network. Epochs trained:  198Training neural network. Epochs trained:  199Training neural network. Epochs trained:  200Training neural network. Epochs trained:  201Training neural network. Epochs trained:  202Training neural network. Epochs trained:  203Training neural network. Epochs trained:  204Training neural network. Epochs trained:  205Training neural network. Epochs trained:  206Training neural network. Epochs trained:  207Training neural network. Epochs trained:  208Training neural network. Epochs trained:  209Training neural network. Epochs trained:  210Training neural network. Epochs trained:  211Training neural network. Epochs trained:  212Training neural network. Epochs trained:  213Training neural network. Epochs trained:  214Training neural network. Epochs trained:  215Training neural network. Epochs trained:  216Training neural network. Epochs trained:  217Training neural network. Epochs trained:  218Training neural network. Epochs trained:  219Training neural network. Epochs trained:  220Training neural network. Epochs trained:  221Training neural network. Epochs trained:  222Training neural network. Epochs trained:  223Training neural network. Epochs trained:  224Training neural network. Epochs trained:  225Training neural network. Epochs trained:  226Training neural network. Epochs trained:  227Training neural network. Epochs trained:  228Training neural network. Epochs trained:  229Training neural network. Epochs trained:  230Training neural network. Epochs trained:  231Training neural network. Epochs trained:  232Training neural network. Epochs trained:  233Training neural network. Epochs trained:  234Training neural network. Epochs trained:  235Training neural network. Epochs trained:  236Training neural network. Epochs trained:  237Training neural network. Epochs trained:  238Training neural network. Epochs trained:  239Training neural network. Epochs trained:  240Training neural network. Epochs trained:  241Training neural network. Epochs trained:  242Training neural network. Epochs trained:  243Training neural network. Epochs trained:  244Training neural network. Epochs trained:  245Training neural network. Epochs trained:  246Training neural network. Epochs trained:  247Training neural network. Epochs trained:  248Training neural network. Epochs trained:  249Training neural network. Epochs trained:  250Training neural network. Epochs trained:  251Training neural network. Epochs trained:  252Training neural network. Epochs trained:  253Training neural network. Epochs trained:  254Training neural network. Epochs trained:  255Training neural network. Epochs trained:  256Training neural network. Epochs trained:  257Training neural network. Epochs trained:  258Training neural network. Epochs trained:  259Training neural network. Epochs trained:  260Training neural network. Epochs trained:  261Training neural network. Epochs trained:  262Training neural network. Epochs trained:  263Training neural network. Epochs trained:  264Training neural network. Epochs trained:  265Training neural network. Epochs trained:  266Training neural network. Epochs trained:  267Training neural network. Epochs trained:  268Training neural network. Epochs trained:  269Training neural network. Epochs trained:  270Training neural network. Epochs trained:  271Training neural network. Epochs trained:  272Training neural network. Epochs trained:  273Training neural network. Epochs trained:  274Training neural network. Epochs trained:  275Training neural network. Epochs trained:  276Training neural network. Epochs trained:  277Training neural network. Epochs trained:  278Training neural network. Epochs trained:  279Training neural network. Epochs trained:  280Training neural network. Epochs trained:  281Training neural network. Epochs trained:  282Training neural network. Epochs trained:  283Training neural network. Epochs trained:  284Training neural network. Epochs trained:  285Training neural network. Epochs trained:  286Training neural network. Epochs trained:  287Training neural network. Epochs trained:  288Training neural network. Epochs trained:  289Training neural network. Epochs trained:  290Training neural network. Epochs trained:  291Training neural network. Epochs trained:  292Training neural network. Epochs trained:  293Training neural network. Epochs trained:  294Training neural network. Epochs trained:  295Training neural network. Epochs trained:  296Training neural network. Epochs trained:  297Training neural network. Epochs trained:  298Training neural network. Epochs trained:  299Training neural network. Epochs trained:  300Training neural network. Epochs trained:  301Training neural network. Epochs trained:  302Training neural network. Epochs trained:  303Training neural network. Epochs trained:  304Training neural network. Epochs trained:  305Training neural network. Epochs trained:  306Training neural network. Epochs trained:  307Training neural network. Epochs trained:  308Training neural network. Epochs trained:  309Training neural network. Epochs trained:  310Training neural network. Epochs trained:  311Training neural network. Epochs trained:  312Training neural network. Epochs trained:  313Training neural network. Epochs trained:  314Training neural network. Epochs trained:  315Training neural network. Epochs trained:  316Training neural network. Epochs trained:  317Training neural network. Epochs trained:  318Training neural network. Epochs trained:  319Training neural network. Epochs trained:  320Training neural network. Epochs trained:  321Training neural network. Epochs trained:  322Training neural network. Epochs trained:  323Training neural network. Epochs trained:  324Training neural network. Epochs trained:  325Training neural network. Epochs trained:  326Training neural network. Epochs trained:  327Training neural network. Epochs trained:  328Training neural network. Epochs trained:  329Training neural network. Epochs trained:  330Training neural network. Epochs trained:  331Training neural network. Epochs trained:  332Training neural network. Epochs trained:  333Training neural network. Epochs trained:  334Training neural network. Epochs trained:  335Training neural network. Epochs trained:  336Training neural network. Epochs trained:  337Training neural network. Epochs trained:  338Training neural network. Epochs trained:  339Training neural network. Epochs trained:  340Training neural network. Epochs trained:  341Training neural network. Epochs trained:  342Training neural network. Epochs trained:  343Training neural network. Epochs trained:  344Training neural network. Epochs trained:  345Training neural network. Epochs trained:  346Training neural network. Epochs trained:  347Training neural network. Epochs trained:  348Training neural network. Epochs trained:  349Training neural network. Epochs trained:  350Training neural network. Epochs trained:  351Neural network successfully converged after 351 epochs.
Training neural network. Epochs trained:  1Training neural network. Epochs trained:  2Training neural network. Epochs trained:  3Training neural network. Epochs trained:  4Training neural network. Epochs trained:  5Training neural network. Epochs trained:  6Training neural network. Epochs trained:  7Training neural network. Epochs trained:  8Training neural network. Epochs trained:  9Training neural network. Epochs trained:  10Training neural network. Epochs trained:  11Training neural network. Epochs trained:  12Training neural network. Epochs trained:  13Training neural network. Epochs trained:  14Training neural network. Epochs trained:  15Training neural network. Epochs trained:  16Training neural network. Epochs trained:  17Training neural network. Epochs trained:  18Training neural network. Epochs trained:  19Training neural network. Epochs trained:  20Training neural network. Epochs trained:  21Training neural network. Epochs trained:  22Training neural network. Epochs trained:  23Training neural network. Epochs trained:  24Training neural network. Epochs trained:  25Training neural network. Epochs trained:  26Training neural network. Epochs trained:  27Training neural network. Epochs trained:  28Training neural network. Epochs trained:  29Training neural network. Epochs trained:  30Training neural network. Epochs trained:  31Training neural network. Epochs trained:  32Training neural network. Epochs trained:  33Training neural network. Epochs trained:  34Training neural network. Epochs trained:  35Training neural network. Epochs trained:  36Training neural network. Epochs trained:  37Training neural network. Epochs trained:  38Training neural network. Epochs trained:  39Training neural network. Epochs trained:  40Training neural network. Epochs trained:  41Training neural network. Epochs trained:  42Training neural network. Epochs trained:  43Training neural network. Epochs trained:  44Training neural network. Epochs trained:  45Training neural network. Epochs trained:  46Training neural network. Epochs trained:  47Training neural network. Epochs trained:  48Training neural network. Epochs trained:  49Training neural network. Epochs trained:  50Training neural network. Epochs trained:  51Training neural network. Epochs trained:  52Training neural network. Epochs trained:  53Training neural network. Epochs trained:  54Training neural network. Epochs trained:  55Training neural network. Epochs trained:  56Training neural network. Epochs trained:  57Training neural network. Epochs trained:  58Training neural network. Epochs trained:  59Training neural network. Epochs trained:  60Training neural network. Epochs trained:  61Training neural network. Epochs trained:  62Training neural network. Epochs trained:  63Training neural network. Epochs trained:  64Training neural network. Epochs trained:  65Training neural network. Epochs trained:  66Training neural network. Epochs trained:  67Training neural network. Epochs trained:  68Training neural network. Epochs trained:  69Training neural network. Epochs trained:  70Training neural network. Epochs trained:  71Training neural network. Epochs trained:  72Training neural network. Epochs trained:  73Training neural network. Epochs trained:  74Training neural network. Epochs trained:  75Training neural network. Epochs trained:  76Training neural network. Epochs trained:  77Training neural network. Epochs trained:  78Training neural network. Epochs trained:  79Training neural network. Epochs trained:  80Training neural network. Epochs trained:  81Training neural network. Epochs trained:  82Training neural network. Epochs trained:  83Training neural network. Epochs trained:  84Training neural network. Epochs trained:  85Training neural network. Epochs trained:  86Training neural network. Epochs trained:  87Training neural network. Epochs trained:  88Training neural network. Epochs trained:  89Training neural network. Epochs trained:  90Training neural network. Epochs trained:  91Training neural network. Epochs trained:  92Training neural network. Epochs trained:  93Training neural network. Epochs trained:  94Training neural network. Epochs trained:  95Training neural network. Epochs trained:  96Training neural network. Epochs trained:  97Training neural network. Epochs trained:  98Training neural network. Epochs trained:  99Training neural network. Epochs trained:  100Training neural network. Epochs trained:  101Training neural network. Epochs trained:  102Training neural network. Epochs trained:  103Training neural network. Epochs trained:  104Training neural network. Epochs trained:  105Training neural network. Epochs trained:  106Training neural network. Epochs trained:  107Training neural network. Epochs trained:  108Training neural network. Epochs trained:  109Training neural network. Epochs trained:  110Training neural network. Epochs trained:  111Training neural network. Epochs trained:  112Training neural network. Epochs trained:  113Training neural network. Epochs trained:  114Training neural network. Epochs trained:  115Training neural network. Epochs trained:  116Training neural network. Epochs trained:  117Training neural network. Epochs trained:  118Training neural network. Epochs trained:  119Training neural network. Epochs trained:  120Training neural network. Epochs trained:  121Training neural network. Epochs trained:  122Training neural network. Epochs trained:  123Training neural network. Epochs trained:  124Training neural network. Epochs trained:  125Training neural network. Epochs trained:  126Training neural network. Epochs trained:  127Training neural network. Epochs trained:  128Training neural network. Epochs trained:  129Training neural network. Epochs trained:  130Training neural network. Epochs trained:  131Training neural network. Epochs trained:  132Training neural network. Epochs trained:  133Training neural network. Epochs trained:  134Training neural network. Epochs trained:  135Training neural network. Epochs trained:  136Training neural network. Epochs trained:  137Training neural network. Epochs trained:  138Training neural network. Epochs trained:  139Training neural network. Epochs trained:  140Training neural network. Epochs trained:  141Training neural network. Epochs trained:  142Training neural network. Epochs trained:  143Training neural network. Epochs trained:  144Training neural network. Epochs trained:  145Training neural network. Epochs trained:  146Training neural network. Epochs trained:  147Training neural network. Epochs trained:  148Training neural network. Epochs trained:  149Training neural network. Epochs trained:  150Training neural network. Epochs trained:  151Training neural network. Epochs trained:  152Training neural network. Epochs trained:  153Training neural network. Epochs trained:  154Training neural network. Epochs trained:  155Training neural network. Epochs trained:  156Training neural network. Epochs trained:  157Training neural network. Epochs trained:  158Training neural network. Epochs trained:  159Training neural network. Epochs trained:  160Training neural network. Epochs trained:  161Training neural network. Epochs trained:  162Training neural network. Epochs trained:  163Training neural network. Epochs trained:  164Training neural network. Epochs trained:  165Training neural network. Epochs trained:  166Training neural network. Epochs trained:  167Training neural network. Epochs trained:  168Training neural network. Epochs trained:  169Training neural network. Epochs trained:  170Training neural network. Epochs trained:  171Training neural network. Epochs trained:  172Training neural network. Epochs trained:  173Training neural network. Epochs trained:  174Training neural network. Epochs trained:  175Training neural network. Epochs trained:  176Training neural network. Epochs trained:  177Training neural network. Epochs trained:  178Training neural network. Epochs trained:  179Training neural network. Epochs trained:  180Training neural network. Epochs trained:  181Training neural network. Epochs trained:  182Training neural network. Epochs trained:  183Training neural network. Epochs trained:  184Training neural network. Epochs trained:  185Training neural network. Epochs trained:  186Training neural network. Epochs trained:  187Training neural network. Epochs trained:  188Training neural network. Epochs trained:  189Training neural network. Epochs trained:  190Training neural network. Epochs trained:  191Training neural network. Epochs trained:  192Training neural network. Epochs trained:  193Training neural network. Epochs trained:  194Training neural network. Epochs trained:  195Training neural network. Epochs trained:  196Training neural network. Epochs trained:  197Training neural network. Epochs trained:  198Training neural network. Epochs trained:  199Training neural network. Epochs trained:  200Training neural network. Epochs trained:  201Training neural network. Epochs trained:  202Training neural network. Epochs trained:  203Training neural network. Epochs trained:  204Training neural network. Epochs trained:  205Training neural network. Epochs trained:  206Training neural network. Epochs trained:  207Training neural network. Epochs trained:  208Training neural network. Epochs trained:  209Training neural network. Epochs trained:  210Training neural network. Epochs trained:  211Training neural network. Epochs trained:  212Training neural network. Epochs trained:  213Training neural network. Epochs trained:  214Training neural network. Epochs trained:  215Training neural network. Epochs trained:  216Training neural network. Epochs trained:  217Training neural network. Epochs trained:  218Training neural network. Epochs trained:  219Training neural network. Epochs trained:  220Training neural network. Epochs trained:  221Training neural network. Epochs trained:  222Training neural network. Epochs trained:  223Training neural network. Epochs trained:  224Training neural network. Epochs trained:  225Training neural network. Epochs trained:  226Training neural network. Epochs trained:  227Training neural network. Epochs trained:  228Training neural network. Epochs trained:  229Training neural network. Epochs trained:  230Training neural network. Epochs trained:  231Training neural network. Epochs trained:  232Training neural network. Epochs trained:  233Training neural network. Epochs trained:  234Training neural network. Epochs trained:  235Training neural network. Epochs trained:  236Training neural network. Epochs trained:  237Training neural network. Epochs trained:  238Training neural network. Epochs trained:  239Training neural network. Epochs trained:  240Training neural network. Epochs trained:  241Training neural network. Epochs trained:  242Training neural network. Epochs trained:  243Training neural network. Epochs trained:  244Training neural network. Epochs trained:  245Training neural network. Epochs trained:  246Training neural network. Epochs trained:  247Training neural network. Epochs trained:  248Training neural network. Epochs trained:  249Training neural network. Epochs trained:  250Training neural network. Epochs trained:  251Training neural network. Epochs trained:  252Training neural network. Epochs trained:  253Training neural network. Epochs trained:  254Training neural network. Epochs trained:  255Training neural network. Epochs trained:  256Training neural network. Epochs trained:  257Training neural network. Epochs trained:  258Training neural network. Epochs trained:  259Training neural network. Epochs trained:  260Training neural network. Epochs trained:  261Training neural network. Epochs trained:  262Training neural network. Epochs trained:  263Training neural network. Epochs trained:  264Training neural network. Epochs trained:  265Training neural network. Epochs trained:  266Training neural network. Epochs trained:  267Training neural network. Epochs trained:  268Training neural network. Epochs trained:  269Training neural network. Epochs trained:  270Training neural network. Epochs trained:  271Training neural network. Epochs trained:  272Training neural network. Epochs trained:  273Training neural network. Epochs trained:  274Training neural network. Epochs trained:  275Training neural network. Epochs trained:  276Training neural network. Epochs trained:  277Training neural network. Epochs trained:  278Training neural network. Epochs trained:  279Training neural network. Epochs trained:  280Training neural network. Epochs trained:  281Training neural network. Epochs trained:  282Training neural network. Epochs trained:  283Training neural network. Epochs trained:  284Training neural network. Epochs trained:  285Training neural network. Epochs trained:  286Training neural network. Epochs trained:  287Training neural network. Epochs trained:  288Training neural network. Epochs trained:  289Training neural network. Epochs trained:  290Training neural network. Epochs trained:  291Training neural network. Epochs trained:  292Training neural network. Epochs trained:  293Training neural network. Epochs trained:  294Training neural network. Epochs trained:  295Training neural network. Epochs trained:  296Training neural network. Epochs trained:  297Training neural network. Epochs trained:  298Training neural network. Epochs trained:  299Training neural network. Epochs trained:  300Training neural network. Epochs trained:  301Training neural network. Epochs trained:  302Training neural network. Epochs trained:  303Training neural network. Epochs trained:  304Training neural network. Epochs trained:  305Training neural network. Epochs trained:  306Training neural network. Epochs trained:  307Training neural network. Epochs trained:  308Training neural network. Epochs trained:  309Training neural network. Epochs trained:  310Training neural network. Epochs trained:  311Training neural network. Epochs trained:  312Training neural network. Epochs trained:  313Training neural network. Epochs trained:  314Training neural network. Epochs trained:  315Training neural network. Epochs trained:  316Training neural network. Epochs trained:  317Training neural network. Epochs trained:  318Training neural network. Epochs trained:  319Training neural network. Epochs trained:  320Training neural network. Epochs trained:  321Training neural network. Epochs trained:  322Training neural network. Epochs trained:  323Training neural network. Epochs trained:  324Training neural network. Epochs trained:  325Training neural network. Epochs trained:  326Training neural network. Epochs trained:  327Training neural network. Epochs trained:  328Training neural network. Epochs trained:  329Training neural network. Epochs trained:  330Training neural network. Epochs trained:  331Neural network successfully converged after 331 epochs.
Training neural network. Epochs trained:  1Training neural network. Epochs trained:  2Training neural network. Epochs trained:  3Training neural network. Epochs trained:  4Training neural network. Epochs trained:  5Training neural network. Epochs trained:  6Training neural network. Epochs trained:  7Training neural network. Epochs trained:  8Training neural network. Epochs trained:  9Training neural network. Epochs trained:  10Training neural network. Epochs trained:  11Training neural network. Epochs trained:  12Training neural network. Epochs trained:  13Training neural network. Epochs trained:  14Training neural network. Epochs trained:  15Training neural network. Epochs trained:  16Training neural network. Epochs trained:  17Training neural network. Epochs trained:  18Training neural network. Epochs trained:  19Training neural network. Epochs trained:  20Training neural network. Epochs trained:  21Training neural network. Epochs trained:  22Training neural network. Epochs trained:  23Training neural network. Epochs trained:  24Training neural network. Epochs trained:  25Training neural network. Epochs trained:  26Training neural network. Epochs trained:  27Training neural network. Epochs trained:  28Training neural network. Epochs trained:  29Training neural network. Epochs trained:  30Training neural network. Epochs trained:  31Training neural network. Epochs trained:  32Training neural network. Epochs trained:  33Training neural network. Epochs trained:  34Training neural network. Epochs trained:  35Training neural network. Epochs trained:  36Training neural network. Epochs trained:  37Training neural network. Epochs trained:  38Training neural network. Epochs trained:  39Training neural network. Epochs trained:  40Training neural network. Epochs trained:  41Training neural network. Epochs trained:  42Training neural network. Epochs trained:  43Training neural network. Epochs trained:  44Training neural network. Epochs trained:  45Training neural network. Epochs trained:  46Training neural network. Epochs trained:  47Training neural network. Epochs trained:  48Training neural network. Epochs trained:  49Training neural network. Epochs trained:  50Training neural network. Epochs trained:  51Training neural network. Epochs trained:  52Training neural network. Epochs trained:  53Training neural network. Epochs trained:  54Training neural network. Epochs trained:  55Training neural network. Epochs trained:  56Training neural network. Epochs trained:  57Training neural network. Epochs trained:  58Training neural network. Epochs trained:  59Training neural network. Epochs trained:  60Training neural network. Epochs trained:  61Training neural network. Epochs trained:  62Training neural network. Epochs trained:  63Training neural network. Epochs trained:  64Training neural network. Epochs trained:  65Training neural network. Epochs trained:  66Training neural network. Epochs trained:  67Training neural network. Epochs trained:  68Training neural network. Epochs trained:  69Training neural network. Epochs trained:  70Training neural network. Epochs trained:  71Training neural network. Epochs trained:  72Training neural network. Epochs trained:  73Training neural network. Epochs trained:  74Training neural network. Epochs trained:  75Training neural network. Epochs trained:  76Training neural network. Epochs trained:  77Training neural network. Epochs trained:  78Training neural network. Epochs trained:  79Training neural network. Epochs trained:  80Training neural network. Epochs trained:  81Training neural network. Epochs trained:  82Training neural network. Epochs trained:  83Training neural network. Epochs trained:  84Training neural network. Epochs trained:  85Training neural network. Epochs trained:  86Training neural network. Epochs trained:  87Training neural network. Epochs trained:  88Training neural network. Epochs trained:  89Training neural network. Epochs trained:  90Training neural network. Epochs trained:  91Training neural network. Epochs trained:  92Training neural network. Epochs trained:  93Training neural network. Epochs trained:  94Training neural network. Epochs trained:  95Training neural network. Epochs trained:  96Training neural network. Epochs trained:  97Training neural network. Epochs trained:  98Training neural network. Epochs trained:  99Training neural network. Epochs trained:  100Training neural network. Epochs trained:  101Training neural network. Epochs trained:  102Training neural network. Epochs trained:  103Training neural network. Epochs trained:  104Training neural network. Epochs trained:  105Training neural network. Epochs trained:  106Training neural network. Epochs trained:  107Training neural network. Epochs trained:  108Training neural network. Epochs trained:  109Training neural network. Epochs trained:  110Training neural network. Epochs trained:  111Training neural network. Epochs trained:  112Training neural network. Epochs trained:  113Training neural network. Epochs trained:  114Training neural network. Epochs trained:  115Training neural network. Epochs trained:  116Training neural network. Epochs trained:  117Training neural network. Epochs trained:  118Training neural network. Epochs trained:  119Training neural network. Epochs trained:  120Training neural network. Epochs trained:  121Training neural network. Epochs trained:  122Training neural network. Epochs trained:  123Training neural network. Epochs trained:  124Training neural network. Epochs trained:  125Training neural network. Epochs trained:  126Training neural network. Epochs trained:  127Training neural network. Epochs trained:  128Training neural network. Epochs trained:  129Training neural network. Epochs trained:  130Training neural network. Epochs trained:  131Training neural network. Epochs trained:  132Training neural network. Epochs trained:  133Training neural network. Epochs trained:  134Training neural network. Epochs trained:  135Training neural network. Epochs trained:  136Training neural network. Epochs trained:  137Training neural network. Epochs trained:  138Training neural network. Epochs trained:  139Training neural network. Epochs trained:  140Training neural network. Epochs trained:  141Training neural network. Epochs trained:  142Training neural network. Epochs trained:  143Training neural network. Epochs trained:  144Training neural network. Epochs trained:  145Training neural network. Epochs trained:  146Training neural network. Epochs trained:  147Training neural network. Epochs trained:  148Training neural network. Epochs trained:  149Training neural network. Epochs trained:  150Training neural network. Epochs trained:  151Training neural network. Epochs trained:  152Training neural network. Epochs trained:  153Training neural network. Epochs trained:  154Training neural network. Epochs trained:  155Training neural network. Epochs trained:  156Training neural network. Epochs trained:  157Training neural network. Epochs trained:  158Training neural network. Epochs trained:  159Training neural network. Epochs trained:  160Training neural network. Epochs trained:  161Training neural network. Epochs trained:  162Training neural network. Epochs trained:  163Training neural network. Epochs trained:  164Training neural network. Epochs trained:  165Training neural network. Epochs trained:  166Training neural network. Epochs trained:  167Training neural network. Epochs trained:  168Training neural network. Epochs trained:  169Training neural network. Epochs trained:  170Training neural network. Epochs trained:  171Training neural network. Epochs trained:  172Training neural network. Epochs trained:  173Training neural network. Epochs trained:  174Training neural network. Epochs trained:  175Training neural network. Epochs trained:  176Training neural network. Epochs trained:  177Training neural network. Epochs trained:  178Training neural network. Epochs trained:  179Training neural network. Epochs trained:  180Training neural network. Epochs trained:  181Training neural network. Epochs trained:  182Training neural network. Epochs trained:  183Training neural network. Epochs trained:  184Training neural network. Epochs trained:  185Training neural network. Epochs trained:  186Training neural network. Epochs trained:  187Training neural network. Epochs trained:  188Training neural network. Epochs trained:  189Training neural network. Epochs trained:  190Training neural network. Epochs trained:  191Training neural network. Epochs trained:  192Training neural network. Epochs trained:  193Training neural network. Epochs trained:  194Training neural network. Epochs trained:  195Training neural network. Epochs trained:  196Training neural network. Epochs trained:  197Training neural network. Epochs trained:  198Training neural network. Epochs trained:  199Training neural network. Epochs trained:  200Training neural network. Epochs trained:  201Training neural network. Epochs trained:  202Training neural network. Epochs trained:  203Training neural network. Epochs trained:  204Training neural network. Epochs trained:  205Training neural network. Epochs trained:  206Training neural network. Epochs trained:  207Training neural network. Epochs trained:  208Training neural network. Epochs trained:  209Training neural network. Epochs trained:  210Training neural network. Epochs trained:  211Training neural network. Epochs trained:  212Training neural network. Epochs trained:  213Training neural network. Epochs trained:  214Training neural network. Epochs trained:  215Training neural network. Epochs trained:  216Training neural network. Epochs trained:  217Training neural network. Epochs trained:  218Training neural network. Epochs trained:  219Training neural network. Epochs trained:  220Training neural network. Epochs trained:  221Training neural network. Epochs trained:  222Training neural network. Epochs trained:  223Training neural network. Epochs trained:  224Training neural network. Epochs trained:  225Training neural network. Epochs trained:  226Training neural network. Epochs trained:  227Training neural network. Epochs trained:  228Training neural network. Epochs trained:  229Training neural network. Epochs trained:  230Training neural network. Epochs trained:  231Training neural network. Epochs trained:  232Training neural network. Epochs trained:  233Training neural network. Epochs trained:  234Training neural network. Epochs trained:  235Training neural network. Epochs trained:  236Training neural network. Epochs trained:  237Training neural network. Epochs trained:  238Training neural network. Epochs trained:  239Training neural network. Epochs trained:  240Training neural network. Epochs trained:  241Training neural network. Epochs trained:  242Training neural network. Epochs trained:  243Training neural network. Epochs trained:  244Training neural network. Epochs trained:  245Training neural network. Epochs trained:  246Training neural network. Epochs trained:  247Training neural network. Epochs trained:  248Training neural network. Epochs trained:  249Training neural network. Epochs trained:  250Training neural network. Epochs trained:  251Training neural network. Epochs trained:  252Training neural network. Epochs trained:  253Training neural network. Epochs trained:  254Training neural network. Epochs trained:  255Training neural network. Epochs trained:  256Training neural network. Epochs trained:  257Training neural network. Epochs trained:  258Training neural network. Epochs trained:  259Training neural network. Epochs trained:  260Training neural network. Epochs trained:  261Training neural network. Epochs trained:  262Training neural network. Epochs trained:  263Training neural network. Epochs trained:  264Training neural network. Epochs trained:  265Training neural network. Epochs trained:  266Training neural network. Epochs trained:  267Training neural network. Epochs trained:  268Training neural network. Epochs trained:  269Training neural network. Epochs trained:  270Training neural network. Epochs trained:  271Training neural network. Epochs trained:  272Training neural network. Epochs trained:  273Training neural network. Epochs trained:  274Training neural network. Epochs trained:  275Training neural network. Epochs trained:  276Training neural network. Epochs trained:  277Training neural network. Epochs trained:  278Training neural network. Epochs trained:  279Training neural network. Epochs trained:  280Training neural network. Epochs trained:  281Training neural network. Epochs trained:  282Training neural network. Epochs trained:  283Training neural network. Epochs trained:  284Training neural network. Epochs trained:  285Training neural network. Epochs trained:  286Training neural network. Epochs trained:  287Training neural network. Epochs trained:  288Training neural network. Epochs trained:  289Training neural network. Epochs trained:  290Training neural network. Epochs trained:  291Training neural network. Epochs trained:  292Training neural network. Epochs trained:  293Training neural network. Epochs trained:  294Training neural network. Epochs trained:  295Training neural network. Epochs trained:  296Training neural network. Epochs trained:  297Training neural network. Epochs trained:  298Training neural network. Epochs trained:  299Neural network successfully converged after 299 epochs.
Training neural network. Epochs trained:  1Training neural network. Epochs trained:  2Training neural network. Epochs trained:  3Training neural network. Epochs trained:  4Training neural network. Epochs trained:  5Training neural network. Epochs trained:  6Training neural network. Epochs trained:  7Training neural network. Epochs trained:  8Training neural network. Epochs trained:  9Training neural network. Epochs trained:  10Training neural network. Epochs trained:  11Training neural network. Epochs trained:  12Training neural network. Epochs trained:  13Training neural network. Epochs trained:  14Training neural network. Epochs trained:  15Training neural network. Epochs trained:  16Training neural network. Epochs trained:  17Training neural network. Epochs trained:  18Training neural network. Epochs trained:  19Training neural network. Epochs trained:  20Training neural network. Epochs trained:  21Training neural network. Epochs trained:  22Training neural network. Epochs trained:  23Training neural network. Epochs trained:  24Training neural network. Epochs trained:  25Training neural network. Epochs trained:  26Training neural network. Epochs trained:  27Training neural network. Epochs trained:  28Training neural network. Epochs trained:  29Training neural network. Epochs trained:  30Training neural network. Epochs trained:  31Training neural network. Epochs trained:  32Training neural network. Epochs trained:  33Training neural network. Epochs trained:  34Training neural network. Epochs trained:  35Training neural network. Epochs trained:  36Training neural network. Epochs trained:  37Training neural network. Epochs trained:  38Training neural network. Epochs trained:  39Training neural network. Epochs trained:  40Training neural network. Epochs trained:  41Training neural network. Epochs trained:  42Training neural network. Epochs trained:  43Training neural network. Epochs trained:  44Training neural network. Epochs trained:  45Training neural network. Epochs trained:  46Training neural network. Epochs trained:  47Training neural network. Epochs trained:  48Training neural network. Epochs trained:  49Training neural network. Epochs trained:  50Training neural network. Epochs trained:  51Training neural network. Epochs trained:  52Training neural network. Epochs trained:  53Training neural network. Epochs trained:  54Training neural network. Epochs trained:  55Training neural network. Epochs trained:  56Training neural network. Epochs trained:  57Training neural network. Epochs trained:  58Training neural network. Epochs trained:  59Training neural network. Epochs trained:  60Training neural network. Epochs trained:  61Training neural network. Epochs trained:  62Training neural network. Epochs trained:  63Training neural network. Epochs trained:  64Training neural network. Epochs trained:  65Training neural network. Epochs trained:  66Training neural network. Epochs trained:  67Training neural network. Epochs trained:  68Training neural network. Epochs trained:  69Training neural network. Epochs trained:  70Training neural network. Epochs trained:  71Training neural network. Epochs trained:  72Training neural network. Epochs trained:  73Training neural network. Epochs trained:  74Training neural network. Epochs trained:  75Training neural network. Epochs trained:  76Training neural network. Epochs trained:  77Training neural network. Epochs trained:  78Training neural network. Epochs trained:  79Training neural network. Epochs trained:  80Training neural network. Epochs trained:  81Training neural network. Epochs trained:  82Training neural network. Epochs trained:  83Training neural network. Epochs trained:  84Training neural network. Epochs trained:  85Training neural network. Epochs trained:  86Training neural network. Epochs trained:  87Training neural network. Epochs trained:  88Training neural network. Epochs trained:  89Training neural network. Epochs trained:  90Training neural network. Epochs trained:  91Training neural network. Epochs trained:  92Training neural network. Epochs trained:  93Training neural network. Epochs trained:  94Training neural network. Epochs trained:  95Training neural network. Epochs trained:  96Training neural network. Epochs trained:  97Training neural network. Epochs trained:  98Training neural network. Epochs trained:  99Training neural network. Epochs trained:  100Training neural network. Epochs trained:  101Training neural network. Epochs trained:  102Training neural network. Epochs trained:  103Training neural network. Epochs trained:  104Training neural network. Epochs trained:  105Training neural network. Epochs trained:  106Training neural network. Epochs trained:  107Training neural network. Epochs trained:  108Training neural network. Epochs trained:  109Training neural network. Epochs trained:  110Training neural network. Epochs trained:  111Training neural network. Epochs trained:  112Training neural network. Epochs trained:  113Training neural network. Epochs trained:  114Training neural network. Epochs trained:  115Training neural network. Epochs trained:  116Training neural network. Epochs trained:  117Training neural network. Epochs trained:  118Training neural network. Epochs trained:  119Training neural network. Epochs trained:  120Training neural network. Epochs trained:  121Training neural network. Epochs trained:  122Training neural network. Epochs trained:  123Training neural network. Epochs trained:  124Training neural network. Epochs trained:  125Training neural network. Epochs trained:  126Training neural network. Epochs trained:  127Training neural network. Epochs trained:  128Training neural network. Epochs trained:  129Training neural network. Epochs trained:  130Training neural network. Epochs trained:  131Training neural network. Epochs trained:  132Training neural network. Epochs trained:  133Training neural network. Epochs trained:  134Training neural network. Epochs trained:  135Training neural network. Epochs trained:  136Training neural network. Epochs trained:  137Training neural network. Epochs trained:  138Training neural network. Epochs trained:  139Training neural network. Epochs trained:  140Training neural network. Epochs trained:  141Training neural network. Epochs trained:  142Training neural network. Epochs trained:  143Training neural network. Epochs trained:  144Training neural network. Epochs trained:  145Training neural network. Epochs trained:  146Training neural network. Epochs trained:  147Training neural network. Epochs trained:  148Training neural network. Epochs trained:  149Training neural network. Epochs trained:  150Training neural network. Epochs trained:  151Training neural network. Epochs trained:  152Training neural network. Epochs trained:  153Training neural network. Epochs trained:  154Training neural network. Epochs trained:  155Training neural network. Epochs trained:  156Training neural network. Epochs trained:  157Training neural network. Epochs trained:  158Training neural network. Epochs trained:  159Training neural network. Epochs trained:  160Training neural network. Epochs trained:  161Training neural network. Epochs trained:  162Training neural network. Epochs trained:  163Training neural network. Epochs trained:  164Training neural network. Epochs trained:  165Training neural network. Epochs trained:  166Training neural network. Epochs trained:  167Training neural network. Epochs trained:  168Training neural network. Epochs trained:  169Training neural network. Epochs trained:  170Training neural network. Epochs trained:  171Training neural network. Epochs trained:  172Training neural network. Epochs trained:  173Training neural network. Epochs trained:  174Training neural network. Epochs trained:  175Training neural network. Epochs trained:  176Training neural network. Epochs trained:  177Training neural network. Epochs trained:  178Training neural network. Epochs trained:  179Training neural network. Epochs trained:  180Training neural network. Epochs trained:  181Training neural network. Epochs trained:  182Training neural network. Epochs trained:  183Training neural network. Epochs trained:  184Training neural network. Epochs trained:  185Training neural network. Epochs trained:  186Training neural network. Epochs trained:  187Training neural network. Epochs trained:  188Training neural network. Epochs trained:  189Training neural network. Epochs trained:  190Training neural network. Epochs trained:  191Training neural network. Epochs trained:  192Training neural network. Epochs trained:  193Training neural network. Epochs trained:  194Training neural network. Epochs trained:  195Training neural network. Epochs trained:  196Training neural network. Epochs trained:  197Training neural network. Epochs trained:  198Training neural network. Epochs trained:  199Training neural network. Epochs trained:  200Training neural network. Epochs trained:  201Training neural network. Epochs trained:  202Training neural network. Epochs trained:  203Training neural network. Epochs trained:  204Training neural network. Epochs trained:  205Training neural network. Epochs trained:  206Training neural network. Epochs trained:  207Training neural network. Epochs trained:  208Training neural network. Epochs trained:  209Training neural network. Epochs trained:  210Training neural network. Epochs trained:  211Training neural network. Epochs trained:  212Training neural network. Epochs trained:  213Training neural network. Epochs trained:  214Training neural network. Epochs trained:  215Training neural network. Epochs trained:  216Training neural network. Epochs trained:  217Training neural network. Epochs trained:  218Training neural network. Epochs trained:  219Training neural network. Epochs trained:  220Training neural network. Epochs trained:  221Training neural network. Epochs trained:  222Training neural network. Epochs trained:  223Training neural network. Epochs trained:  224Training neural network. Epochs trained:  225Training neural network. Epochs trained:  226Training neural network. Epochs trained:  227Training neural network. Epochs trained:  228Training neural network. Epochs trained:  229Training neural network. Epochs trained:  230Training neural network. Epochs trained:  231Training neural network. Epochs trained:  232Training neural network. Epochs trained:  233Training neural network. Epochs trained:  234Training neural network. Epochs trained:  235Training neural network. Epochs trained:  236Training neural network. Epochs trained:  237Training neural network. Epochs trained:  238Training neural network. Epochs trained:  239Training neural network. Epochs trained:  240Training neural network. Epochs trained:  241Training neural network. Epochs trained:  242Training neural network. Epochs trained:  243Training neural network. Epochs trained:  244Training neural network. Epochs trained:  245Training neural network. Epochs trained:  246Training neural network. Epochs trained:  247Training neural network. Epochs trained:  248Training neural network. Epochs trained:  249Training neural network. Epochs trained:  250Training neural network. Epochs trained:  251Training neural network. Epochs trained:  252Training neural network. Epochs trained:  253Training neural network. Epochs trained:  254Training neural network. Epochs trained:  255Training neural network. Epochs trained:  256Training neural network. Epochs trained:  257Training neural network. Epochs trained:  258Neural network successfully converged after 258 epochs.
Training neural network. Epochs trained:  1Training neural network. Epochs trained:  2Training neural network. Epochs trained:  3Training neural network. Epochs trained:  4Training neural network. Epochs trained:  5Training neural network. Epochs trained:  6Training neural network. Epochs trained:  7Training neural network. Epochs trained:  8Training neural network. Epochs trained:  9Training neural network. Epochs trained:  10Training neural network. Epochs trained:  11Training neural network. Epochs trained:  12Training neural network. Epochs trained:  13Training neural network. Epochs trained:  14Training neural network. Epochs trained:  15Training neural network. Epochs trained:  16Training neural network. Epochs trained:  17Training neural network. Epochs trained:  18Training neural network. Epochs trained:  19Training neural network. Epochs trained:  20Training neural network. Epochs trained:  21Training neural network. Epochs trained:  22Training neural network. Epochs trained:  23Training neural network. Epochs trained:  24Training neural network. Epochs trained:  25Training neural network. Epochs trained:  26Training neural network. Epochs trained:  27Training neural network. Epochs trained:  28Training neural network. Epochs trained:  29Training neural network. Epochs trained:  30Training neural network. Epochs trained:  31Training neural network. Epochs trained:  32Training neural network. Epochs trained:  33Training neural network. Epochs trained:  34Training neural network. Epochs trained:  35Training neural network. Epochs trained:  36Training neural network. Epochs trained:  37Training neural network. Epochs trained:  38Training neural network. Epochs trained:  39Training neural network. Epochs trained:  40Training neural network. Epochs trained:  41Training neural network. Epochs trained:  42Training neural network. Epochs trained:  43Training neural network. Epochs trained:  44Training neural network. Epochs trained:  45Training neural network. Epochs trained:  46Training neural network. Epochs trained:  47Training neural network. Epochs trained:  48Training neural network. Epochs trained:  49Training neural network. Epochs trained:  50Training neural network. Epochs trained:  51Training neural network. Epochs trained:  52Training neural network. Epochs trained:  53Training neural network. Epochs trained:  54Training neural network. Epochs trained:  55Training neural network. Epochs trained:  56Training neural network. Epochs trained:  57Training neural network. Epochs trained:  58Training neural network. Epochs trained:  59Training neural network. Epochs trained:  60Training neural network. Epochs trained:  61Training neural network. Epochs trained:  62Training neural network. Epochs trained:  63Training neural network. Epochs trained:  64Training neural network. Epochs trained:  65Training neural network. Epochs trained:  66Training neural network. Epochs trained:  67Training neural network. Epochs trained:  68Training neural network. Epochs trained:  69Training neural network. Epochs trained:  70Training neural network. Epochs trained:  71Training neural network. Epochs trained:  72Training neural network. Epochs trained:  73Training neural network. Epochs trained:  74Training neural network. Epochs trained:  75Training neural network. Epochs trained:  76Training neural network. Epochs trained:  77Training neural network. Epochs trained:  78Training neural network. Epochs trained:  79Training neural network. Epochs trained:  80Training neural network. Epochs trained:  81Training neural network. Epochs trained:  82Training neural network. Epochs trained:  83Training neural network. Epochs trained:  84Training neural network. Epochs trained:  85Training neural network. Epochs trained:  86Training neural network. Epochs trained:  87Training neural network. Epochs trained:  88Training neural network. Epochs trained:  89Training neural network. Epochs trained:  90Training neural network. Epochs trained:  91Training neural network. Epochs trained:  92Training neural network. Epochs trained:  93Training neural network. Epochs trained:  94Training neural network. Epochs trained:  95Training neural network. Epochs trained:  96Training neural network. Epochs trained:  97Training neural network. Epochs trained:  98Training neural network. Epochs trained:  99Training neural network. Epochs trained:  100Training neural network. Epochs trained:  101Training neural network. Epochs trained:  102Training neural network. Epochs trained:  103Training neural network. Epochs trained:  104Training neural network. Epochs trained:  105Training neural network. Epochs trained:  106Training neural network. Epochs trained:  107Training neural network. Epochs trained:  108Training neural network. Epochs trained:  109Training neural network. Epochs trained:  110Training neural network. Epochs trained:  111Training neural network. Epochs trained:  112Training neural network. Epochs trained:  113Training neural network. Epochs trained:  114Training neural network. Epochs trained:  115Training neural network. Epochs trained:  116Training neural network. Epochs trained:  117Training neural network. Epochs trained:  118Training neural network. Epochs trained:  119Training neural network. Epochs trained:  120Training neural network. Epochs trained:  121Training neural network. Epochs trained:  122Training neural network. Epochs trained:  123Training neural network. Epochs trained:  124Training neural network. Epochs trained:  125Training neural network. Epochs trained:  126Training neural network. Epochs trained:  127Training neural network. Epochs trained:  128Training neural network. Epochs trained:  129Training neural network. Epochs trained:  130Training neural network. Epochs trained:  131Training neural network. Epochs trained:  132Training neural network. Epochs trained:  133Training neural network. Epochs trained:  134Training neural network. Epochs trained:  135Training neural network. Epochs trained:  136Training neural network. Epochs trained:  137Training neural network. Epochs trained:  138Training neural network. Epochs trained:  139Training neural network. Epochs trained:  140Training neural network. Epochs trained:  141Training neural network. Epochs trained:  142Training neural network. Epochs trained:  143Training neural network. Epochs trained:  144Training neural network. Epochs trained:  145Training neural network. Epochs trained:  146Training neural network. Epochs trained:  147Training neural network. Epochs trained:  148Training neural network. Epochs trained:  149Training neural network. Epochs trained:  150Training neural network. Epochs trained:  151Training neural network. Epochs trained:  152Training neural network. Epochs trained:  153Training neural network. Epochs trained:  154Training neural network. Epochs trained:  155Training neural network. Epochs trained:  156Training neural network. Epochs trained:  157Training neural network. Epochs trained:  158Training neural network. Epochs trained:  159Training neural network. Epochs trained:  160Training neural network. Epochs trained:  161Training neural network. Epochs trained:  162Training neural network. Epochs trained:  163Training neural network. Epochs trained:  164Training neural network. Epochs trained:  165Training neural network. Epochs trained:  166Training neural network. Epochs trained:  167Training neural network. Epochs trained:  168Training neural network. Epochs trained:  169Training neural network. Epochs trained:  170Training neural network. Epochs trained:  171Training neural network. Epochs trained:  172Training neural network. Epochs trained:  173Training neural network. Epochs trained:  174Training neural network. Epochs trained:  175Training neural network. Epochs trained:  176Training neural network. Epochs trained:  177Training neural network. Epochs trained:  178Training neural network. Epochs trained:  179Training neural network. Epochs trained:  180Training neural network. Epochs trained:  181Training neural network. Epochs trained:  182Training neural network. Epochs trained:  183Training neural network. Epochs trained:  184Training neural network. Epochs trained:  185Training neural network. Epochs trained:  186Training neural network. Epochs trained:  187Training neural network. Epochs trained:  188Training neural network. Epochs trained:  189Training neural network. Epochs trained:  190Training neural network. Epochs trained:  191Training neural network. Epochs trained:  192Training neural network. Epochs trained:  193Training neural network. Epochs trained:  194Training neural network. Epochs trained:  195Training neural network. Epochs trained:  196Training neural network. Epochs trained:  197Training neural network. Epochs trained:  198Training neural network. Epochs trained:  199Training neural network. Epochs trained:  200Training neural network. Epochs trained:  201Training neural network. Epochs trained:  202Training neural network. Epochs trained:  203Training neural network. Epochs trained:  204Training neural network. Epochs trained:  205Training neural network. Epochs trained:  206Training neural network. Epochs trained:  207Training neural network. Epochs trained:  208Training neural network. Epochs trained:  209Training neural network. Epochs trained:  210Training neural network. Epochs trained:  211Training neural network. Epochs trained:  212Training neural network. Epochs trained:  213Training neural network. Epochs trained:  214Training neural network. Epochs trained:  215Training neural network. Epochs trained:  216Training neural network. Epochs trained:  217Training neural network. Epochs trained:  218Training neural network. Epochs trained:  219Training neural network. Epochs trained:  220Training neural network. Epochs trained:  221Training neural network. Epochs trained:  222Training neural network. Epochs trained:  223Training neural network. Epochs trained:  224Training neural network. Epochs trained:  225Training neural network. Epochs trained:  226Training neural network. Epochs trained:  227Training neural network. Epochs trained:  228Training neural network. Epochs trained:  229Training neural network. Epochs trained:  230Training neural network. Epochs trained:  231Training neural network. Epochs trained:  232Training neural network. Epochs trained:  233Training neural network. Epochs trained:  234Training neural network. Epochs trained:  235Training neural network. Epochs trained:  236Training neural network. Epochs trained:  237Training neural network. Epochs trained:  238Training neural network. Epochs trained:  239Training neural network. Epochs trained:  240Training neural network. Epochs trained:  241Training neural network. Epochs trained:  242Training neural network. Epochs trained:  243Training neural network. Epochs trained:  244Training neural network. Epochs trained:  245Training neural network. Epochs trained:  246Training neural network. Epochs trained:  247Training neural network. Epochs trained:  248Training neural network. Epochs trained:  249Training neural network. Epochs trained:  250Training neural network. Epochs trained:  251Training neural network. Epochs trained:  252Training neural network. Epochs trained:  253Training neural network. Epochs trained:  254Training neural network. Epochs trained:  255Training neural network. Epochs trained:  256Training neural network. Epochs trained:  257Training neural network. Epochs trained:  258Training neural network. Epochs trained:  259Training neural network. Epochs trained:  260Training neural network. Epochs trained:  261Training neural network. Epochs trained:  262Training neural network. Epochs trained:  263Training neural network. Epochs trained:  264Training neural network. Epochs trained:  265Training neural network. Epochs trained:  266Training neural network. Epochs trained:  267Training neural network. Epochs trained:  268Training neural network. Epochs trained:  269Training neural network. Epochs trained:  270Training neural network. Epochs trained:  271Training neural network. Epochs trained:  272Training neural network. Epochs trained:  273Training neural network. Epochs trained:  274Training neural network. Epochs trained:  275Training neural network. Epochs trained:  276Training neural network. Epochs trained:  277Training neural network. Epochs trained:  278Training neural network. Epochs trained:  279Training neural network. Epochs trained:  280Training neural network. Epochs trained:  281Training neural network. Epochs trained:  282Training neural network. Epochs trained:  283Training neural network. Epochs trained:  284Training neural network. Epochs trained:  285Training neural network. Epochs trained:  286Training neural network. Epochs trained:  287Training neural network. Epochs trained:  288Training neural network. Epochs trained:  289Training neural network. Epochs trained:  290Training neural network. Epochs trained:  291Training neural network. Epochs trained:  292Training neural network. Epochs trained:  293Training neural network. Epochs trained:  294Training neural network. Epochs trained:  295Training neural network. Epochs trained:  296Training neural network. Epochs trained:  297Training neural network. Epochs trained:  298Training neural network. Epochs trained:  299Training neural network. Epochs trained:  300Training neural network. Epochs trained:  301Training neural network. Epochs trained:  302Training neural network. Epochs trained:  303Training neural network. Epochs trained:  304Training neural network. Epochs trained:  305Training neural network. Epochs trained:  306Training neural network. Epochs trained:  307Training neural network. Epochs trained:  308Training neural network. Epochs trained:  309Training neural network. Epochs trained:  310Training neural network. Epochs trained:  311Training neural network. Epochs trained:  312Training neural network. Epochs trained:  313Training neural network. Epochs trained:  314Training neural network. Epochs trained:  315Training neural network. Epochs trained:  316Training neural network. Epochs trained:  317Training neural network. Epochs trained:  318Training neural network. Epochs trained:  319Training neural network. Epochs trained:  320Training neural network. Epochs trained:  321Training neural network. Epochs trained:  322Training neural network. Epochs trained:  323Training neural network. Epochs trained:  324Training neural network. Epochs trained:  325Training neural network. Epochs trained:  326Training neural network. Epochs trained:  327Training neural network. Epochs trained:  328Training neural network. Epochs trained:  329Training neural network. Epochs trained:  330Training neural network. Epochs trained:  331Training neural network. Epochs trained:  332Training neural network. Epochs trained:  333Training neural network. Epochs trained:  334Training neural network. Epochs trained:  335Training neural network. Epochs trained:  336Training neural network. Epochs trained:  337Training neural network. Epochs trained:  338Training neural network. Epochs trained:  339Training neural network. Epochs trained:  340Training neural network. Epochs trained:  341Training neural network. Epochs trained:  342Training neural network. Epochs trained:  343Training neural network. Epochs trained:  344Training neural network. Epochs trained:  345Training neural network. Epochs trained:  346Training neural network. Epochs trained:  347Training neural network. Epochs trained:  348Training neural network. Epochs trained:  349Training neural network. Epochs trained:  350Training neural network. Epochs trained:  351Training neural network. Epochs trained:  352Training neural network. Epochs trained:  353Training neural network. Epochs trained:  354Training neural network. Epochs trained:  355Training neural network. Epochs trained:  356Training neural network. Epochs trained:  357Training neural network. Epochs trained:  358Training neural network. Epochs trained:  359Training neural network. Epochs trained:  360Training neural network. Epochs trained:  361Training neural network. Epochs trained:  362Training neural network. Epochs trained:  363Training neural network. Epochs trained:  364Training neural network. Epochs trained:  365Training neural network. Epochs trained:  366Training neural network. Epochs trained:  367Training neural network. Epochs trained:  368Training neural network. Epochs trained:  369Training neural network. Epochs trained:  370Training neural network. Epochs trained:  371Training neural network. Epochs trained:  372Training neural network. Epochs trained:  373Training neural network. Epochs trained:  374Training neural network. Epochs trained:  375Training neural network. Epochs trained:  376Training neural network. Epochs trained:  377Training neural network. Epochs trained:  378Training neural network. Epochs trained:  379Training neural network. Epochs trained:  380Training neural network. Epochs trained:  381Training neural network. Epochs trained:  382Training neural network. Epochs trained:  383Training neural network. Epochs trained:  384Training neural network. Epochs trained:  385Training neural network. Epochs trained:  386Training neural network. Epochs trained:  387Training neural network. Epochs trained:  388Training neural network. Epochs trained:  389Training neural network. Epochs trained:  390Training neural network. Epochs trained:  391Training neural network. Epochs trained:  392Training neural network. Epochs trained:  393Training neural network. Epochs trained:  394Training neural network. Epochs trained:  395Training neural network. Epochs trained:  396Training neural network. Epochs trained:  397Training neural network. Epochs trained:  398Training neural network. Epochs trained:  399Training neural network. Epochs trained:  400Training neural network. Epochs trained:  401Training neural network. Epochs trained:  402Training neural network. Epochs trained:  403Training neural network. Epochs trained:  404Training neural network. Epochs trained:  405Training neural network. Epochs trained:  406Training neural network. Epochs trained:  407Training neural network. Epochs trained:  408Training neural network. Epochs trained:  409Training neural network. Epochs trained:  410Training neural network. Epochs trained:  411Neural network successfully converged after 411 epochs.
Training neural network. Epochs trained:  1Training neural network. Epochs trained:  2Training neural network. Epochs trained:  3Training neural network. Epochs trained:  4Training neural network. Epochs trained:  5Training neural network. Epochs trained:  6Training neural network. Epochs trained:  7Training neural network. Epochs trained:  8Training neural network. Epochs trained:  9Training neural network. Epochs trained:  10Training neural network. Epochs trained:  11Training neural network. Epochs trained:  12Training neural network. Epochs trained:  13Training neural network. Epochs trained:  14Training neural network. Epochs trained:  15Training neural network. Epochs trained:  16Training neural network. Epochs trained:  17Training neural network. Epochs trained:  18Training neural network. Epochs trained:  19Training neural network. Epochs trained:  20Training neural network. Epochs trained:  21Training neural network. Epochs trained:  22Training neural network. Epochs trained:  23Training neural network. Epochs trained:  24Training neural network. Epochs trained:  25Training neural network. Epochs trained:  26Training neural network. Epochs trained:  27Training neural network. Epochs trained:  28Training neural network. Epochs trained:  29Training neural network. Epochs trained:  30Training neural network. Epochs trained:  31Training neural network. Epochs trained:  32Training neural network. Epochs trained:  33Training neural network. Epochs trained:  34Training neural network. Epochs trained:  35Training neural network. Epochs trained:  36Training neural network. Epochs trained:  37Training neural network. Epochs trained:  38Training neural network. Epochs trained:  39Training neural network. Epochs trained:  40Training neural network. Epochs trained:  41Training neural network. Epochs trained:  42Training neural network. Epochs trained:  43Training neural network. Epochs trained:  44Training neural network. Epochs trained:  45Training neural network. Epochs trained:  46Training neural network. Epochs trained:  47Training neural network. Epochs trained:  48Training neural network. Epochs trained:  49Training neural network. Epochs trained:  50Training neural network. Epochs trained:  51Training neural network. Epochs trained:  52Training neural network. Epochs trained:  53Training neural network. Epochs trained:  54Training neural network. Epochs trained:  55Training neural network. Epochs trained:  56Training neural network. Epochs trained:  57Training neural network. Epochs trained:  58Training neural network. Epochs trained:  59Training neural network. Epochs trained:  60Training neural network. Epochs trained:  61Training neural network. Epochs trained:  62Training neural network. Epochs trained:  63Training neural network. Epochs trained:  64Training neural network. Epochs trained:  65Training neural network. Epochs trained:  66Training neural network. Epochs trained:  67Training neural network. Epochs trained:  68Training neural network. Epochs trained:  69Training neural network. Epochs trained:  70Training neural network. Epochs trained:  71Training neural network. Epochs trained:  72Training neural network. Epochs trained:  73Training neural network. Epochs trained:  74Training neural network. Epochs trained:  75Training neural network. Epochs trained:  76Training neural network. Epochs trained:  77Training neural network. Epochs trained:  78Training neural network. Epochs trained:  79Training neural network. Epochs trained:  80Training neural network. Epochs trained:  81Training neural network. Epochs trained:  82Training neural network. Epochs trained:  83Training neural network. Epochs trained:  84Training neural network. Epochs trained:  85Training neural network. Epochs trained:  86Training neural network. Epochs trained:  87Training neural network. Epochs trained:  88Training neural network. Epochs trained:  89Training neural network. Epochs trained:  90Training neural network. Epochs trained:  91Training neural network. Epochs trained:  92Training neural network. Epochs trained:  93Training neural network. Epochs trained:  94Training neural network. Epochs trained:  95Training neural network. Epochs trained:  96Training neural network. Epochs trained:  97Training neural network. Epochs trained:  98Training neural network. Epochs trained:  99Training neural network. Epochs trained:  100Training neural network. Epochs trained:  101Training neural network. Epochs trained:  102Training neural network. Epochs trained:  103Training neural network. Epochs trained:  104Training neural network. Epochs trained:  105Training neural network. Epochs trained:  106Training neural network. Epochs trained:  107Training neural network. Epochs trained:  108Training neural network. Epochs trained:  109Training neural network. Epochs trained:  110Training neural network. Epochs trained:  111Training neural network. Epochs trained:  112Training neural network. Epochs trained:  113Training neural network. Epochs trained:  114Training neural network. Epochs trained:  115Training neural network. Epochs trained:  116Training neural network. Epochs trained:  117Training neural network. Epochs trained:  118Training neural network. Epochs trained:  119Training neural network. Epochs trained:  120Training neural network. Epochs trained:  121Training neural network. Epochs trained:  122Training neural network. Epochs trained:  123Training neural network. Epochs trained:  124Training neural network. Epochs trained:  125Training neural network. Epochs trained:  126Training neural network. Epochs trained:  127Training neural network. Epochs trained:  128Training neural network. Epochs trained:  129Training neural network. Epochs trained:  130Training neural network. Epochs trained:  131Training neural network. Epochs trained:  132Training neural network. Epochs trained:  133Training neural network. Epochs trained:  134Training neural network. Epochs trained:  135Training neural network. Epochs trained:  136Training neural network. Epochs trained:  137Training neural network. Epochs trained:  138Training neural network. Epochs trained:  139Training neural network. Epochs trained:  140Training neural network. Epochs trained:  141Training neural network. Epochs trained:  142Training neural network. Epochs trained:  143Training neural network. Epochs trained:  144Training neural network. Epochs trained:  145Training neural network. Epochs trained:  146Training neural network. Epochs trained:  147Training neural network. Epochs trained:  148Training neural network. Epochs trained:  149Training neural network. Epochs trained:  150Training neural network. Epochs trained:  151Training neural network. Epochs trained:  152Training neural network. Epochs trained:  153Training neural network. Epochs trained:  154Training neural network. Epochs trained:  155Training neural network. Epochs trained:  156Training neural network. Epochs trained:  157Training neural network. Epochs trained:  158Training neural network. Epochs trained:  159Training neural network. Epochs trained:  160Training neural network. Epochs trained:  161Training neural network. Epochs trained:  162Training neural network. Epochs trained:  163Training neural network. Epochs trained:  164Training neural network. Epochs trained:  165Training neural network. Epochs trained:  166Training neural network. Epochs trained:  167Training neural network. Epochs trained:  168Training neural network. Epochs trained:  169Training neural network. Epochs trained:  170Training neural network. Epochs trained:  171Training neural network. Epochs trained:  172Training neural network. Epochs trained:  173Training neural network. Epochs trained:  174Training neural network. Epochs trained:  175Training neural network. Epochs trained:  176Training neural network. Epochs trained:  177Training neural network. Epochs trained:  178Training neural network. Epochs trained:  179Training neural network. Epochs trained:  180Training neural network. Epochs trained:  181Training neural network. Epochs trained:  182Training neural network. Epochs trained:  183Training neural network. Epochs trained:  184Training neural network. Epochs trained:  185Training neural network. Epochs trained:  186Training neural network. Epochs trained:  187Training neural network. Epochs trained:  188Training neural network. Epochs trained:  189Training neural network. Epochs trained:  190Training neural network. Epochs trained:  191Training neural network. Epochs trained:  192Training neural network. Epochs trained:  193Training neural network. Epochs trained:  194Training neural network. Epochs trained:  195Training neural network. Epochs trained:  196Training neural network. Epochs trained:  197Training neural network. Epochs trained:  198Training neural network. Epochs trained:  199Training neural network. Epochs trained:  200Training neural network. Epochs trained:  201Training neural network. Epochs trained:  202Training neural network. Epochs trained:  203Training neural network. Epochs trained:  204Training neural network. Epochs trained:  205Training neural network. Epochs trained:  206Training neural network. Epochs trained:  207Training neural network. Epochs trained:  208Training neural network. Epochs trained:  209Training neural network. Epochs trained:  210Training neural network. Epochs trained:  211Training neural network. Epochs trained:  212Training neural network. Epochs trained:  213Training neural network. Epochs trained:  214Training neural network. Epochs trained:  215Training neural network. Epochs trained:  216Training neural network. Epochs trained:  217Training neural network. Epochs trained:  218Training neural network. Epochs trained:  219Training neural network. Epochs trained:  220Training neural network. Epochs trained:  221Training neural network. Epochs trained:  222Training neural network. Epochs trained:  223Training neural network. Epochs trained:  224Training neural network. Epochs trained:  225Training neural network. Epochs trained:  226Training neural network. Epochs trained:  227Training neural network. Epochs trained:  228Training neural network. Epochs trained:  229Training neural network. Epochs trained:  230Training neural network. Epochs trained:  231Training neural network. Epochs trained:  232Training neural network. Epochs trained:  233Training neural network. Epochs trained:  234Training neural network. Epochs trained:  235Training neural network. Epochs trained:  236Training neural network. Epochs trained:  237Training neural network. Epochs trained:  238Training neural network. Epochs trained:  239Training neural network. Epochs trained:  240Training neural network. Epochs trained:  241Training neural network. Epochs trained:  242Training neural network. Epochs trained:  243Training neural network. Epochs trained:  244Training neural network. Epochs trained:  245Training neural network. Epochs trained:  246Training neural network. Epochs trained:  247Training neural network. Epochs trained:  248Training neural network. Epochs trained:  249Training neural network. Epochs trained:  250Training neural network. Epochs trained:  251Training neural network. Epochs trained:  252Training neural network. Epochs trained:  253Training neural network. Epochs trained:  254Training neural network. Epochs trained:  255Training neural network. Epochs trained:  256Training neural network. Epochs trained:  257Training neural network. Epochs trained:  258Training neural network. Epochs trained:  259Training neural network. Epochs trained:  260Training neural network. Epochs trained:  261Training neural network. Epochs trained:  262Training neural network. Epochs trained:  263Training neural network. Epochs trained:  264Training neural network. Epochs trained:  265Training neural network. Epochs trained:  266Training neural network. Epochs trained:  267Training neural network. Epochs trained:  268Training neural network. Epochs trained:  269Training neural network. Epochs trained:  270Training neural network. Epochs trained:  271Training neural network. Epochs trained:  272Training neural network. Epochs trained:  273Training neural network. Epochs trained:  274Training neural network. Epochs trained:  275Training neural network. Epochs trained:  276Training neural network. Epochs trained:  277Training neural network. Epochs trained:  278Training neural network. Epochs trained:  279Training neural network. Epochs trained:  280Training neural network. Epochs trained:  281Training neural network. Epochs trained:  282Training neural network. Epochs trained:  283Training neural network. Epochs trained:  284Training neural network. Epochs trained:  285Training neural network. Epochs trained:  286Training neural network. Epochs trained:  287Training neural network. Epochs trained:  288Training neural network. Epochs trained:  289Training neural network. Epochs trained:  290Training neural network. Epochs trained:  291Training neural network. Epochs trained:  292Training neural network. Epochs trained:  293Training neural network. Epochs trained:  294Training neural network. Epochs trained:  295Training neural network. Epochs trained:  296Training neural network. Epochs trained:  297Training neural network. Epochs trained:  298Training neural network. Epochs trained:  299Training neural network. Epochs trained:  300Training neural network. Epochs trained:  301Training neural network. Epochs trained:  302Training neural network. Epochs trained:  303Training neural network. Epochs trained:  304Training neural network. Epochs trained:  305Training neural network. Epochs trained:  306Training neural network. Epochs trained:  307Training neural network. Epochs trained:  308Training neural network. Epochs trained:  309Training neural network. Epochs trained:  310Training neural network. Epochs trained:  311Training neural network. Epochs trained:  312Training neural network. Epochs trained:  313Training neural network. Epochs trained:  314Training neural network. Epochs trained:  315Training neural network. Epochs trained:  316Training neural network. Epochs trained:  317Training neural network. Epochs trained:  318Training neural network. Epochs trained:  319Training neural network. Epochs trained:  320Training neural network. Epochs trained:  321Training neural network. Epochs trained:  322Training neural network. Epochs trained:  323Training neural network. Epochs trained:  324Training neural network. Epochs trained:  325Training neural network. Epochs trained:  326Training neural network. Epochs trained:  327Training neural network. Epochs trained:  328Training neural network. Epochs trained:  329Training neural network. Epochs trained:  330Training neural network. Epochs trained:  331Training neural network. Epochs trained:  332Training neural network. Epochs trained:  333Training neural network. Epochs trained:  334Training neural network. Epochs trained:  335Training neural network. Epochs trained:  336Training neural network. Epochs trained:  337Training neural network. Epochs trained:  338Training neural network. Epochs trained:  339Training neural network. Epochs trained:  340Training neural network. Epochs trained:  341Training neural network. Epochs trained:  342Training neural network. Epochs trained:  343Training neural network. Epochs trained:  344Training neural network. Epochs trained:  345Training neural network. Epochs trained:  346Training neural network. Epochs trained:  347Training neural network. Epochs trained:  348Training neural network. Epochs trained:  349Training neural network. Epochs trained:  350Training neural network. Epochs trained:  351Training neural network. Epochs trained:  352Training neural network. Epochs trained:  353Training neural network. Epochs trained:  354Training neural network. Epochs trained:  355Training neural network. Epochs trained:  356Training neural network. Epochs trained:  357Training neural network. Epochs trained:  358Training neural network. Epochs trained:  359Training neural network. Epochs trained:  360Training neural network. Epochs trained:  361Training neural network. Epochs trained:  362Training neural network. Epochs trained:  363Training neural network. Epochs trained:  364Training neural network. Epochs trained:  365Training neural network. Epochs trained:  366Training neural network. Epochs trained:  367Training neural network. Epochs trained:  368Training neural network. Epochs trained:  369Training neural network. Epochs trained:  370Training neural network. Epochs trained:  371Training neural network. Epochs trained:  372Training neural network. Epochs trained:  373Training neural network. Epochs trained:  374Training neural network. Epochs trained:  375Training neural network. Epochs trained:  376Training neural network. Epochs trained:  377Training neural network. Epochs trained:  378Training neural network. Epochs trained:  379Training neural network. Epochs trained:  380Training neural network. Epochs trained:  381Training neural network. Epochs trained:  382Training neural network. Epochs trained:  383Training neural network. Epochs trained:  384Training neural network. Epochs trained:  385Training neural network. Epochs trained:  386Training neural network. Epochs trained:  387Training neural network. Epochs trained:  388Training neural network. Epochs trained:  389Training neural network. Epochs trained:  390Training neural network. Epochs trained:  391Training neural network. Epochs trained:  392Training neural network. Epochs trained:  393Training neural network. Epochs trained:  394Training neural network. Epochs trained:  395Training neural network. Epochs trained:  396Training neural network. Epochs trained:  397Training neural network. Epochs trained:  398Training neural network. Epochs trained:  399Training neural network. Epochs trained:  400Training neural network. Epochs trained:  401Training neural network. Epochs trained:  402Training neural network. Epochs trained:  403Training neural network. Epochs trained:  404Training neural network. Epochs trained:  405Training neural network. Epochs trained:  406Training neural network. Epochs trained:  407Training neural network. Epochs trained:  408Training neural network. Epochs trained:  409Training neural network. Epochs trained:  410Training neural network. Epochs trained:  411Training neural network. Epochs trained:  412Training neural network. Epochs trained:  413Training neural network. Epochs trained:  414Training neural network. Epochs trained:  415Training neural network. Epochs trained:  416Training neural network. Epochs trained:  417Training neural network. Epochs trained:  418Training neural network. Epochs trained:  419Training neural network. Epochs trained:  420Training neural network. Epochs trained:  421Training neural network. Epochs trained:  422Training neural network. Epochs trained:  423Training neural network. Epochs trained:  424Training neural network. Epochs trained:  425Training neural network. Epochs trained:  426Training neural network. Epochs trained:  427Training neural network. Epochs trained:  428Training neural network. Epochs trained:  429Training neural network. Epochs trained:  430Training neural network. Epochs trained:  431Training neural network. Epochs trained:  432Training neural network. Epochs trained:  433Training neural network. Epochs trained:  434Training neural network. Epochs trained:  435Training neural network. Epochs trained:  436Training neural network. Epochs trained:  437Training neural network. Epochs trained:  438Training neural network. Epochs trained:  439Training neural network. Epochs trained:  440Training neural network. Epochs trained:  441Training neural network. Epochs trained:  442Training neural network. Epochs trained:  443Training neural network. Epochs trained:  444Training neural network. Epochs trained:  445Training neural network. Epochs trained:  446Training neural network. Epochs trained:  447Training neural network. Epochs trained:  448Training neural network. Epochs trained:  449Training neural network. Epochs trained:  450Training neural network. Epochs trained:  451Training neural network. Epochs trained:  452Training neural network. Epochs trained:  453Training neural network. Epochs trained:  454Training neural network. Epochs trained:  455Training neural network. Epochs trained:  456Training neural network. Epochs trained:  457Training neural network. Epochs trained:  458Training neural network. Epochs trained:  459Training neural network. Epochs trained:  460Training neural network. Epochs trained:  461Training neural network. Epochs trained:  462Training neural network. Epochs trained:  463Training neural network. Epochs trained:  464Training neural network. Epochs trained:  465Training neural network. Epochs trained:  466Training neural network. Epochs trained:  467Training neural network. Epochs trained:  468Training neural network. Epochs trained:  469Training neural network. Epochs trained:  470Training neural network. Epochs trained:  471Training neural network. Epochs trained:  472Training neural network. Epochs trained:  473Training neural network. Epochs trained:  474Training neural network. Epochs trained:  475Training neural network. Epochs trained:  476Training neural network. Epochs trained:  477Training neural network. Epochs trained:  478Training neural network. Epochs trained:  479Training neural network. Epochs trained:  480Training neural network. Epochs trained:  481Training neural network. Epochs trained:  482Training neural network. Epochs trained:  483Training neural network. Epochs trained:  484Training neural network. Epochs trained:  485Training neural network. Epochs trained:  486Training neural network. Epochs trained:  487Training neural network. Epochs trained:  488Training neural network. Epochs trained:  489Training neural network. Epochs trained:  490Training neural network. Epochs trained:  491Training neural network. Epochs trained:  492Training neural network. Epochs trained:  493Training neural network. Epochs trained:  494Training neural network. Epochs trained:  495Training neural network. Epochs trained:  496Training neural network. Epochs trained:  497Training neural network. Epochs trained:  498Training neural network. Epochs trained:  499Training neural network. Epochs trained:  500Training neural network. Epochs trained:  501Training neural network. Epochs trained:  502Training neural network. Epochs trained:  503Training neural network. Epochs trained:  504Training neural network. Epochs trained:  505Training neural network. Epochs trained:  506Training neural network. Epochs trained:  507Training neural network. Epochs trained:  508Training neural network. Epochs trained:  509Training neural network. Epochs trained:  510Training neural network. Epochs trained:  511Training neural network. Epochs trained:  512Training neural network. Epochs trained:  513Training neural network. Epochs trained:  514Training neural network. Epochs trained:  515Training neural network. Epochs trained:  516Training neural network. Epochs trained:  517Training neural network. Epochs trained:  518Training neural network. Epochs trained:  519Training neural network. Epochs trained:  520Training neural network. Epochs trained:  521Training neural network. Epochs trained:  522Training neural network. Epochs trained:  523Training neural network. Epochs trained:  524Training neural network. Epochs trained:  525Training neural network. Epochs trained:  526Training neural network. Epochs trained:  527Training neural network. Epochs trained:  528Training neural network. Epochs trained:  529Training neural network. Epochs trained:  530Training neural network. Epochs trained:  531Training neural network. Epochs trained:  532Training neural network. Epochs trained:  533Training neural network. Epochs trained:  534Training neural network. Epochs trained:  535Training neural network. Epochs trained:  536Training neural network. Epochs trained:  537Training neural network. Epochs trained:  538Training neural network. Epochs trained:  539Training neural network. Epochs trained:  540Training neural network. Epochs trained:  541Training neural network. Epochs trained:  542Training neural network. Epochs trained:  543Training neural network. Epochs trained:  544Training neural network. Epochs trained:  545Training neural network. Epochs trained:  546Training neural network. Epochs trained:  547Training neural network. Epochs trained:  548Training neural network. Epochs trained:  549Training neural network. Epochs trained:  550Training neural network. Epochs trained:  551Training neural network. Epochs trained:  552Training neural network. Epochs trained:  553Training neural network. Epochs trained:  554Training neural network. Epochs trained:  555Training neural network. Epochs trained:  556Training neural network. Epochs trained:  557Training neural network. Epochs trained:  558Training neural network. Epochs trained:  559Training neural network. Epochs trained:  560Training neural network. Epochs trained:  561Training neural network. Epochs trained:  562Training neural network. Epochs trained:  563Training neural network. Epochs trained:  564Training neural network. Epochs trained:  565Training neural network. Epochs trained:  566Training neural network. Epochs trained:  567Training neural network. Epochs trained:  568Training neural network. Epochs trained:  569Training neural network. Epochs trained:  570Training neural network. Epochs trained:  571Training neural network. Epochs trained:  572Training neural network. Epochs trained:  573Training neural network. Epochs trained:  574Training neural network. Epochs trained:  575Training neural network. Epochs trained:  576Training neural network. Epochs trained:  577Training neural network. Epochs trained:  578Training neural network. Epochs trained:  579Training neural network. Epochs trained:  580Training neural network. Epochs trained:  581Training neural network. Epochs trained:  582Training neural network. Epochs trained:  583Training neural network. Epochs trained:  584Training neural network. Epochs trained:  585Training neural network. Epochs trained:  586Training neural network. Epochs trained:  587Training neural network. Epochs trained:  588Training neural network. Epochs trained:  589Training neural network. Epochs trained:  590Training neural network. Epochs trained:  591Training neural network. Epochs trained:  592Training neural network. Epochs trained:  593Training neural network. Epochs trained:  594Training neural network. Epochs trained:  595Training neural network. Epochs trained:  596Training neural network. Epochs trained:  597Training neural network. Epochs trained:  598Training neural network. Epochs trained:  599Training neural network. Epochs trained:  600Training neural network. Epochs trained:  601Training neural network. Epochs trained:  602Training neural network. Epochs trained:  603Training neural network. Epochs trained:  604Training neural network. Epochs trained:  605Training neural network. Epochs trained:  606Training neural network. Epochs trained:  607Training neural network. Epochs trained:  608Training neural network. Epochs trained:  609Training neural network. Epochs trained:  610Training neural network. Epochs trained:  611Training neural network. Epochs trained:  612Training neural network. Epochs trained:  613Training neural network. Epochs trained:  614Training neural network. Epochs trained:  615Training neural network. Epochs trained:  616Training neural network. Epochs trained:  617Training neural network. Epochs trained:  618Training neural network. Epochs trained:  619Training neural network. Epochs trained:  620Training neural network. Epochs trained:  621Training neural network. Epochs trained:  622Training neural network. Epochs trained:  623Training neural network. Epochs trained:  624Training neural network. Epochs trained:  625Training neural network. Epochs trained:  626Training neural network. Epochs trained:  627Training neural network. Epochs trained:  628Training neural network. Epochs trained:  629Training neural network. Epochs trained:  630Training neural network. Epochs trained:  631Training neural network. Epochs trained:  632Training neural network. Epochs trained:  633Training neural network. Epochs trained:  634Training neural network. Epochs trained:  635Training neural network. Epochs trained:  636Training neural network. Epochs trained:  637Training neural network. Epochs trained:  638Training neural network. Epochs trained:  639Training neural network. Epochs trained:  640Training neural network. Epochs trained:  641Training neural network. Epochs trained:  642Training neural network. Epochs trained:  643Training neural network. Epochs trained:  644Training neural network. Epochs trained:  645Training neural network. Epochs trained:  646Training neural network. Epochs trained:  647Training neural network. Epochs trained:  648Training neural network. Epochs trained:  649Training neural network. Epochs trained:  650Training neural network. Epochs trained:  651Training neural network. Epochs trained:  652Training neural network. Epochs trained:  653Training neural network. Epochs trained:  654Training neural network. Epochs trained:  655Training neural network. Epochs trained:  656Training neural network. Epochs trained:  657Training neural network. Epochs trained:  658Training neural network. Epochs trained:  659Training neural network. Epochs trained:  660Training neural network. Epochs trained:  661Training neural network. Epochs trained:  662Training neural network. Epochs trained:  663Training neural network. Epochs trained:  664Training neural network. Epochs trained:  665Training neural network. Epochs trained:  666Training neural network. Epochs trained:  667Training neural network. Epochs trained:  668Training neural network. Epochs trained:  669Training neural network. Epochs trained:  670Training neural network. Epochs trained:  671Training neural network. Epochs trained:  672Training neural network. Epochs trained:  673Training neural network. Epochs trained:  674Training neural network. Epochs trained:  675Training neural network. Epochs trained:  676Training neural network. Epochs trained:  677Training neural network. Epochs trained:  678Training neural network. Epochs trained:  679Training neural network. Epochs trained:  680Neural network successfully converged after 680 epochs.
log prob true 4.252527
log prob true 3.726789
log prob true 4.0258923
log prob true 2.7131274
log prob true 3.244371
log prob true 2.836325
log prob true 3.4114714
log prob true 4.030652
log prob true 3.5845835
log prob true 3.3545141
log prob true 2.7183673
log prob true 3.8366554
log prob true 4.0084214
log prob true 3.9316876
log prob true 3.2035968
log prob true 2.8011227
log prob true 3.567877
log prob true 3.887455
log prob true 2.9703994
log prob true 4.0921307
log prob true 3.883378
log prob true 3.1489723
log prob true 4.113112
log prob true 3.5731177
log prob true 4.082958
log prob true 3.8511443
log prob true 2.936187
log prob true 3.4824789
log prob true 4.0722275
log prob true 2.6652052
log prob true 6.6479983
log prob true 6.15915
log prob true 6.337127
log prob true 5.8246627
log prob true 5.5045047
log prob true 5.9195185
log prob true 5.8441625
log prob true 6.3947763
log prob true 5.3546133
log prob true 6.186729
log prob true 6.032414
log prob true 6.222245
log prob true 6.8170886
log prob true 6.37439
log prob true 4.2878923
log prob true 5.3173413
log prob true 5.791807
log prob true 6.159033
log prob true 5.7703633
log prob true 6.468641
log prob true 6.464775
log prob true 6.173592
log prob true 6.5122023
log prob true 5.866748
log prob true 6.405463
log prob true 6.3007946
log prob true 5.560498
log prob true 5.9362288
log prob true 6.336008
log prob true 5.750259
log prob true 6.783176
log prob true 6.2179556
log prob true 6.1037517
log prob true 6.142812
log prob true 5.8456693
log prob true 6.106832
log prob true 5.963261
log prob true 6.5260262
log prob true 5.8741174
log prob true 6.4150157
log prob true 6.0777874
log prob true 6.3534846
log prob true 6.8665676
log prob true 6.3998966
log prob true 5.4408693
log prob true 5.6399965
log prob true 5.921183
log prob true 6.079622
log prob true 5.3340645
log prob true 6.455863
log prob true 6.5493236
log prob true 6.3388076
log prob true 6.580083
log prob true 6.07565
log prob true 6.423974
log prob true 6.267244
log prob true 5.5655103
log prob true 5.907124
log prob true 6.550478
log prob true 5.855519
log prob true 4.22288
log prob true 3.6162574
log prob true 3.901261
log prob true 3.2497783
log prob true 3.3058581
log prob true 2.5166323
log prob true 3.5216227
log prob true 4.087985
log prob true 3.4578626
log prob true 3.7089174
log prob true 3.2214987
log prob true 3.8993423
log prob true 3.9623532
log prob true 3.9161363
log prob true 3.1399722
log prob true 2.7994857
log prob true 3.394334
log prob true 3.7094572
log prob true 2.8499126
log prob true 4.151037
log prob true 3.8516254
log prob true 3.3212469
log prob true 4.1912236
log prob true 3.6093636
log prob true 3.899984
log prob true 3.9202127
log prob true 2.938123
log prob true 3.515471
log prob true 3.872585
log prob true 2.8480554
log prob true 7.0252705
log prob true 6.3762503
log prob true 6.3004503
log prob true 6.1353326
log prob true 5.9543004
log prob true 6.245366
log prob true 5.9770947
log prob true 6.7481694
log prob true 6.0982366
log prob true 6.538349
log prob true 6.2428136
log prob true 6.4587436
log prob true 6.9257402
log prob true 6.457027
log prob true 5.8853984
log prob true 5.9139647
log prob true 6.2924805
log prob true 6.3108225
log prob true 5.950056
log prob true 6.508586
log prob true 6.5074906
log prob true 6.4474206
log prob true 6.769829
log prob true 6.3257937
log prob true 6.6262593
log prob true 6.1933575
log prob true 5.8189626
log prob true 6.3062634
log prob true 6.688697
log prob true 5.9821525
log prob true 6.463616
log prob true 6.0106516
log prob true 6.1791835
log prob true 5.977143
log prob true 5.235116
log prob true 5.843179
log prob true 5.7469525
log prob true 6.4546494
log prob true 5.7293787
log prob true 6.208675
log prob true 5.973787
log prob true 6.228303
log prob true 6.7105246
log prob true 6.215085
log prob true 5.60521
log prob true 5.125592
log prob true 5.790637
log prob true 5.9999065
log prob true 5.2765594
log prob true 6.3495126
log prob true 6.2899933
log prob true 6.1469817
log prob true 6.347827
log prob true 6.0596504
log prob true 6.2926474
log prob true 6.069859
log prob true 5.4588027
log prob true 5.979984
log prob true 6.4832067
log prob true 5.8140087
log prob true 6.8073473
log prob true 5.969163
log prob true 6.533487
log prob true 6.344333
log prob true 5.7859306
log prob true 6.115192
log prob true 6.066514
log prob true 6.644921
log prob true 6.176366
log prob true 6.4295783
log prob true 6.175379
log prob true 6.313424
log prob true 6.8800817
log prob true 6.624635
log prob true 6.04997
log prob true 5.736952
log prob true 5.9579597
log prob true 6.349394
log prob true 5.978227
log prob true 6.655527
log prob true 6.730963
log prob true 6.221282
log prob true 6.560984
log prob true 6.038831
log prob true 6.5425215
log prob true 6.435598
log prob true 5.5568085
log prob true 6.1777177
log prob true 6.412106
log prob true 6.306812
log prob true 6.5444727
log prob true 5.9878864
log prob true 6.234421
log prob true 5.9041915
log prob true 5.5157
log prob true 5.5988703
log prob true 5.57889
log prob true 6.2718253
log prob true 5.8161864
log prob true 6.141219
log prob true 5.9142
log prob true 6.0864954
log prob true 6.4093366
log prob true 6.181345
log prob true 5.7297907
log prob true 5.548703
log prob true 5.727824
log prob true 5.950658
log prob true 5.8434863
log prob true 6.261713
log prob true 6.2430935
log prob true 6.0983844
log prob true 6.431974
log prob true 5.8100133
log prob true 6.276104
log prob true 5.9425774
log prob true 5.367734
log prob true 5.7236094
log prob true 6.333027
log prob true 5.814664
log prob true 7.161267
log prob true 6.5382247
log prob true 6.711296
log prob true 6.515997
log prob true 6.230651
log prob true 5.910654
log prob true 6.4570794
log prob true 7.022476
log prob true 6.5019636
log prob true 6.602936
log prob true 6.4515324
log prob true 6.9564795
log prob true 7.0321126
log prob true 6.889423
log prob true 6.316296
log prob true 5.892454
log prob true 6.3472476
log prob true 6.7205186
log prob true 6.306272
log prob true 6.94318
log prob true 6.7565618
log prob true 6.2832932
log prob true 7.040662
log prob true 6.575057
log prob true 6.9989467
log prob true 6.762979
log prob true 6.0993876
log prob true 6.502083
log prob true 6.761971
log prob true 6.4596825
log prob true 7.4141335
log prob true 6.8026733
log prob true 7.100328
log prob true 6.7942834
log prob true 6.554186
log prob true 6.358143
log prob true 6.5950894
log prob true 7.1439342
log prob true 6.708471
log prob true 7.080383
log prob true 6.8170257
log prob true 6.8043046
log prob true 7.3878527
log prob true 6.995994
log prob true 6.511489
log prob true 6.3009324
log prob true 6.619577
log prob true 6.8564606
log prob true 6.4629164
log prob true 7.151935
log prob true 7.1126146
log prob true 6.9011583
log prob true 7.167293
log prob true 6.624239
log prob true 7.2174354
log prob true 6.764447
log prob true 6.240776
log prob true 6.6853004
log prob true 7.1361065
log prob true 6.6681066
script complete
